#!/usr/bin/env bash

export PATH=/sbin:$PATH
export VAULT_ADDR=https://vault.homelab.dmann.xyz:8200

role="ceph-slave"
latest_drivers="yes"
ceph="true"
wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg >/dev/null
gpg --no-default-keyring --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg --fingerprint
echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
apt-get update
apt-get upgrade -y
apt-get install -y sudo curl wget ca-certificates systemd-timesyncd ssl-cert podman lvm2 qemu-kvm libvirt-clients libvirt-daemon-system bridge-utils virtinst libvirt-daemon openvswitch-switch psmisc vault jq

if [[ ! cat /etc/libvirt/libvirtd.conf | grep -E 'auth_tcp = "nonea"' ]]; then
    echo 'auth_tcp = "none"' >> /etc/libvirt/libvirtd.conf
fi

if [[ "$latest_drivers" == "yes" ]]; then
    (
        cd $(mktemp -d)
        wget -r -nd -erobots=off -A '*.fw' --accept-regex '/plain/' https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git/tree/bnx2x/
        mv *.fw /lib/firmware/bnx2x/.
        update-initramfs -c -k all
    )
fi

echo '/var/lib/libvirt/** rwk,' > /etc/apparmor.d/local/abstractions/libvirt-qemu 

cat << EOF > /etc/modules-load.d/nat.conf
nf_nat_tftp
nf_conntrack
nf_nat
br_netfilter
EOF

cat << EOF > /etc/sysctl.d/90-nat.conf
net.ipv4.ip_forward=1
net.ipv4.conf.all.forwarding=1
net.ipv6.conf.all.forwarding=1 
net.bridge.bridge-nf-call-arptables=1
net.bridge.bridge-nf-call-iptables=1
net.bridge.bridge-nf-call-ip6tables=1
EOF

echo 'PermitRootLogin prohibit-password' > /etc/ssh/sshd_config.d/allow_root.conf
systemctl restart sshd

systemctl stop libvirtd
systemctl enable --now libvirtd-tcp.socket

if [[ "${ceph}" == "true" ]]; then
    if ! command cephadm; then
        (
            cd $(mktemp -d)
            curl --silent --remote-name --location https://github.com/ceph/ceph/raw/quincy/src/cephadm/cephadm -o /usr/local/bin/cephadm
            chmod +x cephadm
            ./cephadm add-repo --release quincy
            ./cephadm install
        )
    fi
fi

if [[ "${role}" == "ceph-master" ]]; then
    cephadm bootstrap --mon-ip 10.0.1.110
    ceph config set mgr mgr/cephadm/autotune_memory_target_ratio 0.3
    ceph auth get-or-create client.libvirt mon 'profile rbd' osd 'profile rbd'
fi

# app role "provisioner" allows to create a node identity csr
# while csr not signed, wait
# once csr signed, download and use as the vault auth method


export VAULT_ADDR=https://vault.homelab.dmann.xyz:8200

cat << 'EOF' > /usr/local/bin/refresh-node-cert
#!/usr/bin/env bash

node_token=""
wrapped_secret_id_token_file="/run/vault/.node-provisioner-secret-id"
approle_role_name="node-provisioner"
cert_role_name="node"

if [ ! -f "/etc/ssl/private/node.key" ]; then
    if [ ! -s "${wrapped_secret_id_token_file}" ]; then
        echo "missing wrapped token"
        exit 2
    fi

    wrapped_token=$(cat $wrapped_secret_id_token_file)
    
    secret_id=$(VAULT_TOKEN="${wrapped_token}" vault unwrap -field=secret_id)
    node_token=$(vault write -field=token auth/approle/login \
        role_id=$approle_role_name \
        secret_id="${secret_id}")
else
    node_token=$(vault login -field=token  \
        -method=cert  \
        -ca-cert=/etc/ssl/certs/ca-certificates.crt  \
        -client-cert=/etc/ssl/certs/node.crt  \
        -client-key=/etc/ssl/private/node.key \
        name="${cert_role_name}")
fi

VAULT_TOKEN="${node_token}" vault write -format=json dmann-xyz/v1/ica2/v1/issue/dmann-dot-xyz-node \
    common_name="$(hostname --fqdn)" \
| tee \
    >(jq -r '.data.private_key' > /etc/ssl/private/node.key) \
    >(jq -r '.data.certificate' > /etc/ssl/certs/node.crt) \
    >(jq -r '.data.ca_chain | join("\n")' | awk 'BEGIN {c=0;} /BEGIN CERT/{c++} { print > "/usr/local/share/ca-certificates/node-root-ca." c ".crt"}')
update-ca-certificates

EOF

if [[ "${role}" =~ ^ceph-* ]]; then
    mkdir -p /usr/local/opt
    cat << EOF > /usr/local/etc/vault/vault-agent.hcl
pid_file = "/run/vault-agent"
vault {
  address = "https://vault.homelab.dmann.xyz:8200"
}
auto_auth {
    exit_on_err = true
  method "cert" {
    config = {
      name = "node"
      ca_cert = /etc/ssl/certs/ca-certificates.crt 
      client_cert = /etc/ssl/certs/node.crt
      client_key = /etc/ssl/private/node.key
    }
  }
}

cache {
  use_auto_auth_token = true
}

listener "tcp" {
  address = "127.0.0.1:8100"
  tls_disable = true
}
EOF
    
fi
