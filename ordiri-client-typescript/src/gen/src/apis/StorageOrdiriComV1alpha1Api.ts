/* tslint:disable */
/* eslint-disable */
/**
 * openapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ComGithubOrdiriOrdiriPkgApisStorageV1alpha1Volume,
  ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeClaim,
  ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeClaimList,
  ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeList,
  IoK8sApimachineryPkgApisMetaV1APIResourceList,
  IoK8sApimachineryPkgApisMetaV1DeleteOptions,
  IoK8sApimachineryPkgApisMetaV1Status,
  IoK8sApimachineryPkgApisMetaV1WatchEvent,
} from '../models';
import {
    ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeFromJSON,
    ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeToJSON,
    ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeClaimFromJSON,
    ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeClaimToJSON,
    ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeClaimListFromJSON,
    ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeClaimListToJSON,
    ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeListFromJSON,
    ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeListToJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceListToJSON,
    IoK8sApimachineryPkgApisMetaV1DeleteOptionsFromJSON,
    IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON,
    IoK8sApimachineryPkgApisMetaV1StatusFromJSON,
    IoK8sApimachineryPkgApisMetaV1StatusToJSON,
    IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON,
    IoK8sApimachineryPkgApisMetaV1WatchEventToJSON,
} from '../models';

export interface CreateStorageOrdiriComV1alpha1VolumeRequest {
    body: ComGithubOrdiriOrdiriPkgApisStorageV1alpha1Volume;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface CreateStorageOrdiriComV1alpha1VolumeClaimRequest {
    body: ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeClaim;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface DeleteStorageOrdiriComV1alpha1CollectionVolumeRequest {
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteStorageOrdiriComV1alpha1CollectionVolumeClaimRequest {
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteStorageOrdiriComV1alpha1VolumeRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteStorageOrdiriComV1alpha1VolumeClaimRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface ListStorageOrdiriComV1alpha1VolumeRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListStorageOrdiriComV1alpha1VolumeClaimRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface PatchStorageOrdiriComV1alpha1VolumeRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchStorageOrdiriComV1alpha1VolumeClaimRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchStorageOrdiriComV1alpha1VolumeClaimStatusRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchStorageOrdiriComV1alpha1VolumeStatusRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface ReadStorageOrdiriComV1alpha1VolumeRequest {
    name: string;
    pretty?: string;
}

export interface ReadStorageOrdiriComV1alpha1VolumeClaimRequest {
    name: string;
    pretty?: string;
}

export interface ReadStorageOrdiriComV1alpha1VolumeClaimStatusRequest {
    name: string;
    pretty?: string;
}

export interface ReadStorageOrdiriComV1alpha1VolumeStatusRequest {
    name: string;
    pretty?: string;
}

export interface ReplaceStorageOrdiriComV1alpha1VolumeRequest {
    name: string;
    body: ComGithubOrdiriOrdiriPkgApisStorageV1alpha1Volume;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceStorageOrdiriComV1alpha1VolumeClaimRequest {
    name: string;
    body: ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeClaim;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceStorageOrdiriComV1alpha1VolumeClaimStatusRequest {
    name: string;
    body: ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeClaim;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceStorageOrdiriComV1alpha1VolumeStatusRequest {
    name: string;
    body: ComGithubOrdiriOrdiriPkgApisStorageV1alpha1Volume;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface WatchStorageOrdiriComV1alpha1VolumeRequest {
    name: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchStorageOrdiriComV1alpha1VolumeClaimRequest {
    name: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchStorageOrdiriComV1alpha1VolumeClaimListRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchStorageOrdiriComV1alpha1VolumeListRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

/**
 * 
 */
export class StorageOrdiriComV1alpha1Api extends runtime.BaseAPI {

    /**
     * create a Volume
     */
    async createStorageOrdiriComV1alpha1VolumeRaw(requestParameters: CreateStorageOrdiriComV1alpha1VolumeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisStorageV1alpha1Volume>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createStorageOrdiriComV1alpha1Volume.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/storage.ordiri.com/v1alpha1/volumes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeFromJSON(jsonValue));
    }

    /**
     * create a Volume
     */
    async createStorageOrdiriComV1alpha1Volume(requestParameters: CreateStorageOrdiriComV1alpha1VolumeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisStorageV1alpha1Volume> {
        const response = await this.createStorageOrdiriComV1alpha1VolumeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create a VolumeClaim
     */
    async createStorageOrdiriComV1alpha1VolumeClaimRaw(requestParameters: CreateStorageOrdiriComV1alpha1VolumeClaimRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeClaim>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createStorageOrdiriComV1alpha1VolumeClaim.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/storage.ordiri.com/v1alpha1/volumeclaims`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeClaimToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeClaimFromJSON(jsonValue));
    }

    /**
     * create a VolumeClaim
     */
    async createStorageOrdiriComV1alpha1VolumeClaim(requestParameters: CreateStorageOrdiriComV1alpha1VolumeClaimRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeClaim> {
        const response = await this.createStorageOrdiriComV1alpha1VolumeClaimRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete collection of Volume
     */
    async deleteStorageOrdiriComV1alpha1CollectionVolumeRaw(requestParameters: DeleteStorageOrdiriComV1alpha1CollectionVolumeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/storage.ordiri.com/v1alpha1/volumes`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of Volume
     */
    async deleteStorageOrdiriComV1alpha1CollectionVolume(requestParameters: DeleteStorageOrdiriComV1alpha1CollectionVolumeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteStorageOrdiriComV1alpha1CollectionVolumeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete collection of VolumeClaim
     */
    async deleteStorageOrdiriComV1alpha1CollectionVolumeClaimRaw(requestParameters: DeleteStorageOrdiriComV1alpha1CollectionVolumeClaimRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/storage.ordiri.com/v1alpha1/volumeclaims`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of VolumeClaim
     */
    async deleteStorageOrdiriComV1alpha1CollectionVolumeClaim(requestParameters: DeleteStorageOrdiriComV1alpha1CollectionVolumeClaimRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteStorageOrdiriComV1alpha1CollectionVolumeClaimRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a Volume
     */
    async deleteStorageOrdiriComV1alpha1VolumeRaw(requestParameters: DeleteStorageOrdiriComV1alpha1VolumeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteStorageOrdiriComV1alpha1Volume.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/storage.ordiri.com/v1alpha1/volumes/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a Volume
     */
    async deleteStorageOrdiriComV1alpha1Volume(requestParameters: DeleteStorageOrdiriComV1alpha1VolumeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteStorageOrdiriComV1alpha1VolumeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a VolumeClaim
     */
    async deleteStorageOrdiriComV1alpha1VolumeClaimRaw(requestParameters: DeleteStorageOrdiriComV1alpha1VolumeClaimRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteStorageOrdiriComV1alpha1VolumeClaim.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/storage.ordiri.com/v1alpha1/volumeclaims/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a VolumeClaim
     */
    async deleteStorageOrdiriComV1alpha1VolumeClaim(requestParameters: DeleteStorageOrdiriComV1alpha1VolumeClaimRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteStorageOrdiriComV1alpha1VolumeClaimRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get available resources
     */
    async getStorageOrdiriComV1alpha1APIResourcesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1APIResourceList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/storage.ordiri.com/v1alpha1/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON(jsonValue));
    }

    /**
     * get available resources
     */
    async getStorageOrdiriComV1alpha1APIResources(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1APIResourceList> {
        const response = await this.getStorageOrdiriComV1alpha1APIResourcesRaw(initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind Volume
     */
    async listStorageOrdiriComV1alpha1VolumeRaw(requestParameters: ListStorageOrdiriComV1alpha1VolumeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeList>> {
        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/storage.ordiri.com/v1alpha1/volumes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind Volume
     */
    async listStorageOrdiriComV1alpha1Volume(requestParameters: ListStorageOrdiriComV1alpha1VolumeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeList> {
        const response = await this.listStorageOrdiriComV1alpha1VolumeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind VolumeClaim
     */
    async listStorageOrdiriComV1alpha1VolumeClaimRaw(requestParameters: ListStorageOrdiriComV1alpha1VolumeClaimRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeClaimList>> {
        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/storage.ordiri.com/v1alpha1/volumeclaims`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeClaimListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind VolumeClaim
     */
    async listStorageOrdiriComV1alpha1VolumeClaim(requestParameters: ListStorageOrdiriComV1alpha1VolumeClaimRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeClaimList> {
        const response = await this.listStorageOrdiriComV1alpha1VolumeClaimRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update the specified Volume
     */
    async patchStorageOrdiriComV1alpha1VolumeRaw(requestParameters: PatchStorageOrdiriComV1alpha1VolumeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisStorageV1alpha1Volume>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchStorageOrdiriComV1alpha1Volume.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchStorageOrdiriComV1alpha1Volume.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/storage.ordiri.com/v1alpha1/volumes/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeFromJSON(jsonValue));
    }

    /**
     * partially update the specified Volume
     */
    async patchStorageOrdiriComV1alpha1Volume(requestParameters: PatchStorageOrdiriComV1alpha1VolumeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisStorageV1alpha1Volume> {
        const response = await this.patchStorageOrdiriComV1alpha1VolumeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update the specified VolumeClaim
     */
    async patchStorageOrdiriComV1alpha1VolumeClaimRaw(requestParameters: PatchStorageOrdiriComV1alpha1VolumeClaimRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeClaim>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchStorageOrdiriComV1alpha1VolumeClaim.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchStorageOrdiriComV1alpha1VolumeClaim.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/storage.ordiri.com/v1alpha1/volumeclaims/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeClaimFromJSON(jsonValue));
    }

    /**
     * partially update the specified VolumeClaim
     */
    async patchStorageOrdiriComV1alpha1VolumeClaim(requestParameters: PatchStorageOrdiriComV1alpha1VolumeClaimRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeClaim> {
        const response = await this.patchStorageOrdiriComV1alpha1VolumeClaimRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update status of the specified VolumeClaim
     */
    async patchStorageOrdiriComV1alpha1VolumeClaimStatusRaw(requestParameters: PatchStorageOrdiriComV1alpha1VolumeClaimStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeClaim>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchStorageOrdiriComV1alpha1VolumeClaimStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchStorageOrdiriComV1alpha1VolumeClaimStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/storage.ordiri.com/v1alpha1/volumeclaims/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeClaimFromJSON(jsonValue));
    }

    /**
     * partially update status of the specified VolumeClaim
     */
    async patchStorageOrdiriComV1alpha1VolumeClaimStatus(requestParameters: PatchStorageOrdiriComV1alpha1VolumeClaimStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeClaim> {
        const response = await this.patchStorageOrdiriComV1alpha1VolumeClaimStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update status of the specified Volume
     */
    async patchStorageOrdiriComV1alpha1VolumeStatusRaw(requestParameters: PatchStorageOrdiriComV1alpha1VolumeStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisStorageV1alpha1Volume>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchStorageOrdiriComV1alpha1VolumeStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchStorageOrdiriComV1alpha1VolumeStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/storage.ordiri.com/v1alpha1/volumes/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeFromJSON(jsonValue));
    }

    /**
     * partially update status of the specified Volume
     */
    async patchStorageOrdiriComV1alpha1VolumeStatus(requestParameters: PatchStorageOrdiriComV1alpha1VolumeStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisStorageV1alpha1Volume> {
        const response = await this.patchStorageOrdiriComV1alpha1VolumeStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read the specified Volume
     */
    async readStorageOrdiriComV1alpha1VolumeRaw(requestParameters: ReadStorageOrdiriComV1alpha1VolumeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisStorageV1alpha1Volume>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readStorageOrdiriComV1alpha1Volume.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/storage.ordiri.com/v1alpha1/volumes/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeFromJSON(jsonValue));
    }

    /**
     * read the specified Volume
     */
    async readStorageOrdiriComV1alpha1Volume(requestParameters: ReadStorageOrdiriComV1alpha1VolumeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisStorageV1alpha1Volume> {
        const response = await this.readStorageOrdiriComV1alpha1VolumeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read the specified VolumeClaim
     */
    async readStorageOrdiriComV1alpha1VolumeClaimRaw(requestParameters: ReadStorageOrdiriComV1alpha1VolumeClaimRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeClaim>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readStorageOrdiriComV1alpha1VolumeClaim.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/storage.ordiri.com/v1alpha1/volumeclaims/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeClaimFromJSON(jsonValue));
    }

    /**
     * read the specified VolumeClaim
     */
    async readStorageOrdiriComV1alpha1VolumeClaim(requestParameters: ReadStorageOrdiriComV1alpha1VolumeClaimRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeClaim> {
        const response = await this.readStorageOrdiriComV1alpha1VolumeClaimRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read status of the specified VolumeClaim
     */
    async readStorageOrdiriComV1alpha1VolumeClaimStatusRaw(requestParameters: ReadStorageOrdiriComV1alpha1VolumeClaimStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeClaim>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readStorageOrdiriComV1alpha1VolumeClaimStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/storage.ordiri.com/v1alpha1/volumeclaims/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeClaimFromJSON(jsonValue));
    }

    /**
     * read status of the specified VolumeClaim
     */
    async readStorageOrdiriComV1alpha1VolumeClaimStatus(requestParameters: ReadStorageOrdiriComV1alpha1VolumeClaimStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeClaim> {
        const response = await this.readStorageOrdiriComV1alpha1VolumeClaimStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read status of the specified Volume
     */
    async readStorageOrdiriComV1alpha1VolumeStatusRaw(requestParameters: ReadStorageOrdiriComV1alpha1VolumeStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisStorageV1alpha1Volume>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readStorageOrdiriComV1alpha1VolumeStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/storage.ordiri.com/v1alpha1/volumes/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeFromJSON(jsonValue));
    }

    /**
     * read status of the specified Volume
     */
    async readStorageOrdiriComV1alpha1VolumeStatus(requestParameters: ReadStorageOrdiriComV1alpha1VolumeStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisStorageV1alpha1Volume> {
        const response = await this.readStorageOrdiriComV1alpha1VolumeStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace the specified Volume
     */
    async replaceStorageOrdiriComV1alpha1VolumeRaw(requestParameters: ReplaceStorageOrdiriComV1alpha1VolumeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisStorageV1alpha1Volume>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceStorageOrdiriComV1alpha1Volume.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceStorageOrdiriComV1alpha1Volume.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/storage.ordiri.com/v1alpha1/volumes/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeFromJSON(jsonValue));
    }

    /**
     * replace the specified Volume
     */
    async replaceStorageOrdiriComV1alpha1Volume(requestParameters: ReplaceStorageOrdiriComV1alpha1VolumeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisStorageV1alpha1Volume> {
        const response = await this.replaceStorageOrdiriComV1alpha1VolumeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace the specified VolumeClaim
     */
    async replaceStorageOrdiriComV1alpha1VolumeClaimRaw(requestParameters: ReplaceStorageOrdiriComV1alpha1VolumeClaimRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeClaim>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceStorageOrdiriComV1alpha1VolumeClaim.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceStorageOrdiriComV1alpha1VolumeClaim.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/storage.ordiri.com/v1alpha1/volumeclaims/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeClaimToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeClaimFromJSON(jsonValue));
    }

    /**
     * replace the specified VolumeClaim
     */
    async replaceStorageOrdiriComV1alpha1VolumeClaim(requestParameters: ReplaceStorageOrdiriComV1alpha1VolumeClaimRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeClaim> {
        const response = await this.replaceStorageOrdiriComV1alpha1VolumeClaimRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace status of the specified VolumeClaim
     */
    async replaceStorageOrdiriComV1alpha1VolumeClaimStatusRaw(requestParameters: ReplaceStorageOrdiriComV1alpha1VolumeClaimStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeClaim>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceStorageOrdiriComV1alpha1VolumeClaimStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceStorageOrdiriComV1alpha1VolumeClaimStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/storage.ordiri.com/v1alpha1/volumeclaims/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeClaimToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeClaimFromJSON(jsonValue));
    }

    /**
     * replace status of the specified VolumeClaim
     */
    async replaceStorageOrdiriComV1alpha1VolumeClaimStatus(requestParameters: ReplaceStorageOrdiriComV1alpha1VolumeClaimStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeClaim> {
        const response = await this.replaceStorageOrdiriComV1alpha1VolumeClaimStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace status of the specified Volume
     */
    async replaceStorageOrdiriComV1alpha1VolumeStatusRaw(requestParameters: ReplaceStorageOrdiriComV1alpha1VolumeStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisStorageV1alpha1Volume>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceStorageOrdiriComV1alpha1VolumeStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceStorageOrdiriComV1alpha1VolumeStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/storage.ordiri.com/v1alpha1/volumes/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisStorageV1alpha1VolumeFromJSON(jsonValue));
    }

    /**
     * replace status of the specified Volume
     */
    async replaceStorageOrdiriComV1alpha1VolumeStatus(requestParameters: ReplaceStorageOrdiriComV1alpha1VolumeStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisStorageV1alpha1Volume> {
        const response = await this.replaceStorageOrdiriComV1alpha1VolumeStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch changes to an object of kind Volume. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchStorageOrdiriComV1alpha1VolumeRaw(requestParameters: WatchStorageOrdiriComV1alpha1VolumeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchStorageOrdiriComV1alpha1Volume.');
        }

        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/storage.ordiri.com/v1alpha1/watch/volumes/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind Volume. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchStorageOrdiriComV1alpha1Volume(requestParameters: WatchStorageOrdiriComV1alpha1VolumeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchStorageOrdiriComV1alpha1VolumeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch changes to an object of kind VolumeClaim. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchStorageOrdiriComV1alpha1VolumeClaimRaw(requestParameters: WatchStorageOrdiriComV1alpha1VolumeClaimRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchStorageOrdiriComV1alpha1VolumeClaim.');
        }

        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/storage.ordiri.com/v1alpha1/watch/volumeclaims/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind VolumeClaim. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchStorageOrdiriComV1alpha1VolumeClaim(requestParameters: WatchStorageOrdiriComV1alpha1VolumeClaimRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchStorageOrdiriComV1alpha1VolumeClaimRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch individual changes to a list of VolumeClaim. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchStorageOrdiriComV1alpha1VolumeClaimListRaw(requestParameters: WatchStorageOrdiriComV1alpha1VolumeClaimListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/storage.ordiri.com/v1alpha1/watch/volumeclaims`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of VolumeClaim. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchStorageOrdiriComV1alpha1VolumeClaimList(requestParameters: WatchStorageOrdiriComV1alpha1VolumeClaimListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchStorageOrdiriComV1alpha1VolumeClaimListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch individual changes to a list of Volume. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchStorageOrdiriComV1alpha1VolumeListRaw(requestParameters: WatchStorageOrdiriComV1alpha1VolumeListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/storage.ordiri.com/v1alpha1/watch/volumes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of Volume. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchStorageOrdiriComV1alpha1VolumeList(requestParameters: WatchStorageOrdiriComV1alpha1VolumeListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchStorageOrdiriComV1alpha1VolumeListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
