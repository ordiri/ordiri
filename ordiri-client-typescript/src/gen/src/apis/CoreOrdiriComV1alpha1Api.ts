/* tslint:disable */
/* eslint-disable */
/**
 * openapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ComGithubOrdiriOrdiriPkgApisCoreV1alpha1Machine,
  ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineList,
  ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineProfile,
  ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineProfileList,
  ComGithubOrdiriOrdiriPkgApisCoreV1alpha1Node,
  ComGithubOrdiriOrdiriPkgApisCoreV1alpha1NodeList,
  IoK8sApimachineryPkgApisMetaV1APIResourceList,
  IoK8sApimachineryPkgApisMetaV1DeleteOptions,
  IoK8sApimachineryPkgApisMetaV1Status,
  IoK8sApimachineryPkgApisMetaV1WatchEvent,
} from '../models';
import {
    ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineFromJSON,
    ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineToJSON,
    ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineListFromJSON,
    ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineListToJSON,
    ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineProfileFromJSON,
    ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineProfileToJSON,
    ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineProfileListFromJSON,
    ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineProfileListToJSON,
    ComGithubOrdiriOrdiriPkgApisCoreV1alpha1NodeFromJSON,
    ComGithubOrdiriOrdiriPkgApisCoreV1alpha1NodeToJSON,
    ComGithubOrdiriOrdiriPkgApisCoreV1alpha1NodeListFromJSON,
    ComGithubOrdiriOrdiriPkgApisCoreV1alpha1NodeListToJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceListToJSON,
    IoK8sApimachineryPkgApisMetaV1DeleteOptionsFromJSON,
    IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON,
    IoK8sApimachineryPkgApisMetaV1StatusFromJSON,
    IoK8sApimachineryPkgApisMetaV1StatusToJSON,
    IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON,
    IoK8sApimachineryPkgApisMetaV1WatchEventToJSON,
} from '../models';

export interface CreateCoreOrdiriComV1alpha1NamespacedMachineRequest {
    namespace: string;
    body: ComGithubOrdiriOrdiriPkgApisCoreV1alpha1Machine;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface CreateCoreOrdiriComV1alpha1NamespacedMachineProfileRequest {
    namespace: string;
    body: ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineProfile;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface CreateCoreOrdiriComV1alpha1NodeRequest {
    body: ComGithubOrdiriOrdiriPkgApisCoreV1alpha1Node;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface DeleteCoreOrdiriComV1alpha1CollectionNamespacedMachineRequest {
    namespace: string;
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteCoreOrdiriComV1alpha1CollectionNamespacedMachineProfileRequest {
    namespace: string;
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteCoreOrdiriComV1alpha1CollectionNodeRequest {
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteCoreOrdiriComV1alpha1NamespacedMachineRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteCoreOrdiriComV1alpha1NamespacedMachineProfileRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteCoreOrdiriComV1alpha1NodeRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface ListCoreOrdiriComV1alpha1MachineForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListCoreOrdiriComV1alpha1MachineProfileForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListCoreOrdiriComV1alpha1NamespacedMachineRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListCoreOrdiriComV1alpha1NamespacedMachineProfileRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListCoreOrdiriComV1alpha1NodeRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface PatchCoreOrdiriComV1alpha1NamespacedMachineRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchCoreOrdiriComV1alpha1NamespacedMachineProfileRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchCoreOrdiriComV1alpha1NamespacedMachineProfileStatusRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchCoreOrdiriComV1alpha1NamespacedMachineReviewRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchCoreOrdiriComV1alpha1NamespacedMachineStatusRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchCoreOrdiriComV1alpha1NodeRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchCoreOrdiriComV1alpha1NodeStatusRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface ReadCoreOrdiriComV1alpha1NamespacedMachineRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReadCoreOrdiriComV1alpha1NamespacedMachineProfileRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReadCoreOrdiriComV1alpha1NamespacedMachineProfileStatusRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReadCoreOrdiriComV1alpha1NamespacedMachineReviewRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReadCoreOrdiriComV1alpha1NamespacedMachineStatusRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReadCoreOrdiriComV1alpha1NodeRequest {
    name: string;
    pretty?: string;
}

export interface ReadCoreOrdiriComV1alpha1NodeStatusRequest {
    name: string;
    pretty?: string;
}

export interface ReplaceCoreOrdiriComV1alpha1NamespacedMachineRequest {
    name: string;
    namespace: string;
    body: ComGithubOrdiriOrdiriPkgApisCoreV1alpha1Machine;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceCoreOrdiriComV1alpha1NamespacedMachineProfileRequest {
    name: string;
    namespace: string;
    body: ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineProfile;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceCoreOrdiriComV1alpha1NamespacedMachineProfileStatusRequest {
    name: string;
    namespace: string;
    body: ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineProfile;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceCoreOrdiriComV1alpha1NamespacedMachineReviewRequest {
    name: string;
    namespace: string;
    body: ComGithubOrdiriOrdiriPkgApisCoreV1alpha1Machine;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceCoreOrdiriComV1alpha1NamespacedMachineStatusRequest {
    name: string;
    namespace: string;
    body: ComGithubOrdiriOrdiriPkgApisCoreV1alpha1Machine;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceCoreOrdiriComV1alpha1NodeRequest {
    name: string;
    body: ComGithubOrdiriOrdiriPkgApisCoreV1alpha1Node;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceCoreOrdiriComV1alpha1NodeStatusRequest {
    name: string;
    body: ComGithubOrdiriOrdiriPkgApisCoreV1alpha1Node;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface WatchCoreOrdiriComV1alpha1MachineListForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchCoreOrdiriComV1alpha1MachineProfileListForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchCoreOrdiriComV1alpha1NamespacedMachineRequest {
    name: string;
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchCoreOrdiriComV1alpha1NamespacedMachineListRequest {
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchCoreOrdiriComV1alpha1NamespacedMachineProfileRequest {
    name: string;
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchCoreOrdiriComV1alpha1NamespacedMachineProfileListRequest {
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchCoreOrdiriComV1alpha1NodeRequest {
    name: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchCoreOrdiriComV1alpha1NodeListRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

/**
 * 
 */
export class CoreOrdiriComV1alpha1Api extends runtime.BaseAPI {

    /**
     * create a Machine
     */
    async createCoreOrdiriComV1alpha1NamespacedMachineRaw(requestParameters: CreateCoreOrdiriComV1alpha1NamespacedMachineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1Machine>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createCoreOrdiriComV1alpha1NamespacedMachine.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createCoreOrdiriComV1alpha1NamespacedMachine.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/core.ordiri.com/v1alpha1/namespaces/{namespace}/machines`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineFromJSON(jsonValue));
    }

    /**
     * create a Machine
     */
    async createCoreOrdiriComV1alpha1NamespacedMachine(requestParameters: CreateCoreOrdiriComV1alpha1NamespacedMachineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1Machine> {
        const response = await this.createCoreOrdiriComV1alpha1NamespacedMachineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create a MachineProfile
     */
    async createCoreOrdiriComV1alpha1NamespacedMachineProfileRaw(requestParameters: CreateCoreOrdiriComV1alpha1NamespacedMachineProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineProfile>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createCoreOrdiriComV1alpha1NamespacedMachineProfile.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createCoreOrdiriComV1alpha1NamespacedMachineProfile.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/core.ordiri.com/v1alpha1/namespaces/{namespace}/machineprofiles`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineProfileToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineProfileFromJSON(jsonValue));
    }

    /**
     * create a MachineProfile
     */
    async createCoreOrdiriComV1alpha1NamespacedMachineProfile(requestParameters: CreateCoreOrdiriComV1alpha1NamespacedMachineProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineProfile> {
        const response = await this.createCoreOrdiriComV1alpha1NamespacedMachineProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create a Node
     */
    async createCoreOrdiriComV1alpha1NodeRaw(requestParameters: CreateCoreOrdiriComV1alpha1NodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1Node>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createCoreOrdiriComV1alpha1Node.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/core.ordiri.com/v1alpha1/nodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubOrdiriOrdiriPkgApisCoreV1alpha1NodeToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisCoreV1alpha1NodeFromJSON(jsonValue));
    }

    /**
     * create a Node
     */
    async createCoreOrdiriComV1alpha1Node(requestParameters: CreateCoreOrdiriComV1alpha1NodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1Node> {
        const response = await this.createCoreOrdiriComV1alpha1NodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete collection of Machine
     */
    async deleteCoreOrdiriComV1alpha1CollectionNamespacedMachineRaw(requestParameters: DeleteCoreOrdiriComV1alpha1CollectionNamespacedMachineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteCoreOrdiriComV1alpha1CollectionNamespacedMachine.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/core.ordiri.com/v1alpha1/namespaces/{namespace}/machines`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of Machine
     */
    async deleteCoreOrdiriComV1alpha1CollectionNamespacedMachine(requestParameters: DeleteCoreOrdiriComV1alpha1CollectionNamespacedMachineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteCoreOrdiriComV1alpha1CollectionNamespacedMachineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete collection of MachineProfile
     */
    async deleteCoreOrdiriComV1alpha1CollectionNamespacedMachineProfileRaw(requestParameters: DeleteCoreOrdiriComV1alpha1CollectionNamespacedMachineProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteCoreOrdiriComV1alpha1CollectionNamespacedMachineProfile.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/core.ordiri.com/v1alpha1/namespaces/{namespace}/machineprofiles`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of MachineProfile
     */
    async deleteCoreOrdiriComV1alpha1CollectionNamespacedMachineProfile(requestParameters: DeleteCoreOrdiriComV1alpha1CollectionNamespacedMachineProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteCoreOrdiriComV1alpha1CollectionNamespacedMachineProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete collection of Node
     */
    async deleteCoreOrdiriComV1alpha1CollectionNodeRaw(requestParameters: DeleteCoreOrdiriComV1alpha1CollectionNodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/core.ordiri.com/v1alpha1/nodes`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of Node
     */
    async deleteCoreOrdiriComV1alpha1CollectionNode(requestParameters: DeleteCoreOrdiriComV1alpha1CollectionNodeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteCoreOrdiriComV1alpha1CollectionNodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a Machine
     */
    async deleteCoreOrdiriComV1alpha1NamespacedMachineRaw(requestParameters: DeleteCoreOrdiriComV1alpha1NamespacedMachineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteCoreOrdiriComV1alpha1NamespacedMachine.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteCoreOrdiriComV1alpha1NamespacedMachine.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/core.ordiri.com/v1alpha1/namespaces/{namespace}/machines/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a Machine
     */
    async deleteCoreOrdiriComV1alpha1NamespacedMachine(requestParameters: DeleteCoreOrdiriComV1alpha1NamespacedMachineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteCoreOrdiriComV1alpha1NamespacedMachineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a MachineProfile
     */
    async deleteCoreOrdiriComV1alpha1NamespacedMachineProfileRaw(requestParameters: DeleteCoreOrdiriComV1alpha1NamespacedMachineProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteCoreOrdiriComV1alpha1NamespacedMachineProfile.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteCoreOrdiriComV1alpha1NamespacedMachineProfile.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/core.ordiri.com/v1alpha1/namespaces/{namespace}/machineprofiles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a MachineProfile
     */
    async deleteCoreOrdiriComV1alpha1NamespacedMachineProfile(requestParameters: DeleteCoreOrdiriComV1alpha1NamespacedMachineProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteCoreOrdiriComV1alpha1NamespacedMachineProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a Node
     */
    async deleteCoreOrdiriComV1alpha1NodeRaw(requestParameters: DeleteCoreOrdiriComV1alpha1NodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteCoreOrdiriComV1alpha1Node.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/core.ordiri.com/v1alpha1/nodes/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a Node
     */
    async deleteCoreOrdiriComV1alpha1Node(requestParameters: DeleteCoreOrdiriComV1alpha1NodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteCoreOrdiriComV1alpha1NodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get available resources
     */
    async getCoreOrdiriComV1alpha1APIResourcesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1APIResourceList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.ordiri.com/v1alpha1/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON(jsonValue));
    }

    /**
     * get available resources
     */
    async getCoreOrdiriComV1alpha1APIResources(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1APIResourceList> {
        const response = await this.getCoreOrdiriComV1alpha1APIResourcesRaw(initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind Machine
     */
    async listCoreOrdiriComV1alpha1MachineForAllNamespacesRaw(requestParameters: ListCoreOrdiriComV1alpha1MachineForAllNamespacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineList>> {
        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.ordiri.com/v1alpha1/machines`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind Machine
     */
    async listCoreOrdiriComV1alpha1MachineForAllNamespaces(requestParameters: ListCoreOrdiriComV1alpha1MachineForAllNamespacesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineList> {
        const response = await this.listCoreOrdiriComV1alpha1MachineForAllNamespacesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind MachineProfile
     */
    async listCoreOrdiriComV1alpha1MachineProfileForAllNamespacesRaw(requestParameters: ListCoreOrdiriComV1alpha1MachineProfileForAllNamespacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineProfileList>> {
        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.ordiri.com/v1alpha1/machineprofiles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineProfileListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind MachineProfile
     */
    async listCoreOrdiriComV1alpha1MachineProfileForAllNamespaces(requestParameters: ListCoreOrdiriComV1alpha1MachineProfileForAllNamespacesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineProfileList> {
        const response = await this.listCoreOrdiriComV1alpha1MachineProfileForAllNamespacesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind Machine
     */
    async listCoreOrdiriComV1alpha1NamespacedMachineRaw(requestParameters: ListCoreOrdiriComV1alpha1NamespacedMachineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineList>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listCoreOrdiriComV1alpha1NamespacedMachine.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.ordiri.com/v1alpha1/namespaces/{namespace}/machines`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind Machine
     */
    async listCoreOrdiriComV1alpha1NamespacedMachine(requestParameters: ListCoreOrdiriComV1alpha1NamespacedMachineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineList> {
        const response = await this.listCoreOrdiriComV1alpha1NamespacedMachineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind MachineProfile
     */
    async listCoreOrdiriComV1alpha1NamespacedMachineProfileRaw(requestParameters: ListCoreOrdiriComV1alpha1NamespacedMachineProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineProfileList>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listCoreOrdiriComV1alpha1NamespacedMachineProfile.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.ordiri.com/v1alpha1/namespaces/{namespace}/machineprofiles`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineProfileListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind MachineProfile
     */
    async listCoreOrdiriComV1alpha1NamespacedMachineProfile(requestParameters: ListCoreOrdiriComV1alpha1NamespacedMachineProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineProfileList> {
        const response = await this.listCoreOrdiriComV1alpha1NamespacedMachineProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind Node
     */
    async listCoreOrdiriComV1alpha1NodeRaw(requestParameters: ListCoreOrdiriComV1alpha1NodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1NodeList>> {
        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.ordiri.com/v1alpha1/nodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisCoreV1alpha1NodeListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind Node
     */
    async listCoreOrdiriComV1alpha1Node(requestParameters: ListCoreOrdiriComV1alpha1NodeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1NodeList> {
        const response = await this.listCoreOrdiriComV1alpha1NodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update the specified Machine
     */
    async patchCoreOrdiriComV1alpha1NamespacedMachineRaw(requestParameters: PatchCoreOrdiriComV1alpha1NamespacedMachineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1Machine>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchCoreOrdiriComV1alpha1NamespacedMachine.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchCoreOrdiriComV1alpha1NamespacedMachine.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchCoreOrdiriComV1alpha1NamespacedMachine.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/core.ordiri.com/v1alpha1/namespaces/{namespace}/machines/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineFromJSON(jsonValue));
    }

    /**
     * partially update the specified Machine
     */
    async patchCoreOrdiriComV1alpha1NamespacedMachine(requestParameters: PatchCoreOrdiriComV1alpha1NamespacedMachineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1Machine> {
        const response = await this.patchCoreOrdiriComV1alpha1NamespacedMachineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update the specified MachineProfile
     */
    async patchCoreOrdiriComV1alpha1NamespacedMachineProfileRaw(requestParameters: PatchCoreOrdiriComV1alpha1NamespacedMachineProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineProfile>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchCoreOrdiriComV1alpha1NamespacedMachineProfile.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchCoreOrdiriComV1alpha1NamespacedMachineProfile.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchCoreOrdiriComV1alpha1NamespacedMachineProfile.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/core.ordiri.com/v1alpha1/namespaces/{namespace}/machineprofiles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineProfileFromJSON(jsonValue));
    }

    /**
     * partially update the specified MachineProfile
     */
    async patchCoreOrdiriComV1alpha1NamespacedMachineProfile(requestParameters: PatchCoreOrdiriComV1alpha1NamespacedMachineProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineProfile> {
        const response = await this.patchCoreOrdiriComV1alpha1NamespacedMachineProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update status of the specified MachineProfile
     */
    async patchCoreOrdiriComV1alpha1NamespacedMachineProfileStatusRaw(requestParameters: PatchCoreOrdiriComV1alpha1NamespacedMachineProfileStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineProfile>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchCoreOrdiriComV1alpha1NamespacedMachineProfileStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchCoreOrdiriComV1alpha1NamespacedMachineProfileStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchCoreOrdiriComV1alpha1NamespacedMachineProfileStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/core.ordiri.com/v1alpha1/namespaces/{namespace}/machineprofiles/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineProfileFromJSON(jsonValue));
    }

    /**
     * partially update status of the specified MachineProfile
     */
    async patchCoreOrdiriComV1alpha1NamespacedMachineProfileStatus(requestParameters: PatchCoreOrdiriComV1alpha1NamespacedMachineProfileStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineProfile> {
        const response = await this.patchCoreOrdiriComV1alpha1NamespacedMachineProfileStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update review of the specified Machine
     */
    async patchCoreOrdiriComV1alpha1NamespacedMachineReviewRaw(requestParameters: PatchCoreOrdiriComV1alpha1NamespacedMachineReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1Machine>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchCoreOrdiriComV1alpha1NamespacedMachineReview.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchCoreOrdiriComV1alpha1NamespacedMachineReview.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchCoreOrdiriComV1alpha1NamespacedMachineReview.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/core.ordiri.com/v1alpha1/namespaces/{namespace}/machines/{name}/review`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineFromJSON(jsonValue));
    }

    /**
     * partially update review of the specified Machine
     */
    async patchCoreOrdiriComV1alpha1NamespacedMachineReview(requestParameters: PatchCoreOrdiriComV1alpha1NamespacedMachineReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1Machine> {
        const response = await this.patchCoreOrdiriComV1alpha1NamespacedMachineReviewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update status of the specified Machine
     */
    async patchCoreOrdiriComV1alpha1NamespacedMachineStatusRaw(requestParameters: PatchCoreOrdiriComV1alpha1NamespacedMachineStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1Machine>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchCoreOrdiriComV1alpha1NamespacedMachineStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchCoreOrdiriComV1alpha1NamespacedMachineStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchCoreOrdiriComV1alpha1NamespacedMachineStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/core.ordiri.com/v1alpha1/namespaces/{namespace}/machines/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineFromJSON(jsonValue));
    }

    /**
     * partially update status of the specified Machine
     */
    async patchCoreOrdiriComV1alpha1NamespacedMachineStatus(requestParameters: PatchCoreOrdiriComV1alpha1NamespacedMachineStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1Machine> {
        const response = await this.patchCoreOrdiriComV1alpha1NamespacedMachineStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update the specified Node
     */
    async patchCoreOrdiriComV1alpha1NodeRaw(requestParameters: PatchCoreOrdiriComV1alpha1NodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1Node>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchCoreOrdiriComV1alpha1Node.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchCoreOrdiriComV1alpha1Node.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/core.ordiri.com/v1alpha1/nodes/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisCoreV1alpha1NodeFromJSON(jsonValue));
    }

    /**
     * partially update the specified Node
     */
    async patchCoreOrdiriComV1alpha1Node(requestParameters: PatchCoreOrdiriComV1alpha1NodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1Node> {
        const response = await this.patchCoreOrdiriComV1alpha1NodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update status of the specified Node
     */
    async patchCoreOrdiriComV1alpha1NodeStatusRaw(requestParameters: PatchCoreOrdiriComV1alpha1NodeStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1Node>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchCoreOrdiriComV1alpha1NodeStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchCoreOrdiriComV1alpha1NodeStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/core.ordiri.com/v1alpha1/nodes/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisCoreV1alpha1NodeFromJSON(jsonValue));
    }

    /**
     * partially update status of the specified Node
     */
    async patchCoreOrdiriComV1alpha1NodeStatus(requestParameters: PatchCoreOrdiriComV1alpha1NodeStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1Node> {
        const response = await this.patchCoreOrdiriComV1alpha1NodeStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read the specified Machine
     */
    async readCoreOrdiriComV1alpha1NamespacedMachineRaw(requestParameters: ReadCoreOrdiriComV1alpha1NamespacedMachineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1Machine>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readCoreOrdiriComV1alpha1NamespacedMachine.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readCoreOrdiriComV1alpha1NamespacedMachine.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.ordiri.com/v1alpha1/namespaces/{namespace}/machines/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineFromJSON(jsonValue));
    }

    /**
     * read the specified Machine
     */
    async readCoreOrdiriComV1alpha1NamespacedMachine(requestParameters: ReadCoreOrdiriComV1alpha1NamespacedMachineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1Machine> {
        const response = await this.readCoreOrdiriComV1alpha1NamespacedMachineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read the specified MachineProfile
     */
    async readCoreOrdiriComV1alpha1NamespacedMachineProfileRaw(requestParameters: ReadCoreOrdiriComV1alpha1NamespacedMachineProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineProfile>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readCoreOrdiriComV1alpha1NamespacedMachineProfile.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readCoreOrdiriComV1alpha1NamespacedMachineProfile.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.ordiri.com/v1alpha1/namespaces/{namespace}/machineprofiles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineProfileFromJSON(jsonValue));
    }

    /**
     * read the specified MachineProfile
     */
    async readCoreOrdiriComV1alpha1NamespacedMachineProfile(requestParameters: ReadCoreOrdiriComV1alpha1NamespacedMachineProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineProfile> {
        const response = await this.readCoreOrdiriComV1alpha1NamespacedMachineProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read status of the specified MachineProfile
     */
    async readCoreOrdiriComV1alpha1NamespacedMachineProfileStatusRaw(requestParameters: ReadCoreOrdiriComV1alpha1NamespacedMachineProfileStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineProfile>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readCoreOrdiriComV1alpha1NamespacedMachineProfileStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readCoreOrdiriComV1alpha1NamespacedMachineProfileStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.ordiri.com/v1alpha1/namespaces/{namespace}/machineprofiles/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineProfileFromJSON(jsonValue));
    }

    /**
     * read status of the specified MachineProfile
     */
    async readCoreOrdiriComV1alpha1NamespacedMachineProfileStatus(requestParameters: ReadCoreOrdiriComV1alpha1NamespacedMachineProfileStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineProfile> {
        const response = await this.readCoreOrdiriComV1alpha1NamespacedMachineProfileStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read review of the specified Machine
     */
    async readCoreOrdiriComV1alpha1NamespacedMachineReviewRaw(requestParameters: ReadCoreOrdiriComV1alpha1NamespacedMachineReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1Machine>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readCoreOrdiriComV1alpha1NamespacedMachineReview.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readCoreOrdiriComV1alpha1NamespacedMachineReview.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.ordiri.com/v1alpha1/namespaces/{namespace}/machines/{name}/review`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineFromJSON(jsonValue));
    }

    /**
     * read review of the specified Machine
     */
    async readCoreOrdiriComV1alpha1NamespacedMachineReview(requestParameters: ReadCoreOrdiriComV1alpha1NamespacedMachineReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1Machine> {
        const response = await this.readCoreOrdiriComV1alpha1NamespacedMachineReviewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read status of the specified Machine
     */
    async readCoreOrdiriComV1alpha1NamespacedMachineStatusRaw(requestParameters: ReadCoreOrdiriComV1alpha1NamespacedMachineStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1Machine>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readCoreOrdiriComV1alpha1NamespacedMachineStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readCoreOrdiriComV1alpha1NamespacedMachineStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.ordiri.com/v1alpha1/namespaces/{namespace}/machines/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineFromJSON(jsonValue));
    }

    /**
     * read status of the specified Machine
     */
    async readCoreOrdiriComV1alpha1NamespacedMachineStatus(requestParameters: ReadCoreOrdiriComV1alpha1NamespacedMachineStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1Machine> {
        const response = await this.readCoreOrdiriComV1alpha1NamespacedMachineStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read the specified Node
     */
    async readCoreOrdiriComV1alpha1NodeRaw(requestParameters: ReadCoreOrdiriComV1alpha1NodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1Node>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readCoreOrdiriComV1alpha1Node.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.ordiri.com/v1alpha1/nodes/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisCoreV1alpha1NodeFromJSON(jsonValue));
    }

    /**
     * read the specified Node
     */
    async readCoreOrdiriComV1alpha1Node(requestParameters: ReadCoreOrdiriComV1alpha1NodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1Node> {
        const response = await this.readCoreOrdiriComV1alpha1NodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read status of the specified Node
     */
    async readCoreOrdiriComV1alpha1NodeStatusRaw(requestParameters: ReadCoreOrdiriComV1alpha1NodeStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1Node>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readCoreOrdiriComV1alpha1NodeStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.ordiri.com/v1alpha1/nodes/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisCoreV1alpha1NodeFromJSON(jsonValue));
    }

    /**
     * read status of the specified Node
     */
    async readCoreOrdiriComV1alpha1NodeStatus(requestParameters: ReadCoreOrdiriComV1alpha1NodeStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1Node> {
        const response = await this.readCoreOrdiriComV1alpha1NodeStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace the specified Machine
     */
    async replaceCoreOrdiriComV1alpha1NamespacedMachineRaw(requestParameters: ReplaceCoreOrdiriComV1alpha1NamespacedMachineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1Machine>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceCoreOrdiriComV1alpha1NamespacedMachine.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceCoreOrdiriComV1alpha1NamespacedMachine.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceCoreOrdiriComV1alpha1NamespacedMachine.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/core.ordiri.com/v1alpha1/namespaces/{namespace}/machines/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineFromJSON(jsonValue));
    }

    /**
     * replace the specified Machine
     */
    async replaceCoreOrdiriComV1alpha1NamespacedMachine(requestParameters: ReplaceCoreOrdiriComV1alpha1NamespacedMachineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1Machine> {
        const response = await this.replaceCoreOrdiriComV1alpha1NamespacedMachineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace the specified MachineProfile
     */
    async replaceCoreOrdiriComV1alpha1NamespacedMachineProfileRaw(requestParameters: ReplaceCoreOrdiriComV1alpha1NamespacedMachineProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineProfile>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceCoreOrdiriComV1alpha1NamespacedMachineProfile.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceCoreOrdiriComV1alpha1NamespacedMachineProfile.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceCoreOrdiriComV1alpha1NamespacedMachineProfile.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/core.ordiri.com/v1alpha1/namespaces/{namespace}/machineprofiles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineProfileToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineProfileFromJSON(jsonValue));
    }

    /**
     * replace the specified MachineProfile
     */
    async replaceCoreOrdiriComV1alpha1NamespacedMachineProfile(requestParameters: ReplaceCoreOrdiriComV1alpha1NamespacedMachineProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineProfile> {
        const response = await this.replaceCoreOrdiriComV1alpha1NamespacedMachineProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace status of the specified MachineProfile
     */
    async replaceCoreOrdiriComV1alpha1NamespacedMachineProfileStatusRaw(requestParameters: ReplaceCoreOrdiriComV1alpha1NamespacedMachineProfileStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineProfile>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceCoreOrdiriComV1alpha1NamespacedMachineProfileStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceCoreOrdiriComV1alpha1NamespacedMachineProfileStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceCoreOrdiriComV1alpha1NamespacedMachineProfileStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/core.ordiri.com/v1alpha1/namespaces/{namespace}/machineprofiles/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineProfileToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineProfileFromJSON(jsonValue));
    }

    /**
     * replace status of the specified MachineProfile
     */
    async replaceCoreOrdiriComV1alpha1NamespacedMachineProfileStatus(requestParameters: ReplaceCoreOrdiriComV1alpha1NamespacedMachineProfileStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineProfile> {
        const response = await this.replaceCoreOrdiriComV1alpha1NamespacedMachineProfileStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace review of the specified Machine
     */
    async replaceCoreOrdiriComV1alpha1NamespacedMachineReviewRaw(requestParameters: ReplaceCoreOrdiriComV1alpha1NamespacedMachineReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1Machine>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceCoreOrdiriComV1alpha1NamespacedMachineReview.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceCoreOrdiriComV1alpha1NamespacedMachineReview.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceCoreOrdiriComV1alpha1NamespacedMachineReview.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/core.ordiri.com/v1alpha1/namespaces/{namespace}/machines/{name}/review`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineFromJSON(jsonValue));
    }

    /**
     * replace review of the specified Machine
     */
    async replaceCoreOrdiriComV1alpha1NamespacedMachineReview(requestParameters: ReplaceCoreOrdiriComV1alpha1NamespacedMachineReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1Machine> {
        const response = await this.replaceCoreOrdiriComV1alpha1NamespacedMachineReviewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace status of the specified Machine
     */
    async replaceCoreOrdiriComV1alpha1NamespacedMachineStatusRaw(requestParameters: ReplaceCoreOrdiriComV1alpha1NamespacedMachineStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1Machine>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceCoreOrdiriComV1alpha1NamespacedMachineStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceCoreOrdiriComV1alpha1NamespacedMachineStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceCoreOrdiriComV1alpha1NamespacedMachineStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/core.ordiri.com/v1alpha1/namespaces/{namespace}/machines/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisCoreV1alpha1MachineFromJSON(jsonValue));
    }

    /**
     * replace status of the specified Machine
     */
    async replaceCoreOrdiriComV1alpha1NamespacedMachineStatus(requestParameters: ReplaceCoreOrdiriComV1alpha1NamespacedMachineStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1Machine> {
        const response = await this.replaceCoreOrdiriComV1alpha1NamespacedMachineStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace the specified Node
     */
    async replaceCoreOrdiriComV1alpha1NodeRaw(requestParameters: ReplaceCoreOrdiriComV1alpha1NodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1Node>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceCoreOrdiriComV1alpha1Node.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceCoreOrdiriComV1alpha1Node.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/core.ordiri.com/v1alpha1/nodes/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubOrdiriOrdiriPkgApisCoreV1alpha1NodeToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisCoreV1alpha1NodeFromJSON(jsonValue));
    }

    /**
     * replace the specified Node
     */
    async replaceCoreOrdiriComV1alpha1Node(requestParameters: ReplaceCoreOrdiriComV1alpha1NodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1Node> {
        const response = await this.replaceCoreOrdiriComV1alpha1NodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace status of the specified Node
     */
    async replaceCoreOrdiriComV1alpha1NodeStatusRaw(requestParameters: ReplaceCoreOrdiriComV1alpha1NodeStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1Node>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceCoreOrdiriComV1alpha1NodeStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceCoreOrdiriComV1alpha1NodeStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/core.ordiri.com/v1alpha1/nodes/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubOrdiriOrdiriPkgApisCoreV1alpha1NodeToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisCoreV1alpha1NodeFromJSON(jsonValue));
    }

    /**
     * replace status of the specified Node
     */
    async replaceCoreOrdiriComV1alpha1NodeStatus(requestParameters: ReplaceCoreOrdiriComV1alpha1NodeStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisCoreV1alpha1Node> {
        const response = await this.replaceCoreOrdiriComV1alpha1NodeStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch individual changes to a list of Machine. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchCoreOrdiriComV1alpha1MachineListForAllNamespacesRaw(requestParameters: WatchCoreOrdiriComV1alpha1MachineListForAllNamespacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.ordiri.com/v1alpha1/watch/machines`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of Machine. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchCoreOrdiriComV1alpha1MachineListForAllNamespaces(requestParameters: WatchCoreOrdiriComV1alpha1MachineListForAllNamespacesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchCoreOrdiriComV1alpha1MachineListForAllNamespacesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch individual changes to a list of MachineProfile. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchCoreOrdiriComV1alpha1MachineProfileListForAllNamespacesRaw(requestParameters: WatchCoreOrdiriComV1alpha1MachineProfileListForAllNamespacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.ordiri.com/v1alpha1/watch/machineprofiles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of MachineProfile. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchCoreOrdiriComV1alpha1MachineProfileListForAllNamespaces(requestParameters: WatchCoreOrdiriComV1alpha1MachineProfileListForAllNamespacesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchCoreOrdiriComV1alpha1MachineProfileListForAllNamespacesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch changes to an object of kind Machine. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchCoreOrdiriComV1alpha1NamespacedMachineRaw(requestParameters: WatchCoreOrdiriComV1alpha1NamespacedMachineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchCoreOrdiriComV1alpha1NamespacedMachine.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchCoreOrdiriComV1alpha1NamespacedMachine.');
        }

        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.ordiri.com/v1alpha1/watch/namespaces/{namespace}/machines/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind Machine. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchCoreOrdiriComV1alpha1NamespacedMachine(requestParameters: WatchCoreOrdiriComV1alpha1NamespacedMachineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchCoreOrdiriComV1alpha1NamespacedMachineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch individual changes to a list of Machine. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchCoreOrdiriComV1alpha1NamespacedMachineListRaw(requestParameters: WatchCoreOrdiriComV1alpha1NamespacedMachineListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchCoreOrdiriComV1alpha1NamespacedMachineList.');
        }

        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.ordiri.com/v1alpha1/watch/namespaces/{namespace}/machines`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of Machine. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchCoreOrdiriComV1alpha1NamespacedMachineList(requestParameters: WatchCoreOrdiriComV1alpha1NamespacedMachineListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchCoreOrdiriComV1alpha1NamespacedMachineListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch changes to an object of kind MachineProfile. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchCoreOrdiriComV1alpha1NamespacedMachineProfileRaw(requestParameters: WatchCoreOrdiriComV1alpha1NamespacedMachineProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchCoreOrdiriComV1alpha1NamespacedMachineProfile.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchCoreOrdiriComV1alpha1NamespacedMachineProfile.');
        }

        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.ordiri.com/v1alpha1/watch/namespaces/{namespace}/machineprofiles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind MachineProfile. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchCoreOrdiriComV1alpha1NamespacedMachineProfile(requestParameters: WatchCoreOrdiriComV1alpha1NamespacedMachineProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchCoreOrdiriComV1alpha1NamespacedMachineProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch individual changes to a list of MachineProfile. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchCoreOrdiriComV1alpha1NamespacedMachineProfileListRaw(requestParameters: WatchCoreOrdiriComV1alpha1NamespacedMachineProfileListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchCoreOrdiriComV1alpha1NamespacedMachineProfileList.');
        }

        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.ordiri.com/v1alpha1/watch/namespaces/{namespace}/machineprofiles`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of MachineProfile. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchCoreOrdiriComV1alpha1NamespacedMachineProfileList(requestParameters: WatchCoreOrdiriComV1alpha1NamespacedMachineProfileListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchCoreOrdiriComV1alpha1NamespacedMachineProfileListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch changes to an object of kind Node. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchCoreOrdiriComV1alpha1NodeRaw(requestParameters: WatchCoreOrdiriComV1alpha1NodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchCoreOrdiriComV1alpha1Node.');
        }

        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.ordiri.com/v1alpha1/watch/nodes/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind Node. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchCoreOrdiriComV1alpha1Node(requestParameters: WatchCoreOrdiriComV1alpha1NodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchCoreOrdiriComV1alpha1NodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch individual changes to a list of Node. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchCoreOrdiriComV1alpha1NodeListRaw(requestParameters: WatchCoreOrdiriComV1alpha1NodeListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.ordiri.com/v1alpha1/watch/nodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of Node. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchCoreOrdiriComV1alpha1NodeList(requestParameters: WatchCoreOrdiriComV1alpha1NodeListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchCoreOrdiriComV1alpha1NodeListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
