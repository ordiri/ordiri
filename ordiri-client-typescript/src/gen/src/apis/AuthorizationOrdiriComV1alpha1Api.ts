/* tslint:disable */
/* eslint-disable */
/**
 * openapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1Role,
  ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleBinding,
  ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleBindingList,
  ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleList,
  ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1ServiceAccount,
  ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1ServiceAccountList,
  IoK8sApimachineryPkgApisMetaV1APIResourceList,
  IoK8sApimachineryPkgApisMetaV1DeleteOptions,
  IoK8sApimachineryPkgApisMetaV1Status,
  IoK8sApimachineryPkgApisMetaV1WatchEvent,
} from '../models';
import {
    ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleFromJSON,
    ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleToJSON,
    ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleBindingFromJSON,
    ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleBindingToJSON,
    ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleBindingListFromJSON,
    ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleBindingListToJSON,
    ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleListFromJSON,
    ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleListToJSON,
    ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1ServiceAccountFromJSON,
    ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1ServiceAccountToJSON,
    ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1ServiceAccountListFromJSON,
    ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1ServiceAccountListToJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceListToJSON,
    IoK8sApimachineryPkgApisMetaV1DeleteOptionsFromJSON,
    IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON,
    IoK8sApimachineryPkgApisMetaV1StatusFromJSON,
    IoK8sApimachineryPkgApisMetaV1StatusToJSON,
    IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON,
    IoK8sApimachineryPkgApisMetaV1WatchEventToJSON,
} from '../models';

export interface CreateAuthorizationOrdiriComV1alpha1NamespacedRoleRequest {
    namespace: string;
    body: ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1Role;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface CreateAuthorizationOrdiriComV1alpha1NamespacedRoleBindingRequest {
    namespace: string;
    body: ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleBinding;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface CreateAuthorizationOrdiriComV1alpha1NamespacedServiceAccountRequest {
    namespace: string;
    body: ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1ServiceAccount;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface DeleteAuthorizationOrdiriComV1alpha1CollectionNamespacedRoleRequest {
    namespace: string;
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteAuthorizationOrdiriComV1alpha1CollectionNamespacedRoleBindingRequest {
    namespace: string;
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteAuthorizationOrdiriComV1alpha1CollectionNamespacedServiceAccountRequest {
    namespace: string;
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteAuthorizationOrdiriComV1alpha1NamespacedRoleRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteAuthorizationOrdiriComV1alpha1NamespacedRoleBindingRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteAuthorizationOrdiriComV1alpha1NamespacedServiceAccountRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface ListAuthorizationOrdiriComV1alpha1NamespacedRoleRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListAuthorizationOrdiriComV1alpha1NamespacedRoleBindingRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListAuthorizationOrdiriComV1alpha1NamespacedServiceAccountRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListAuthorizationOrdiriComV1alpha1RoleBindingForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListAuthorizationOrdiriComV1alpha1RoleForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListAuthorizationOrdiriComV1alpha1ServiceAccountForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface PatchAuthorizationOrdiriComV1alpha1NamespacedRoleRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchAuthorizationOrdiriComV1alpha1NamespacedRoleBindingRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchAuthorizationOrdiriComV1alpha1NamespacedRoleBindingStatusRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchAuthorizationOrdiriComV1alpha1NamespacedRoleStatusRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchAuthorizationOrdiriComV1alpha1NamespacedServiceAccountRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchAuthorizationOrdiriComV1alpha1NamespacedServiceAccountStatusRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface ReadAuthorizationOrdiriComV1alpha1NamespacedRoleRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReadAuthorizationOrdiriComV1alpha1NamespacedRoleBindingRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReadAuthorizationOrdiriComV1alpha1NamespacedRoleBindingStatusRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReadAuthorizationOrdiriComV1alpha1NamespacedRoleStatusRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReadAuthorizationOrdiriComV1alpha1NamespacedServiceAccountRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReadAuthorizationOrdiriComV1alpha1NamespacedServiceAccountStatusRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReplaceAuthorizationOrdiriComV1alpha1NamespacedRoleRequest {
    name: string;
    namespace: string;
    body: ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1Role;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceAuthorizationOrdiriComV1alpha1NamespacedRoleBindingRequest {
    name: string;
    namespace: string;
    body: ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleBinding;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceAuthorizationOrdiriComV1alpha1NamespacedRoleBindingStatusRequest {
    name: string;
    namespace: string;
    body: ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleBinding;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceAuthorizationOrdiriComV1alpha1NamespacedRoleStatusRequest {
    name: string;
    namespace: string;
    body: ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1Role;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceAuthorizationOrdiriComV1alpha1NamespacedServiceAccountRequest {
    name: string;
    namespace: string;
    body: ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1ServiceAccount;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceAuthorizationOrdiriComV1alpha1NamespacedServiceAccountStatusRequest {
    name: string;
    namespace: string;
    body: ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1ServiceAccount;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface WatchAuthorizationOrdiriComV1alpha1NamespacedRoleRequest {
    name: string;
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchAuthorizationOrdiriComV1alpha1NamespacedRoleBindingRequest {
    name: string;
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchAuthorizationOrdiriComV1alpha1NamespacedRoleBindingListRequest {
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchAuthorizationOrdiriComV1alpha1NamespacedRoleListRequest {
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchAuthorizationOrdiriComV1alpha1NamespacedServiceAccountRequest {
    name: string;
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchAuthorizationOrdiriComV1alpha1NamespacedServiceAccountListRequest {
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchAuthorizationOrdiriComV1alpha1RoleBindingListForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchAuthorizationOrdiriComV1alpha1RoleListForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchAuthorizationOrdiriComV1alpha1ServiceAccountListForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

/**
 * 
 */
export class AuthorizationOrdiriComV1alpha1Api extends runtime.BaseAPI {

    /**
     * create a Role
     */
    async createAuthorizationOrdiriComV1alpha1NamespacedRoleRaw(requestParameters: CreateAuthorizationOrdiriComV1alpha1NamespacedRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1Role>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createAuthorizationOrdiriComV1alpha1NamespacedRole.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createAuthorizationOrdiriComV1alpha1NamespacedRole.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/authorization.ordiri.com/v1alpha1/namespaces/{namespace}/roles`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleFromJSON(jsonValue));
    }

    /**
     * create a Role
     */
    async createAuthorizationOrdiriComV1alpha1NamespacedRole(requestParameters: CreateAuthorizationOrdiriComV1alpha1NamespacedRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1Role> {
        const response = await this.createAuthorizationOrdiriComV1alpha1NamespacedRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create a RoleBinding
     */
    async createAuthorizationOrdiriComV1alpha1NamespacedRoleBindingRaw(requestParameters: CreateAuthorizationOrdiriComV1alpha1NamespacedRoleBindingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleBinding>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createAuthorizationOrdiriComV1alpha1NamespacedRoleBinding.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createAuthorizationOrdiriComV1alpha1NamespacedRoleBinding.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/authorization.ordiri.com/v1alpha1/namespaces/{namespace}/rolebindings`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleBindingToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleBindingFromJSON(jsonValue));
    }

    /**
     * create a RoleBinding
     */
    async createAuthorizationOrdiriComV1alpha1NamespacedRoleBinding(requestParameters: CreateAuthorizationOrdiriComV1alpha1NamespacedRoleBindingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleBinding> {
        const response = await this.createAuthorizationOrdiriComV1alpha1NamespacedRoleBindingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create a ServiceAccount
     */
    async createAuthorizationOrdiriComV1alpha1NamespacedServiceAccountRaw(requestParameters: CreateAuthorizationOrdiriComV1alpha1NamespacedServiceAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1ServiceAccount>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createAuthorizationOrdiriComV1alpha1NamespacedServiceAccount.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createAuthorizationOrdiriComV1alpha1NamespacedServiceAccount.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/authorization.ordiri.com/v1alpha1/namespaces/{namespace}/serviceaccounts`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1ServiceAccountToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1ServiceAccountFromJSON(jsonValue));
    }

    /**
     * create a ServiceAccount
     */
    async createAuthorizationOrdiriComV1alpha1NamespacedServiceAccount(requestParameters: CreateAuthorizationOrdiriComV1alpha1NamespacedServiceAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1ServiceAccount> {
        const response = await this.createAuthorizationOrdiriComV1alpha1NamespacedServiceAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete collection of Role
     */
    async deleteAuthorizationOrdiriComV1alpha1CollectionNamespacedRoleRaw(requestParameters: DeleteAuthorizationOrdiriComV1alpha1CollectionNamespacedRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteAuthorizationOrdiriComV1alpha1CollectionNamespacedRole.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/authorization.ordiri.com/v1alpha1/namespaces/{namespace}/roles`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of Role
     */
    async deleteAuthorizationOrdiriComV1alpha1CollectionNamespacedRole(requestParameters: DeleteAuthorizationOrdiriComV1alpha1CollectionNamespacedRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteAuthorizationOrdiriComV1alpha1CollectionNamespacedRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete collection of RoleBinding
     */
    async deleteAuthorizationOrdiriComV1alpha1CollectionNamespacedRoleBindingRaw(requestParameters: DeleteAuthorizationOrdiriComV1alpha1CollectionNamespacedRoleBindingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteAuthorizationOrdiriComV1alpha1CollectionNamespacedRoleBinding.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/authorization.ordiri.com/v1alpha1/namespaces/{namespace}/rolebindings`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of RoleBinding
     */
    async deleteAuthorizationOrdiriComV1alpha1CollectionNamespacedRoleBinding(requestParameters: DeleteAuthorizationOrdiriComV1alpha1CollectionNamespacedRoleBindingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteAuthorizationOrdiriComV1alpha1CollectionNamespacedRoleBindingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete collection of ServiceAccount
     */
    async deleteAuthorizationOrdiriComV1alpha1CollectionNamespacedServiceAccountRaw(requestParameters: DeleteAuthorizationOrdiriComV1alpha1CollectionNamespacedServiceAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteAuthorizationOrdiriComV1alpha1CollectionNamespacedServiceAccount.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/authorization.ordiri.com/v1alpha1/namespaces/{namespace}/serviceaccounts`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of ServiceAccount
     */
    async deleteAuthorizationOrdiriComV1alpha1CollectionNamespacedServiceAccount(requestParameters: DeleteAuthorizationOrdiriComV1alpha1CollectionNamespacedServiceAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteAuthorizationOrdiriComV1alpha1CollectionNamespacedServiceAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a Role
     */
    async deleteAuthorizationOrdiriComV1alpha1NamespacedRoleRaw(requestParameters: DeleteAuthorizationOrdiriComV1alpha1NamespacedRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteAuthorizationOrdiriComV1alpha1NamespacedRole.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteAuthorizationOrdiriComV1alpha1NamespacedRole.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/authorization.ordiri.com/v1alpha1/namespaces/{namespace}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a Role
     */
    async deleteAuthorizationOrdiriComV1alpha1NamespacedRole(requestParameters: DeleteAuthorizationOrdiriComV1alpha1NamespacedRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteAuthorizationOrdiriComV1alpha1NamespacedRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a RoleBinding
     */
    async deleteAuthorizationOrdiriComV1alpha1NamespacedRoleBindingRaw(requestParameters: DeleteAuthorizationOrdiriComV1alpha1NamespacedRoleBindingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteAuthorizationOrdiriComV1alpha1NamespacedRoleBinding.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteAuthorizationOrdiriComV1alpha1NamespacedRoleBinding.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/authorization.ordiri.com/v1alpha1/namespaces/{namespace}/rolebindings/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a RoleBinding
     */
    async deleteAuthorizationOrdiriComV1alpha1NamespacedRoleBinding(requestParameters: DeleteAuthorizationOrdiriComV1alpha1NamespacedRoleBindingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteAuthorizationOrdiriComV1alpha1NamespacedRoleBindingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a ServiceAccount
     */
    async deleteAuthorizationOrdiriComV1alpha1NamespacedServiceAccountRaw(requestParameters: DeleteAuthorizationOrdiriComV1alpha1NamespacedServiceAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteAuthorizationOrdiriComV1alpha1NamespacedServiceAccount.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteAuthorizationOrdiriComV1alpha1NamespacedServiceAccount.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/authorization.ordiri.com/v1alpha1/namespaces/{namespace}/serviceaccounts/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a ServiceAccount
     */
    async deleteAuthorizationOrdiriComV1alpha1NamespacedServiceAccount(requestParameters: DeleteAuthorizationOrdiriComV1alpha1NamespacedServiceAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteAuthorizationOrdiriComV1alpha1NamespacedServiceAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get available resources
     */
    async getAuthorizationOrdiriComV1alpha1APIResourcesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1APIResourceList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/authorization.ordiri.com/v1alpha1/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON(jsonValue));
    }

    /**
     * get available resources
     */
    async getAuthorizationOrdiriComV1alpha1APIResources(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1APIResourceList> {
        const response = await this.getAuthorizationOrdiriComV1alpha1APIResourcesRaw(initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind Role
     */
    async listAuthorizationOrdiriComV1alpha1NamespacedRoleRaw(requestParameters: ListAuthorizationOrdiriComV1alpha1NamespacedRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleList>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listAuthorizationOrdiriComV1alpha1NamespacedRole.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/authorization.ordiri.com/v1alpha1/namespaces/{namespace}/roles`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind Role
     */
    async listAuthorizationOrdiriComV1alpha1NamespacedRole(requestParameters: ListAuthorizationOrdiriComV1alpha1NamespacedRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleList> {
        const response = await this.listAuthorizationOrdiriComV1alpha1NamespacedRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind RoleBinding
     */
    async listAuthorizationOrdiriComV1alpha1NamespacedRoleBindingRaw(requestParameters: ListAuthorizationOrdiriComV1alpha1NamespacedRoleBindingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleBindingList>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listAuthorizationOrdiriComV1alpha1NamespacedRoleBinding.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/authorization.ordiri.com/v1alpha1/namespaces/{namespace}/rolebindings`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleBindingListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind RoleBinding
     */
    async listAuthorizationOrdiriComV1alpha1NamespacedRoleBinding(requestParameters: ListAuthorizationOrdiriComV1alpha1NamespacedRoleBindingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleBindingList> {
        const response = await this.listAuthorizationOrdiriComV1alpha1NamespacedRoleBindingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind ServiceAccount
     */
    async listAuthorizationOrdiriComV1alpha1NamespacedServiceAccountRaw(requestParameters: ListAuthorizationOrdiriComV1alpha1NamespacedServiceAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1ServiceAccountList>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listAuthorizationOrdiriComV1alpha1NamespacedServiceAccount.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/authorization.ordiri.com/v1alpha1/namespaces/{namespace}/serviceaccounts`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1ServiceAccountListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind ServiceAccount
     */
    async listAuthorizationOrdiriComV1alpha1NamespacedServiceAccount(requestParameters: ListAuthorizationOrdiriComV1alpha1NamespacedServiceAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1ServiceAccountList> {
        const response = await this.listAuthorizationOrdiriComV1alpha1NamespacedServiceAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind RoleBinding
     */
    async listAuthorizationOrdiriComV1alpha1RoleBindingForAllNamespacesRaw(requestParameters: ListAuthorizationOrdiriComV1alpha1RoleBindingForAllNamespacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleBindingList>> {
        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/authorization.ordiri.com/v1alpha1/rolebindings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleBindingListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind RoleBinding
     */
    async listAuthorizationOrdiriComV1alpha1RoleBindingForAllNamespaces(requestParameters: ListAuthorizationOrdiriComV1alpha1RoleBindingForAllNamespacesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleBindingList> {
        const response = await this.listAuthorizationOrdiriComV1alpha1RoleBindingForAllNamespacesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind Role
     */
    async listAuthorizationOrdiriComV1alpha1RoleForAllNamespacesRaw(requestParameters: ListAuthorizationOrdiriComV1alpha1RoleForAllNamespacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleList>> {
        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/authorization.ordiri.com/v1alpha1/roles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind Role
     */
    async listAuthorizationOrdiriComV1alpha1RoleForAllNamespaces(requestParameters: ListAuthorizationOrdiriComV1alpha1RoleForAllNamespacesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleList> {
        const response = await this.listAuthorizationOrdiriComV1alpha1RoleForAllNamespacesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind ServiceAccount
     */
    async listAuthorizationOrdiriComV1alpha1ServiceAccountForAllNamespacesRaw(requestParameters: ListAuthorizationOrdiriComV1alpha1ServiceAccountForAllNamespacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1ServiceAccountList>> {
        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/authorization.ordiri.com/v1alpha1/serviceaccounts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1ServiceAccountListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind ServiceAccount
     */
    async listAuthorizationOrdiriComV1alpha1ServiceAccountForAllNamespaces(requestParameters: ListAuthorizationOrdiriComV1alpha1ServiceAccountForAllNamespacesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1ServiceAccountList> {
        const response = await this.listAuthorizationOrdiriComV1alpha1ServiceAccountForAllNamespacesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update the specified Role
     */
    async patchAuthorizationOrdiriComV1alpha1NamespacedRoleRaw(requestParameters: PatchAuthorizationOrdiriComV1alpha1NamespacedRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1Role>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchAuthorizationOrdiriComV1alpha1NamespacedRole.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchAuthorizationOrdiriComV1alpha1NamespacedRole.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchAuthorizationOrdiriComV1alpha1NamespacedRole.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/authorization.ordiri.com/v1alpha1/namespaces/{namespace}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleFromJSON(jsonValue));
    }

    /**
     * partially update the specified Role
     */
    async patchAuthorizationOrdiriComV1alpha1NamespacedRole(requestParameters: PatchAuthorizationOrdiriComV1alpha1NamespacedRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1Role> {
        const response = await this.patchAuthorizationOrdiriComV1alpha1NamespacedRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update the specified RoleBinding
     */
    async patchAuthorizationOrdiriComV1alpha1NamespacedRoleBindingRaw(requestParameters: PatchAuthorizationOrdiriComV1alpha1NamespacedRoleBindingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleBinding>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchAuthorizationOrdiriComV1alpha1NamespacedRoleBinding.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchAuthorizationOrdiriComV1alpha1NamespacedRoleBinding.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchAuthorizationOrdiriComV1alpha1NamespacedRoleBinding.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/authorization.ordiri.com/v1alpha1/namespaces/{namespace}/rolebindings/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleBindingFromJSON(jsonValue));
    }

    /**
     * partially update the specified RoleBinding
     */
    async patchAuthorizationOrdiriComV1alpha1NamespacedRoleBinding(requestParameters: PatchAuthorizationOrdiriComV1alpha1NamespacedRoleBindingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleBinding> {
        const response = await this.patchAuthorizationOrdiriComV1alpha1NamespacedRoleBindingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update status of the specified RoleBinding
     */
    async patchAuthorizationOrdiriComV1alpha1NamespacedRoleBindingStatusRaw(requestParameters: PatchAuthorizationOrdiriComV1alpha1NamespacedRoleBindingStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleBinding>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchAuthorizationOrdiriComV1alpha1NamespacedRoleBindingStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchAuthorizationOrdiriComV1alpha1NamespacedRoleBindingStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchAuthorizationOrdiriComV1alpha1NamespacedRoleBindingStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/authorization.ordiri.com/v1alpha1/namespaces/{namespace}/rolebindings/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleBindingFromJSON(jsonValue));
    }

    /**
     * partially update status of the specified RoleBinding
     */
    async patchAuthorizationOrdiriComV1alpha1NamespacedRoleBindingStatus(requestParameters: PatchAuthorizationOrdiriComV1alpha1NamespacedRoleBindingStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleBinding> {
        const response = await this.patchAuthorizationOrdiriComV1alpha1NamespacedRoleBindingStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update status of the specified Role
     */
    async patchAuthorizationOrdiriComV1alpha1NamespacedRoleStatusRaw(requestParameters: PatchAuthorizationOrdiriComV1alpha1NamespacedRoleStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1Role>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchAuthorizationOrdiriComV1alpha1NamespacedRoleStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchAuthorizationOrdiriComV1alpha1NamespacedRoleStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchAuthorizationOrdiriComV1alpha1NamespacedRoleStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/authorization.ordiri.com/v1alpha1/namespaces/{namespace}/roles/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleFromJSON(jsonValue));
    }

    /**
     * partially update status of the specified Role
     */
    async patchAuthorizationOrdiriComV1alpha1NamespacedRoleStatus(requestParameters: PatchAuthorizationOrdiriComV1alpha1NamespacedRoleStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1Role> {
        const response = await this.patchAuthorizationOrdiriComV1alpha1NamespacedRoleStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update the specified ServiceAccount
     */
    async patchAuthorizationOrdiriComV1alpha1NamespacedServiceAccountRaw(requestParameters: PatchAuthorizationOrdiriComV1alpha1NamespacedServiceAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1ServiceAccount>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchAuthorizationOrdiriComV1alpha1NamespacedServiceAccount.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchAuthorizationOrdiriComV1alpha1NamespacedServiceAccount.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchAuthorizationOrdiriComV1alpha1NamespacedServiceAccount.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/authorization.ordiri.com/v1alpha1/namespaces/{namespace}/serviceaccounts/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1ServiceAccountFromJSON(jsonValue));
    }

    /**
     * partially update the specified ServiceAccount
     */
    async patchAuthorizationOrdiriComV1alpha1NamespacedServiceAccount(requestParameters: PatchAuthorizationOrdiriComV1alpha1NamespacedServiceAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1ServiceAccount> {
        const response = await this.patchAuthorizationOrdiriComV1alpha1NamespacedServiceAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update status of the specified ServiceAccount
     */
    async patchAuthorizationOrdiriComV1alpha1NamespacedServiceAccountStatusRaw(requestParameters: PatchAuthorizationOrdiriComV1alpha1NamespacedServiceAccountStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1ServiceAccount>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchAuthorizationOrdiriComV1alpha1NamespacedServiceAccountStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchAuthorizationOrdiriComV1alpha1NamespacedServiceAccountStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchAuthorizationOrdiriComV1alpha1NamespacedServiceAccountStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/authorization.ordiri.com/v1alpha1/namespaces/{namespace}/serviceaccounts/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1ServiceAccountFromJSON(jsonValue));
    }

    /**
     * partially update status of the specified ServiceAccount
     */
    async patchAuthorizationOrdiriComV1alpha1NamespacedServiceAccountStatus(requestParameters: PatchAuthorizationOrdiriComV1alpha1NamespacedServiceAccountStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1ServiceAccount> {
        const response = await this.patchAuthorizationOrdiriComV1alpha1NamespacedServiceAccountStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read the specified Role
     */
    async readAuthorizationOrdiriComV1alpha1NamespacedRoleRaw(requestParameters: ReadAuthorizationOrdiriComV1alpha1NamespacedRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1Role>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readAuthorizationOrdiriComV1alpha1NamespacedRole.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readAuthorizationOrdiriComV1alpha1NamespacedRole.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/authorization.ordiri.com/v1alpha1/namespaces/{namespace}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleFromJSON(jsonValue));
    }

    /**
     * read the specified Role
     */
    async readAuthorizationOrdiriComV1alpha1NamespacedRole(requestParameters: ReadAuthorizationOrdiriComV1alpha1NamespacedRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1Role> {
        const response = await this.readAuthorizationOrdiriComV1alpha1NamespacedRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read the specified RoleBinding
     */
    async readAuthorizationOrdiriComV1alpha1NamespacedRoleBindingRaw(requestParameters: ReadAuthorizationOrdiriComV1alpha1NamespacedRoleBindingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleBinding>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readAuthorizationOrdiriComV1alpha1NamespacedRoleBinding.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readAuthorizationOrdiriComV1alpha1NamespacedRoleBinding.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/authorization.ordiri.com/v1alpha1/namespaces/{namespace}/rolebindings/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleBindingFromJSON(jsonValue));
    }

    /**
     * read the specified RoleBinding
     */
    async readAuthorizationOrdiriComV1alpha1NamespacedRoleBinding(requestParameters: ReadAuthorizationOrdiriComV1alpha1NamespacedRoleBindingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleBinding> {
        const response = await this.readAuthorizationOrdiriComV1alpha1NamespacedRoleBindingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read status of the specified RoleBinding
     */
    async readAuthorizationOrdiriComV1alpha1NamespacedRoleBindingStatusRaw(requestParameters: ReadAuthorizationOrdiriComV1alpha1NamespacedRoleBindingStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleBinding>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readAuthorizationOrdiriComV1alpha1NamespacedRoleBindingStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readAuthorizationOrdiriComV1alpha1NamespacedRoleBindingStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/authorization.ordiri.com/v1alpha1/namespaces/{namespace}/rolebindings/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleBindingFromJSON(jsonValue));
    }

    /**
     * read status of the specified RoleBinding
     */
    async readAuthorizationOrdiriComV1alpha1NamespacedRoleBindingStatus(requestParameters: ReadAuthorizationOrdiriComV1alpha1NamespacedRoleBindingStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleBinding> {
        const response = await this.readAuthorizationOrdiriComV1alpha1NamespacedRoleBindingStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read status of the specified Role
     */
    async readAuthorizationOrdiriComV1alpha1NamespacedRoleStatusRaw(requestParameters: ReadAuthorizationOrdiriComV1alpha1NamespacedRoleStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1Role>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readAuthorizationOrdiriComV1alpha1NamespacedRoleStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readAuthorizationOrdiriComV1alpha1NamespacedRoleStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/authorization.ordiri.com/v1alpha1/namespaces/{namespace}/roles/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleFromJSON(jsonValue));
    }

    /**
     * read status of the specified Role
     */
    async readAuthorizationOrdiriComV1alpha1NamespacedRoleStatus(requestParameters: ReadAuthorizationOrdiriComV1alpha1NamespacedRoleStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1Role> {
        const response = await this.readAuthorizationOrdiriComV1alpha1NamespacedRoleStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read the specified ServiceAccount
     */
    async readAuthorizationOrdiriComV1alpha1NamespacedServiceAccountRaw(requestParameters: ReadAuthorizationOrdiriComV1alpha1NamespacedServiceAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1ServiceAccount>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readAuthorizationOrdiriComV1alpha1NamespacedServiceAccount.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readAuthorizationOrdiriComV1alpha1NamespacedServiceAccount.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/authorization.ordiri.com/v1alpha1/namespaces/{namespace}/serviceaccounts/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1ServiceAccountFromJSON(jsonValue));
    }

    /**
     * read the specified ServiceAccount
     */
    async readAuthorizationOrdiriComV1alpha1NamespacedServiceAccount(requestParameters: ReadAuthorizationOrdiriComV1alpha1NamespacedServiceAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1ServiceAccount> {
        const response = await this.readAuthorizationOrdiriComV1alpha1NamespacedServiceAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read status of the specified ServiceAccount
     */
    async readAuthorizationOrdiriComV1alpha1NamespacedServiceAccountStatusRaw(requestParameters: ReadAuthorizationOrdiriComV1alpha1NamespacedServiceAccountStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1ServiceAccount>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readAuthorizationOrdiriComV1alpha1NamespacedServiceAccountStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readAuthorizationOrdiriComV1alpha1NamespacedServiceAccountStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/authorization.ordiri.com/v1alpha1/namespaces/{namespace}/serviceaccounts/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1ServiceAccountFromJSON(jsonValue));
    }

    /**
     * read status of the specified ServiceAccount
     */
    async readAuthorizationOrdiriComV1alpha1NamespacedServiceAccountStatus(requestParameters: ReadAuthorizationOrdiriComV1alpha1NamespacedServiceAccountStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1ServiceAccount> {
        const response = await this.readAuthorizationOrdiriComV1alpha1NamespacedServiceAccountStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace the specified Role
     */
    async replaceAuthorizationOrdiriComV1alpha1NamespacedRoleRaw(requestParameters: ReplaceAuthorizationOrdiriComV1alpha1NamespacedRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1Role>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceAuthorizationOrdiriComV1alpha1NamespacedRole.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceAuthorizationOrdiriComV1alpha1NamespacedRole.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceAuthorizationOrdiriComV1alpha1NamespacedRole.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/authorization.ordiri.com/v1alpha1/namespaces/{namespace}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleFromJSON(jsonValue));
    }

    /**
     * replace the specified Role
     */
    async replaceAuthorizationOrdiriComV1alpha1NamespacedRole(requestParameters: ReplaceAuthorizationOrdiriComV1alpha1NamespacedRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1Role> {
        const response = await this.replaceAuthorizationOrdiriComV1alpha1NamespacedRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace the specified RoleBinding
     */
    async replaceAuthorizationOrdiriComV1alpha1NamespacedRoleBindingRaw(requestParameters: ReplaceAuthorizationOrdiriComV1alpha1NamespacedRoleBindingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleBinding>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceAuthorizationOrdiriComV1alpha1NamespacedRoleBinding.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceAuthorizationOrdiriComV1alpha1NamespacedRoleBinding.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceAuthorizationOrdiriComV1alpha1NamespacedRoleBinding.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/authorization.ordiri.com/v1alpha1/namespaces/{namespace}/rolebindings/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleBindingToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleBindingFromJSON(jsonValue));
    }

    /**
     * replace the specified RoleBinding
     */
    async replaceAuthorizationOrdiriComV1alpha1NamespacedRoleBinding(requestParameters: ReplaceAuthorizationOrdiriComV1alpha1NamespacedRoleBindingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleBinding> {
        const response = await this.replaceAuthorizationOrdiriComV1alpha1NamespacedRoleBindingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace status of the specified RoleBinding
     */
    async replaceAuthorizationOrdiriComV1alpha1NamespacedRoleBindingStatusRaw(requestParameters: ReplaceAuthorizationOrdiriComV1alpha1NamespacedRoleBindingStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleBinding>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceAuthorizationOrdiriComV1alpha1NamespacedRoleBindingStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceAuthorizationOrdiriComV1alpha1NamespacedRoleBindingStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceAuthorizationOrdiriComV1alpha1NamespacedRoleBindingStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/authorization.ordiri.com/v1alpha1/namespaces/{namespace}/rolebindings/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleBindingToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleBindingFromJSON(jsonValue));
    }

    /**
     * replace status of the specified RoleBinding
     */
    async replaceAuthorizationOrdiriComV1alpha1NamespacedRoleBindingStatus(requestParameters: ReplaceAuthorizationOrdiriComV1alpha1NamespacedRoleBindingStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleBinding> {
        const response = await this.replaceAuthorizationOrdiriComV1alpha1NamespacedRoleBindingStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace status of the specified Role
     */
    async replaceAuthorizationOrdiriComV1alpha1NamespacedRoleStatusRaw(requestParameters: ReplaceAuthorizationOrdiriComV1alpha1NamespacedRoleStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1Role>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceAuthorizationOrdiriComV1alpha1NamespacedRoleStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceAuthorizationOrdiriComV1alpha1NamespacedRoleStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceAuthorizationOrdiriComV1alpha1NamespacedRoleStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/authorization.ordiri.com/v1alpha1/namespaces/{namespace}/roles/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1RoleFromJSON(jsonValue));
    }

    /**
     * replace status of the specified Role
     */
    async replaceAuthorizationOrdiriComV1alpha1NamespacedRoleStatus(requestParameters: ReplaceAuthorizationOrdiriComV1alpha1NamespacedRoleStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1Role> {
        const response = await this.replaceAuthorizationOrdiriComV1alpha1NamespacedRoleStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace the specified ServiceAccount
     */
    async replaceAuthorizationOrdiriComV1alpha1NamespacedServiceAccountRaw(requestParameters: ReplaceAuthorizationOrdiriComV1alpha1NamespacedServiceAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1ServiceAccount>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceAuthorizationOrdiriComV1alpha1NamespacedServiceAccount.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceAuthorizationOrdiriComV1alpha1NamespacedServiceAccount.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceAuthorizationOrdiriComV1alpha1NamespacedServiceAccount.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/authorization.ordiri.com/v1alpha1/namespaces/{namespace}/serviceaccounts/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1ServiceAccountToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1ServiceAccountFromJSON(jsonValue));
    }

    /**
     * replace the specified ServiceAccount
     */
    async replaceAuthorizationOrdiriComV1alpha1NamespacedServiceAccount(requestParameters: ReplaceAuthorizationOrdiriComV1alpha1NamespacedServiceAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1ServiceAccount> {
        const response = await this.replaceAuthorizationOrdiriComV1alpha1NamespacedServiceAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace status of the specified ServiceAccount
     */
    async replaceAuthorizationOrdiriComV1alpha1NamespacedServiceAccountStatusRaw(requestParameters: ReplaceAuthorizationOrdiriComV1alpha1NamespacedServiceAccountStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1ServiceAccount>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceAuthorizationOrdiriComV1alpha1NamespacedServiceAccountStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceAuthorizationOrdiriComV1alpha1NamespacedServiceAccountStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceAuthorizationOrdiriComV1alpha1NamespacedServiceAccountStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/authorization.ordiri.com/v1alpha1/namespaces/{namespace}/serviceaccounts/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1ServiceAccountToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1ServiceAccountFromJSON(jsonValue));
    }

    /**
     * replace status of the specified ServiceAccount
     */
    async replaceAuthorizationOrdiriComV1alpha1NamespacedServiceAccountStatus(requestParameters: ReplaceAuthorizationOrdiriComV1alpha1NamespacedServiceAccountStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisAuthorizationV1alpha1ServiceAccount> {
        const response = await this.replaceAuthorizationOrdiriComV1alpha1NamespacedServiceAccountStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch changes to an object of kind Role. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchAuthorizationOrdiriComV1alpha1NamespacedRoleRaw(requestParameters: WatchAuthorizationOrdiriComV1alpha1NamespacedRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchAuthorizationOrdiriComV1alpha1NamespacedRole.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchAuthorizationOrdiriComV1alpha1NamespacedRole.');
        }

        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/authorization.ordiri.com/v1alpha1/watch/namespaces/{namespace}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind Role. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchAuthorizationOrdiriComV1alpha1NamespacedRole(requestParameters: WatchAuthorizationOrdiriComV1alpha1NamespacedRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchAuthorizationOrdiriComV1alpha1NamespacedRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch changes to an object of kind RoleBinding. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchAuthorizationOrdiriComV1alpha1NamespacedRoleBindingRaw(requestParameters: WatchAuthorizationOrdiriComV1alpha1NamespacedRoleBindingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchAuthorizationOrdiriComV1alpha1NamespacedRoleBinding.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchAuthorizationOrdiriComV1alpha1NamespacedRoleBinding.');
        }

        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/authorization.ordiri.com/v1alpha1/watch/namespaces/{namespace}/rolebindings/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind RoleBinding. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchAuthorizationOrdiriComV1alpha1NamespacedRoleBinding(requestParameters: WatchAuthorizationOrdiriComV1alpha1NamespacedRoleBindingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchAuthorizationOrdiriComV1alpha1NamespacedRoleBindingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch individual changes to a list of RoleBinding. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAuthorizationOrdiriComV1alpha1NamespacedRoleBindingListRaw(requestParameters: WatchAuthorizationOrdiriComV1alpha1NamespacedRoleBindingListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchAuthorizationOrdiriComV1alpha1NamespacedRoleBindingList.');
        }

        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/authorization.ordiri.com/v1alpha1/watch/namespaces/{namespace}/rolebindings`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of RoleBinding. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAuthorizationOrdiriComV1alpha1NamespacedRoleBindingList(requestParameters: WatchAuthorizationOrdiriComV1alpha1NamespacedRoleBindingListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchAuthorizationOrdiriComV1alpha1NamespacedRoleBindingListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch individual changes to a list of Role. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAuthorizationOrdiriComV1alpha1NamespacedRoleListRaw(requestParameters: WatchAuthorizationOrdiriComV1alpha1NamespacedRoleListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchAuthorizationOrdiriComV1alpha1NamespacedRoleList.');
        }

        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/authorization.ordiri.com/v1alpha1/watch/namespaces/{namespace}/roles`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of Role. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAuthorizationOrdiriComV1alpha1NamespacedRoleList(requestParameters: WatchAuthorizationOrdiriComV1alpha1NamespacedRoleListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchAuthorizationOrdiriComV1alpha1NamespacedRoleListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch changes to an object of kind ServiceAccount. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchAuthorizationOrdiriComV1alpha1NamespacedServiceAccountRaw(requestParameters: WatchAuthorizationOrdiriComV1alpha1NamespacedServiceAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchAuthorizationOrdiriComV1alpha1NamespacedServiceAccount.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchAuthorizationOrdiriComV1alpha1NamespacedServiceAccount.');
        }

        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/authorization.ordiri.com/v1alpha1/watch/namespaces/{namespace}/serviceaccounts/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind ServiceAccount. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchAuthorizationOrdiriComV1alpha1NamespacedServiceAccount(requestParameters: WatchAuthorizationOrdiriComV1alpha1NamespacedServiceAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchAuthorizationOrdiriComV1alpha1NamespacedServiceAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch individual changes to a list of ServiceAccount. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAuthorizationOrdiriComV1alpha1NamespacedServiceAccountListRaw(requestParameters: WatchAuthorizationOrdiriComV1alpha1NamespacedServiceAccountListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchAuthorizationOrdiriComV1alpha1NamespacedServiceAccountList.');
        }

        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/authorization.ordiri.com/v1alpha1/watch/namespaces/{namespace}/serviceaccounts`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of ServiceAccount. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAuthorizationOrdiriComV1alpha1NamespacedServiceAccountList(requestParameters: WatchAuthorizationOrdiriComV1alpha1NamespacedServiceAccountListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchAuthorizationOrdiriComV1alpha1NamespacedServiceAccountListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch individual changes to a list of RoleBinding. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAuthorizationOrdiriComV1alpha1RoleBindingListForAllNamespacesRaw(requestParameters: WatchAuthorizationOrdiriComV1alpha1RoleBindingListForAllNamespacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/authorization.ordiri.com/v1alpha1/watch/rolebindings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of RoleBinding. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAuthorizationOrdiriComV1alpha1RoleBindingListForAllNamespaces(requestParameters: WatchAuthorizationOrdiriComV1alpha1RoleBindingListForAllNamespacesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchAuthorizationOrdiriComV1alpha1RoleBindingListForAllNamespacesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch individual changes to a list of Role. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAuthorizationOrdiriComV1alpha1RoleListForAllNamespacesRaw(requestParameters: WatchAuthorizationOrdiriComV1alpha1RoleListForAllNamespacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/authorization.ordiri.com/v1alpha1/watch/roles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of Role. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAuthorizationOrdiriComV1alpha1RoleListForAllNamespaces(requestParameters: WatchAuthorizationOrdiriComV1alpha1RoleListForAllNamespacesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchAuthorizationOrdiriComV1alpha1RoleListForAllNamespacesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch individual changes to a list of ServiceAccount. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAuthorizationOrdiriComV1alpha1ServiceAccountListForAllNamespacesRaw(requestParameters: WatchAuthorizationOrdiriComV1alpha1ServiceAccountListForAllNamespacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/authorization.ordiri.com/v1alpha1/watch/serviceaccounts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of ServiceAccount. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAuthorizationOrdiriComV1alpha1ServiceAccountListForAllNamespaces(requestParameters: WatchAuthorizationOrdiriComV1alpha1ServiceAccountListForAllNamespacesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchAuthorizationOrdiriComV1alpha1ServiceAccountListForAllNamespacesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
