/* tslint:disable */
/* eslint-disable */
/**
 * openapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1DhcpConfiguration } from './ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1DhcpConfiguration';
import {
    ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1DhcpConfigurationFromJSON,
    ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1DhcpConfigurationFromJSONTyped,
    ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1DhcpConfigurationToJSON,
} from './ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1DhcpConfiguration';
import type { ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1NetworkSelector } from './ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1NetworkSelector';
import {
    ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1NetworkSelectorFromJSON,
    ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1NetworkSelectorFromJSONTyped,
    ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1NetworkSelectorToJSON,
} from './ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1NetworkSelector';
import type { ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteTableSelector } from './ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteTableSelector';
import {
    ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteTableSelectorFromJSON,
    ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteTableSelectorFromJSONTyped,
    ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteTableSelectorToJSON,
} from './ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteTableSelector';

/**
 * SubnetSpec defines the desired state of Subnet
 * @export
 * @interface ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1SubnetSpec
 */
export interface ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1SubnetSpec {
    /**
     * 
     * @type {string}
     * @memberof ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1SubnetSpec
     */
    cidr: string;
    /**
     * 
     * @type {ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1DhcpConfiguration}
     * @memberof ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1SubnetSpec
     */
    dhcp: ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1DhcpConfiguration;
    /**
     * 
     * @type {ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1NetworkSelector}
     * @memberof ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1SubnetSpec
     */
    network: ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1NetworkSelector;
    /**
     * 
     * @type {Array<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteTableSelector>}
     * @memberof ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1SubnetSpec
     */
    routeTables: Array<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteTableSelector>;
}

/**
 * Check if a given object implements the ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1SubnetSpec interface.
 */
export function instanceOfComGithubOrdiriOrdiriPkgApisNetworkV1alpha1SubnetSpec(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "cidr" in value;
    isInstance = isInstance && "dhcp" in value;
    isInstance = isInstance && "network" in value;
    isInstance = isInstance && "routeTables" in value;

    return isInstance;
}

export function ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1SubnetSpecFromJSON(json: any): ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1SubnetSpec {
    return ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1SubnetSpecFromJSONTyped(json, false);
}

export function ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1SubnetSpecFromJSONTyped(json: any, ignoreDiscriminator: boolean): ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1SubnetSpec {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'cidr': json['cidr'],
        'dhcp': ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1DhcpConfigurationFromJSON(json['dhcp']),
        'network': ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1NetworkSelectorFromJSON(json['network']),
        'routeTables': ((json['routeTables'] as Array<any>).map(ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteTableSelectorFromJSON)),
    };
}

export function ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1SubnetSpecToJSON(value?: ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1SubnetSpec | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'cidr': value.cidr,
        'dhcp': ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1DhcpConfigurationToJSON(value.dhcp),
        'network': ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1NetworkSelectorToJSON(value.network),
        'routeTables': ((value.routeTables as Array<any>).map(ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteTableSelectorToJSON)),
    };
}

