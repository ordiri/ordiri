/* tslint:disable */
/* eslint-disable */
/**
 * openapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineNetworkInterfaceStatus } from './ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineNetworkInterfaceStatus';
import {
    ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineNetworkInterfaceStatusFromJSON,
    ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineNetworkInterfaceStatusFromJSONTyped,
    ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineNetworkInterfaceStatusToJSON,
} from './ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineNetworkInterfaceStatus';
import type { ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineVolumeStatus } from './ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineVolumeStatus';
import {
    ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineVolumeStatusFromJSON,
    ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineVolumeStatusFromJSONTyped,
    ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineVolumeStatusToJSON,
} from './ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineVolumeStatus';
import type { IoK8sApimachineryPkgApisMetaV1Condition } from './IoK8sApimachineryPkgApisMetaV1Condition';
import {
    IoK8sApimachineryPkgApisMetaV1ConditionFromJSON,
    IoK8sApimachineryPkgApisMetaV1ConditionFromJSONTyped,
    IoK8sApimachineryPkgApisMetaV1ConditionToJSON,
} from './IoK8sApimachineryPkgApisMetaV1Condition';

/**
 * VirtualMachineStatus defines the observed state of VirtualMachine
 * @export
 * @interface ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineStatus
 */
export interface ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineStatus {
    /**
     * Represents the observations of a foo's current state. Known .status.conditions.type are: "AssignedRole", "Progressing", and "Degraded"
     * @type {Array<IoK8sApimachineryPkgApisMetaV1Condition>}
     * @memberof ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineStatus
     */
    conditions?: Array<IoK8sApimachineryPkgApisMetaV1Condition>;
    /**
     * Volumes is all the volumes which are allocated to this virtual machine
     * @type {Array<ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineVolumeStatus>}
     * @memberof ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineStatus
     */
    disks?: Array<ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineVolumeStatus>;
    /**
     * NetworkInterfaces connected to a virtual machine
     * @type {Array<ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineNetworkInterfaceStatus>}
     * @memberof ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineStatus
     */
    networkInterfaces?: Array<ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineNetworkInterfaceStatus>;
    /**
     * The generation observed by the deployment controller.
     * @type {number}
     * @memberof ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineStatus
     */
    observedGeneration?: number;
    /**
     * VncPort contains the port number where the VNC server listens for this VM
     * @type {number}
     * @memberof ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineStatus
     */
    vncPort: number;
}

/**
 * Check if a given object implements the ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineStatus interface.
 */
export function instanceOfComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineStatus(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "vncPort" in value;

    return isInstance;
}

export function ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineStatusFromJSON(json: any): ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineStatus {
    return ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineStatusFromJSONTyped(json, false);
}

export function ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineStatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineStatus {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'conditions': !exists(json, 'conditions') ? undefined : ((json['conditions'] as Array<any>).map(IoK8sApimachineryPkgApisMetaV1ConditionFromJSON)),
        'disks': !exists(json, 'disks') ? undefined : ((json['disks'] as Array<any>).map(ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineVolumeStatusFromJSON)),
        'networkInterfaces': !exists(json, 'networkInterfaces') ? undefined : ((json['networkInterfaces'] as Array<any>).map(ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineNetworkInterfaceStatusFromJSON)),
        'observedGeneration': !exists(json, 'observedGeneration') ? undefined : json['observedGeneration'],
        'vncPort': json['vncPort'],
    };
}

export function ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineStatusToJSON(value?: ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineStatus | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'conditions': value.conditions === undefined ? undefined : ((value.conditions as Array<any>).map(IoK8sApimachineryPkgApisMetaV1ConditionToJSON)),
        'disks': value.disks === undefined ? undefined : ((value.disks as Array<any>).map(ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineVolumeStatusToJSON)),
        'networkInterfaces': value.networkInterfaces === undefined ? undefined : ((value.networkInterfaces as Array<any>).map(ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineNetworkInterfaceStatusToJSON)),
        'observedGeneration': value.observedGeneration,
        'vncPort': value.vncPort,
    };
}

