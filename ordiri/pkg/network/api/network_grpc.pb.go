// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: network.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NetworkdClient is the client API for Networkd service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkdClient interface {
	// Creates a logical network on this node
	AddNetwork(ctx context.Context, in *AddNetworkRequest, opts ...grpc.CallOption) (*AddNetworkResponse, error)
	// Remove a logical network from this node
	DeleteNetwork(ctx context.Context, in *DeleteNetworkRequest, opts ...grpc.CallOption) (*DeleteNetworkResponse, error)
	// Add a subnet to a new or existing network
	AddSubnet(ctx context.Context, in *AddSubnetRequest, opts ...grpc.CallOption) (*AddSubnetResponse, error)
	// Delete a subnet from a network
	DeleteSubnet(ctx context.Context, in *DeleteSubnetRequest, opts ...grpc.CallOption) (*DeleteSubnetResponse, error)
	// Add a subnet to a new or existing network
	AddNetworkInterface(ctx context.Context, in *AddNetworkInterfaceRequest, opts ...grpc.CallOption) (*AddNetworkInterfaceResponse, error)
	// Configure an interface on the active node
	AttachNetworkInterface(ctx context.Context, in *AttachNetworkInterfaceRequest, opts ...grpc.CallOption) (*AttachNetworkInterfaceResponse, error)
	// Configure an interface on active node
	DetachNetworkInterface(ctx context.Context, in *DetachNetworkInterfaceRequest, opts ...grpc.CallOption) (*DetachNetworkInterfaceResponse, error)
	// Delete a subnet from a network
	DeleteNetworkInterface(ctx context.Context, in *DeleteNetworkInterfaceRequest, opts ...grpc.CallOption) (*DeleteNetworkInterfaceResponse, error)
}

type networkdClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkdClient(cc grpc.ClientConnInterface) NetworkdClient {
	return &networkdClient{cc}
}

func (c *networkdClient) AddNetwork(ctx context.Context, in *AddNetworkRequest, opts ...grpc.CallOption) (*AddNetworkResponse, error) {
	out := new(AddNetworkResponse)
	err := c.cc.Invoke(ctx, "/api.Networkd/AddNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkdClient) DeleteNetwork(ctx context.Context, in *DeleteNetworkRequest, opts ...grpc.CallOption) (*DeleteNetworkResponse, error) {
	out := new(DeleteNetworkResponse)
	err := c.cc.Invoke(ctx, "/api.Networkd/DeleteNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkdClient) AddSubnet(ctx context.Context, in *AddSubnetRequest, opts ...grpc.CallOption) (*AddSubnetResponse, error) {
	out := new(AddSubnetResponse)
	err := c.cc.Invoke(ctx, "/api.Networkd/AddSubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkdClient) DeleteSubnet(ctx context.Context, in *DeleteSubnetRequest, opts ...grpc.CallOption) (*DeleteSubnetResponse, error) {
	out := new(DeleteSubnetResponse)
	err := c.cc.Invoke(ctx, "/api.Networkd/DeleteSubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkdClient) AddNetworkInterface(ctx context.Context, in *AddNetworkInterfaceRequest, opts ...grpc.CallOption) (*AddNetworkInterfaceResponse, error) {
	out := new(AddNetworkInterfaceResponse)
	err := c.cc.Invoke(ctx, "/api.Networkd/AddNetworkInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkdClient) AttachNetworkInterface(ctx context.Context, in *AttachNetworkInterfaceRequest, opts ...grpc.CallOption) (*AttachNetworkInterfaceResponse, error) {
	out := new(AttachNetworkInterfaceResponse)
	err := c.cc.Invoke(ctx, "/api.Networkd/AttachNetworkInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkdClient) DetachNetworkInterface(ctx context.Context, in *DetachNetworkInterfaceRequest, opts ...grpc.CallOption) (*DetachNetworkInterfaceResponse, error) {
	out := new(DetachNetworkInterfaceResponse)
	err := c.cc.Invoke(ctx, "/api.Networkd/DetachNetworkInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkdClient) DeleteNetworkInterface(ctx context.Context, in *DeleteNetworkInterfaceRequest, opts ...grpc.CallOption) (*DeleteNetworkInterfaceResponse, error) {
	out := new(DeleteNetworkInterfaceResponse)
	err := c.cc.Invoke(ctx, "/api.Networkd/DeleteNetworkInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkdServer is the server API for Networkd service.
// All implementations must embed UnimplementedNetworkdServer
// for forward compatibility
type NetworkdServer interface {
	// Creates a logical network on this node
	AddNetwork(context.Context, *AddNetworkRequest) (*AddNetworkResponse, error)
	// Remove a logical network from this node
	DeleteNetwork(context.Context, *DeleteNetworkRequest) (*DeleteNetworkResponse, error)
	// Add a subnet to a new or existing network
	AddSubnet(context.Context, *AddSubnetRequest) (*AddSubnetResponse, error)
	// Delete a subnet from a network
	DeleteSubnet(context.Context, *DeleteSubnetRequest) (*DeleteSubnetResponse, error)
	// Add a subnet to a new or existing network
	AddNetworkInterface(context.Context, *AddNetworkInterfaceRequest) (*AddNetworkInterfaceResponse, error)
	// Configure an interface on the active node
	AttachNetworkInterface(context.Context, *AttachNetworkInterfaceRequest) (*AttachNetworkInterfaceResponse, error)
	// Configure an interface on active node
	DetachNetworkInterface(context.Context, *DetachNetworkInterfaceRequest) (*DetachNetworkInterfaceResponse, error)
	// Delete a subnet from a network
	DeleteNetworkInterface(context.Context, *DeleteNetworkInterfaceRequest) (*DeleteNetworkInterfaceResponse, error)
	mustEmbedUnimplementedNetworkdServer()
}

// UnimplementedNetworkdServer must be embedded to have forward compatible implementations.
type UnimplementedNetworkdServer struct {
}

func (UnimplementedNetworkdServer) AddNetwork(context.Context, *AddNetworkRequest) (*AddNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNetwork not implemented")
}
func (UnimplementedNetworkdServer) DeleteNetwork(context.Context, *DeleteNetworkRequest) (*DeleteNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNetwork not implemented")
}
func (UnimplementedNetworkdServer) AddSubnet(context.Context, *AddSubnetRequest) (*AddSubnetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSubnet not implemented")
}
func (UnimplementedNetworkdServer) DeleteSubnet(context.Context, *DeleteSubnetRequest) (*DeleteSubnetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubnet not implemented")
}
func (UnimplementedNetworkdServer) AddNetworkInterface(context.Context, *AddNetworkInterfaceRequest) (*AddNetworkInterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNetworkInterface not implemented")
}
func (UnimplementedNetworkdServer) AttachNetworkInterface(context.Context, *AttachNetworkInterfaceRequest) (*AttachNetworkInterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachNetworkInterface not implemented")
}
func (UnimplementedNetworkdServer) DetachNetworkInterface(context.Context, *DetachNetworkInterfaceRequest) (*DetachNetworkInterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetachNetworkInterface not implemented")
}
func (UnimplementedNetworkdServer) DeleteNetworkInterface(context.Context, *DeleteNetworkInterfaceRequest) (*DeleteNetworkInterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNetworkInterface not implemented")
}
func (UnimplementedNetworkdServer) mustEmbedUnimplementedNetworkdServer() {}

// UnsafeNetworkdServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkdServer will
// result in compilation errors.
type UnsafeNetworkdServer interface {
	mustEmbedUnimplementedNetworkdServer()
}

func RegisterNetworkdServer(s grpc.ServiceRegistrar, srv NetworkdServer) {
	s.RegisterService(&Networkd_ServiceDesc, srv)
}

func _Networkd_AddNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkdServer).AddNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Networkd/AddNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkdServer).AddNetwork(ctx, req.(*AddNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Networkd_DeleteNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkdServer).DeleteNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Networkd/DeleteNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkdServer).DeleteNetwork(ctx, req.(*DeleteNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Networkd_AddSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkdServer).AddSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Networkd/AddSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkdServer).AddSubnet(ctx, req.(*AddSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Networkd_DeleteSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkdServer).DeleteSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Networkd/DeleteSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkdServer).DeleteSubnet(ctx, req.(*DeleteSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Networkd_AddNetworkInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNetworkInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkdServer).AddNetworkInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Networkd/AddNetworkInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkdServer).AddNetworkInterface(ctx, req.(*AddNetworkInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Networkd_AttachNetworkInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachNetworkInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkdServer).AttachNetworkInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Networkd/AttachNetworkInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkdServer).AttachNetworkInterface(ctx, req.(*AttachNetworkInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Networkd_DetachNetworkInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetachNetworkInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkdServer).DetachNetworkInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Networkd/DetachNetworkInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkdServer).DetachNetworkInterface(ctx, req.(*DetachNetworkInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Networkd_DeleteNetworkInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNetworkInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkdServer).DeleteNetworkInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Networkd/DeleteNetworkInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkdServer).DeleteNetworkInterface(ctx, req.(*DeleteNetworkInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Networkd_ServiceDesc is the grpc.ServiceDesc for Networkd service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Networkd_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Networkd",
	HandlerType: (*NetworkdServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNetwork",
			Handler:    _Networkd_AddNetwork_Handler,
		},
		{
			MethodName: "DeleteNetwork",
			Handler:    _Networkd_DeleteNetwork_Handler,
		},
		{
			MethodName: "AddSubnet",
			Handler:    _Networkd_AddSubnet_Handler,
		},
		{
			MethodName: "DeleteSubnet",
			Handler:    _Networkd_DeleteSubnet_Handler,
		},
		{
			MethodName: "AddNetworkInterface",
			Handler:    _Networkd_AddNetworkInterface_Handler,
		},
		{
			MethodName: "AttachNetworkInterface",
			Handler:    _Networkd_AttachNetworkInterface_Handler,
		},
		{
			MethodName: "DetachNetworkInterface",
			Handler:    _Networkd_DetachNetworkInterface_Handler,
		},
		{
			MethodName: "DeleteNetworkInterface",
			Handler:    _Networkd_DeleteNetworkInterface_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "network.proto",
}
