/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.aoeaoeaoeao
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/ordiri/ordiri/pkg/apis/core/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MachineProfileLister helps list MachineProfiles.
// All objects returned here must be treated as read-only.
type MachineProfileLister interface {
	// List lists all MachineProfiles in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MachineProfile, err error)
	// MachineProfiles returns an object that can list and get MachineProfiles.
	MachineProfiles(namespace string) MachineProfileNamespaceLister
	MachineProfileListerExpansion
}

// machineProfileLister implements the MachineProfileLister interface.
type machineProfileLister struct {
	indexer cache.Indexer
}

// NewMachineProfileLister returns a new MachineProfileLister.
func NewMachineProfileLister(indexer cache.Indexer) MachineProfileLister {
	return &machineProfileLister{indexer: indexer}
}

// List lists all MachineProfiles in the indexer.
func (s *machineProfileLister) List(selector labels.Selector) (ret []*v1alpha1.MachineProfile, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MachineProfile))
	})
	return ret, err
}

// MachineProfiles returns an object that can list and get MachineProfiles.
func (s *machineProfileLister) MachineProfiles(namespace string) MachineProfileNamespaceLister {
	return machineProfileNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MachineProfileNamespaceLister helps list and get MachineProfiles.
// All objects returned here must be treated as read-only.
type MachineProfileNamespaceLister interface {
	// List lists all MachineProfiles in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MachineProfile, err error)
	// Get retrieves the MachineProfile from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.MachineProfile, error)
	MachineProfileNamespaceListerExpansion
}

// machineProfileNamespaceLister implements the MachineProfileNamespaceLister
// interface.
type machineProfileNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MachineProfiles in the indexer for a given namespace.
func (s machineProfileNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MachineProfile, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MachineProfile))
	})
	return ret, err
}

// Get retrieves the MachineProfile from the indexer for a given namespace and name.
func (s machineProfileNamespaceLister) Get(name string) (*v1alpha1.MachineProfile, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("machineprofile"), name)
	}
	return obj.(*v1alpha1.MachineProfile), nil
}
