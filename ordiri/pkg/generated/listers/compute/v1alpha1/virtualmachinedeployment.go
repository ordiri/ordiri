/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.aoeaoeaoeao
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/ordiri/ordiri/pkg/apis/compute/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VirtualMachineDeploymentLister helps list VirtualMachineDeployments.
// All objects returned here must be treated as read-only.
type VirtualMachineDeploymentLister interface {
	// List lists all VirtualMachineDeployments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VirtualMachineDeployment, err error)
	// VirtualMachineDeployments returns an object that can list and get VirtualMachineDeployments.
	VirtualMachineDeployments(namespace string) VirtualMachineDeploymentNamespaceLister
	VirtualMachineDeploymentListerExpansion
}

// virtualMachineDeploymentLister implements the VirtualMachineDeploymentLister interface.
type virtualMachineDeploymentLister struct {
	indexer cache.Indexer
}

// NewVirtualMachineDeploymentLister returns a new VirtualMachineDeploymentLister.
func NewVirtualMachineDeploymentLister(indexer cache.Indexer) VirtualMachineDeploymentLister {
	return &virtualMachineDeploymentLister{indexer: indexer}
}

// List lists all VirtualMachineDeployments in the indexer.
func (s *virtualMachineDeploymentLister) List(selector labels.Selector) (ret []*v1alpha1.VirtualMachineDeployment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VirtualMachineDeployment))
	})
	return ret, err
}

// VirtualMachineDeployments returns an object that can list and get VirtualMachineDeployments.
func (s *virtualMachineDeploymentLister) VirtualMachineDeployments(namespace string) VirtualMachineDeploymentNamespaceLister {
	return virtualMachineDeploymentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VirtualMachineDeploymentNamespaceLister helps list and get VirtualMachineDeployments.
// All objects returned here must be treated as read-only.
type VirtualMachineDeploymentNamespaceLister interface {
	// List lists all VirtualMachineDeployments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VirtualMachineDeployment, err error)
	// Get retrieves the VirtualMachineDeployment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VirtualMachineDeployment, error)
	VirtualMachineDeploymentNamespaceListerExpansion
}

// virtualMachineDeploymentNamespaceLister implements the VirtualMachineDeploymentNamespaceLister
// interface.
type virtualMachineDeploymentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VirtualMachineDeployments in the indexer for a given namespace.
func (s virtualMachineDeploymentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VirtualMachineDeployment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VirtualMachineDeployment))
	})
	return ret, err
}

// Get retrieves the VirtualMachineDeployment from the indexer for a given namespace and name.
func (s virtualMachineDeploymentNamespaceLister) Get(name string) (*v1alpha1.VirtualMachineDeployment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("virtualmachinedeployment"), name)
	}
	return obj.(*v1alpha1.VirtualMachineDeployment), nil
}
