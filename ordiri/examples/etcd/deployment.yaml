apiVersion: compute.ordiri.com/v1alpha1
kind: VirtualMachineDeployment
metadata:
  name: etcd
spec:
  replicas: 3
  template:
    metadata:
      creationTimestamp: null
    spec:
      UserData: 
        #!/bin/bash
        export PATH=$PATH:/usr/local/bin
        
        cd $(mktemp -d)
        CLUSTER_PORT=2380
        CLIENT_PORT=2379
        apt-get update -y
        apt-get install -y wget curl

        ETCD_VER=v3.4.20

        GOOGLE_URL=https://storage.googleapis.com/etcd
        DOWNLOAD_URL=${GOOGLE_URL}

        curl -L ${DOWNLOAD_URL}/${ETCD_VER}/etcd-${ETCD_VER}-linux-amd64.tar.gz -o etcd-${ETCD_VER}-linux-amd64.tar.gz
        tar xzvf etcd-${ETCD_VER}-linux-amd64.tar.gz -C etcd-download-test --strip-components=1
        rm -f etcd-${ETCD_VER}-linux-amd64.tar.gz

        etcd-download-test/etcd --version
        etcd-download-test/etcdctl version
        cp etcd-download-test/{etcd,etcdctl} /usr/local/bin/.

        local_ip=$(curl -XGET http://169.254.169.254/latest/meta-data/local-ipv4)
        local_hostname=$(curl -XGET http://169.254.169.254/latest/meta-data/local-hostname)

        peers=""
        for i in $(seq 0 2); do 
          hn="etcd-${i}"
          ip=$(dig +short "$hn")
          if [[ -n "${ip}" ]]; then
            if [[ -n "${peers}" ]]; then
              peers="${peers},"
            fi
            
            peers="${peers}${hn}=https://${ip}:${CLUSTER_PORT}"
          fi
        done

        etcd --name ${local_hostname} --initial-advertise-peer-urls https://${local_ip}:${CLUSTER_PORT} \
          --listen-peer-urls https://${local_ip}:${CLUSTER_PORT} \
          --listen-client-urls https://${local_ip}:${CLIENT_PORT},https://127.0.0.1:${CLIENT_PORT} \
          --advertise-client-urls https://${local_ip}:${CLIENT_PORT} \
          --initial-cluster-token etcd-cluster-1 \
          --initial-cluster etcd=${peers} \
          --initial-cluster-state new \
          --auto-tls \
          --peer-auto-tls
      bootDevices:
      - hd
      - network
      networkInterfaces:
      - mac: ""
        network: kubevms
        subnet: kubevms-workers
      node: ""
      role: physical
      state: Running
      volumes:
      - device: vda
        hostLocal:
          poolName: tenant1
          size: 30Gi
          volName: root
        name: root