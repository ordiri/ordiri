// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/netplot/v1/netplot.proto

package netplotv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/ordiri/ordiri-netplot/gen/proto/netplot/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// NetplotServerServiceName is the fully-qualified name of the NetplotServerService service.
	NetplotServerServiceName = "netplot.v1.NetplotServerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NetplotServerServiceStreamPacketProcedure is the fully-qualified name of the
	// NetplotServerService's StreamPacket RPC.
	NetplotServerServiceStreamPacketProcedure = "/netplot.v1.NetplotServerService/StreamPacket"
	// NetplotServerServiceConfigureInterfaceProcedure is the fully-qualified name of the
	// NetplotServerService's ConfigureInterface RPC.
	NetplotServerServiceConfigureInterfaceProcedure = "/netplot.v1.NetplotServerService/ConfigureInterface"
)

// NetplotServerServiceClient is a client for the netplot.v1.NetplotServerService service.
type NetplotServerServiceClient interface {
	StreamPacket(context.Context) *connect_go.BidiStreamForClient[v1.StreamPacketRequest, v1.StreamPacketResponse]
	ConfigureInterface(context.Context, *connect_go.Request[v1.ConfigureInterfaceRequest]) (*connect_go.Response[v1.ConfigureInterfaceResponse], error)
}

// NewNetplotServerServiceClient constructs a client for the netplot.v1.NetplotServerService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNetplotServerServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) NetplotServerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &netplotServerServiceClient{
		streamPacket: connect_go.NewClient[v1.StreamPacketRequest, v1.StreamPacketResponse](
			httpClient,
			baseURL+NetplotServerServiceStreamPacketProcedure,
			opts...,
		),
		configureInterface: connect_go.NewClient[v1.ConfigureInterfaceRequest, v1.ConfigureInterfaceResponse](
			httpClient,
			baseURL+NetplotServerServiceConfigureInterfaceProcedure,
			opts...,
		),
	}
}

// netplotServerServiceClient implements NetplotServerServiceClient.
type netplotServerServiceClient struct {
	streamPacket       *connect_go.Client[v1.StreamPacketRequest, v1.StreamPacketResponse]
	configureInterface *connect_go.Client[v1.ConfigureInterfaceRequest, v1.ConfigureInterfaceResponse]
}

// StreamPacket calls netplot.v1.NetplotServerService.StreamPacket.
func (c *netplotServerServiceClient) StreamPacket(ctx context.Context) *connect_go.BidiStreamForClient[v1.StreamPacketRequest, v1.StreamPacketResponse] {
	return c.streamPacket.CallBidiStream(ctx)
}

// ConfigureInterface calls netplot.v1.NetplotServerService.ConfigureInterface.
func (c *netplotServerServiceClient) ConfigureInterface(ctx context.Context, req *connect_go.Request[v1.ConfigureInterfaceRequest]) (*connect_go.Response[v1.ConfigureInterfaceResponse], error) {
	return c.configureInterface.CallUnary(ctx, req)
}

// NetplotServerServiceHandler is an implementation of the netplot.v1.NetplotServerService service.
type NetplotServerServiceHandler interface {
	StreamPacket(context.Context, *connect_go.BidiStream[v1.StreamPacketRequest, v1.StreamPacketResponse]) error
	ConfigureInterface(context.Context, *connect_go.Request[v1.ConfigureInterfaceRequest]) (*connect_go.Response[v1.ConfigureInterfaceResponse], error)
}

// NewNetplotServerServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNetplotServerServiceHandler(svc NetplotServerServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	netplotServerServiceStreamPacketHandler := connect_go.NewBidiStreamHandler(
		NetplotServerServiceStreamPacketProcedure,
		svc.StreamPacket,
		opts...,
	)
	netplotServerServiceConfigureInterfaceHandler := connect_go.NewUnaryHandler(
		NetplotServerServiceConfigureInterfaceProcedure,
		svc.ConfigureInterface,
		opts...,
	)
	return "/netplot.v1.NetplotServerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NetplotServerServiceStreamPacketProcedure:
			netplotServerServiceStreamPacketHandler.ServeHTTP(w, r)
		case NetplotServerServiceConfigureInterfaceProcedure:
			netplotServerServiceConfigureInterfaceHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNetplotServerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNetplotServerServiceHandler struct{}

func (UnimplementedNetplotServerServiceHandler) StreamPacket(context.Context, *connect_go.BidiStream[v1.StreamPacketRequest, v1.StreamPacketResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("netplot.v1.NetplotServerService.StreamPacket is not implemented"))
}

func (UnimplementedNetplotServerServiceHandler) ConfigureInterface(context.Context, *connect_go.Request[v1.ConfigureInterfaceRequest]) (*connect_go.Response[v1.ConfigureInterfaceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("netplot.v1.NetplotServerService.ConfigureInterface is not implemented"))
}
