/* tslint:disable */
/* eslint-disable */
/**
 * openapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  V1DeleteOptions,
} from '../models';
import {
    V1DeleteOptionsFromJSON,
    V1DeleteOptionsToJSON,
} from '../models';

export interface CreateClusterCustomObjectRequest {
    group: string;
    version: string;
    plural: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface CreateNamespacedCustomObjectRequest {
    group: string;
    version: string;
    namespace: string;
    plural: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface DeleteClusterCustomObjectRequest {
    group: string;
    version: string;
    plural: string;
    name: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    dryRun?: string;
    body?: V1DeleteOptions;
}

export interface DeleteCollectionClusterCustomObjectRequest {
    group: string;
    version: string;
    plural: string;
    pretty?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    dryRun?: string;
    body?: V1DeleteOptions;
}

export interface DeleteCollectionNamespacedCustomObjectRequest {
    group: string;
    version: string;
    namespace: string;
    plural: string;
    pretty?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    dryRun?: string;
    body?: V1DeleteOptions;
}

export interface DeleteNamespacedCustomObjectRequest {
    group: string;
    version: string;
    namespace: string;
    plural: string;
    name: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    dryRun?: string;
    body?: V1DeleteOptions;
}

export interface GetClusterCustomObjectRequest {
    group: string;
    version: string;
    plural: string;
    name: string;
}

export interface GetClusterCustomObjectScaleRequest {
    group: string;
    version: string;
    plural: string;
    name: string;
}

export interface GetClusterCustomObjectStatusRequest {
    group: string;
    version: string;
    plural: string;
    name: string;
}

export interface GetNamespacedCustomObjectRequest {
    group: string;
    version: string;
    namespace: string;
    plural: string;
    name: string;
}

export interface GetNamespacedCustomObjectScaleRequest {
    group: string;
    version: string;
    namespace: string;
    plural: string;
    name: string;
}

export interface GetNamespacedCustomObjectStatusRequest {
    group: string;
    version: string;
    namespace: string;
    plural: string;
    name: string;
}

export interface ListClusterCustomObjectRequest {
    group: string;
    version: string;
    plural: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListNamespacedCustomObjectRequest {
    group: string;
    version: string;
    namespace: string;
    plural: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface PatchClusterCustomObjectRequest {
    group: string;
    version: string;
    plural: string;
    name: string;
    body: object;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchClusterCustomObjectScaleRequest {
    group: string;
    version: string;
    plural: string;
    name: string;
    body: object;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchClusterCustomObjectStatusRequest {
    group: string;
    version: string;
    plural: string;
    name: string;
    body: object;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchNamespacedCustomObjectRequest {
    group: string;
    version: string;
    namespace: string;
    plural: string;
    name: string;
    body: object;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchNamespacedCustomObjectScaleRequest {
    group: string;
    version: string;
    namespace: string;
    plural: string;
    name: string;
    body: object;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchNamespacedCustomObjectStatusRequest {
    group: string;
    version: string;
    namespace: string;
    plural: string;
    name: string;
    body: object;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface ReplaceClusterCustomObjectRequest {
    group: string;
    version: string;
    plural: string;
    name: string;
    body: object;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceClusterCustomObjectScaleRequest {
    group: string;
    version: string;
    plural: string;
    name: string;
    body: object;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceClusterCustomObjectStatusRequest {
    group: string;
    version: string;
    plural: string;
    name: string;
    body: object;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceNamespacedCustomObjectRequest {
    group: string;
    version: string;
    namespace: string;
    plural: string;
    name: string;
    body: object;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceNamespacedCustomObjectScaleRequest {
    group: string;
    version: string;
    namespace: string;
    plural: string;
    name: string;
    body: object;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceNamespacedCustomObjectStatusRequest {
    group: string;
    version: string;
    namespace: string;
    plural: string;
    name: string;
    body: object;
    dryRun?: string;
    fieldManager?: string;
}

/**
 * 
 */
export class CustomObjectsApi extends runtime.BaseAPI {

    /**
     * Creates a cluster scoped Custom object
     */
    async createClusterCustomObjectRaw(requestParameters: CreateClusterCustomObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling createClusterCustomObject.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling createClusterCustomObject.');
        }

        if (requestParameters.plural === null || requestParameters.plural === undefined) {
            throw new runtime.RequiredError('plural','Required parameter requestParameters.plural was null or undefined when calling createClusterCustomObject.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createClusterCustomObject.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/{group}/{version}/{plural}`.replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"plural"}}`, encodeURIComponent(String(requestParameters.plural))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Creates a cluster scoped Custom object
     */
    async createClusterCustomObject(requestParameters: CreateClusterCustomObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.createClusterCustomObjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a namespace scoped Custom object
     */
    async createNamespacedCustomObjectRaw(requestParameters: CreateNamespacedCustomObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling createNamespacedCustomObject.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling createNamespacedCustomObject.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createNamespacedCustomObject.');
        }

        if (requestParameters.plural === null || requestParameters.plural === undefined) {
            throw new runtime.RequiredError('plural','Required parameter requestParameters.plural was null or undefined when calling createNamespacedCustomObject.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createNamespacedCustomObject.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/{group}/{version}/namespaces/{namespace}/{plural}`.replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"plural"}}`, encodeURIComponent(String(requestParameters.plural))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Creates a namespace scoped Custom object
     */
    async createNamespacedCustomObject(requestParameters: CreateNamespacedCustomObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.createNamespacedCustomObjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes the specified cluster scoped custom object
     */
    async deleteClusterCustomObjectRaw(requestParameters: DeleteClusterCustomObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling deleteClusterCustomObject.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling deleteClusterCustomObject.');
        }

        if (requestParameters.plural === null || requestParameters.plural === undefined) {
            throw new runtime.RequiredError('plural','Required parameter requestParameters.plural was null or undefined when calling deleteClusterCustomObject.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteClusterCustomObject.');
        }

        const queryParameters: any = {};

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/{group}/{version}/{plural}/{name}`.replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"plural"}}`, encodeURIComponent(String(requestParameters.plural))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Deletes the specified cluster scoped custom object
     */
    async deleteClusterCustomObject(requestParameters: DeleteClusterCustomObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteClusterCustomObjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete collection of cluster scoped custom objects
     */
    async deleteCollectionClusterCustomObjectRaw(requestParameters: DeleteCollectionClusterCustomObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling deleteCollectionClusterCustomObject.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling deleteCollectionClusterCustomObject.');
        }

        if (requestParameters.plural === null || requestParameters.plural === undefined) {
            throw new runtime.RequiredError('plural','Required parameter requestParameters.plural was null or undefined when calling deleteCollectionClusterCustomObject.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/{group}/{version}/{plural}`.replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"plural"}}`, encodeURIComponent(String(requestParameters.plural))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete collection of cluster scoped custom objects
     */
    async deleteCollectionClusterCustomObject(requestParameters: DeleteCollectionClusterCustomObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteCollectionClusterCustomObjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete collection of namespace scoped custom objects
     */
    async deleteCollectionNamespacedCustomObjectRaw(requestParameters: DeleteCollectionNamespacedCustomObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling deleteCollectionNamespacedCustomObject.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling deleteCollectionNamespacedCustomObject.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteCollectionNamespacedCustomObject.');
        }

        if (requestParameters.plural === null || requestParameters.plural === undefined) {
            throw new runtime.RequiredError('plural','Required parameter requestParameters.plural was null or undefined when calling deleteCollectionNamespacedCustomObject.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/{group}/{version}/namespaces/{namespace}/{plural}`.replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"plural"}}`, encodeURIComponent(String(requestParameters.plural))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete collection of namespace scoped custom objects
     */
    async deleteCollectionNamespacedCustomObject(requestParameters: DeleteCollectionNamespacedCustomObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteCollectionNamespacedCustomObjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes the specified namespace scoped custom object
     */
    async deleteNamespacedCustomObjectRaw(requestParameters: DeleteNamespacedCustomObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling deleteNamespacedCustomObject.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling deleteNamespacedCustomObject.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteNamespacedCustomObject.');
        }

        if (requestParameters.plural === null || requestParameters.plural === undefined) {
            throw new runtime.RequiredError('plural','Required parameter requestParameters.plural was null or undefined when calling deleteNamespacedCustomObject.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteNamespacedCustomObject.');
        }

        const queryParameters: any = {};

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}`.replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"plural"}}`, encodeURIComponent(String(requestParameters.plural))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Deletes the specified namespace scoped custom object
     */
    async deleteNamespacedCustomObject(requestParameters: DeleteNamespacedCustomObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteNamespacedCustomObjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a cluster scoped custom object
     */
    async getClusterCustomObjectRaw(requestParameters: GetClusterCustomObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling getClusterCustomObject.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling getClusterCustomObject.');
        }

        if (requestParameters.plural === null || requestParameters.plural === undefined) {
            throw new runtime.RequiredError('plural','Required parameter requestParameters.plural was null or undefined when calling getClusterCustomObject.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling getClusterCustomObject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/{group}/{version}/{plural}/{name}`.replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"plural"}}`, encodeURIComponent(String(requestParameters.plural))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns a cluster scoped custom object
     */
    async getClusterCustomObject(requestParameters: GetClusterCustomObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.getClusterCustomObjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read scale of the specified custom object
     */
    async getClusterCustomObjectScaleRaw(requestParameters: GetClusterCustomObjectScaleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling getClusterCustomObjectScale.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling getClusterCustomObjectScale.');
        }

        if (requestParameters.plural === null || requestParameters.plural === undefined) {
            throw new runtime.RequiredError('plural','Required parameter requestParameters.plural was null or undefined when calling getClusterCustomObjectScale.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling getClusterCustomObjectScale.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/{group}/{version}/{plural}/{name}/scale`.replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"plural"}}`, encodeURIComponent(String(requestParameters.plural))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * read scale of the specified custom object
     */
    async getClusterCustomObjectScale(requestParameters: GetClusterCustomObjectScaleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.getClusterCustomObjectScaleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read status of the specified cluster scoped custom object
     */
    async getClusterCustomObjectStatusRaw(requestParameters: GetClusterCustomObjectStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling getClusterCustomObjectStatus.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling getClusterCustomObjectStatus.');
        }

        if (requestParameters.plural === null || requestParameters.plural === undefined) {
            throw new runtime.RequiredError('plural','Required parameter requestParameters.plural was null or undefined when calling getClusterCustomObjectStatus.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling getClusterCustomObjectStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/{group}/{version}/{plural}/{name}/status`.replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"plural"}}`, encodeURIComponent(String(requestParameters.plural))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * read status of the specified cluster scoped custom object
     */
    async getClusterCustomObjectStatus(requestParameters: GetClusterCustomObjectStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.getClusterCustomObjectStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a namespace scoped custom object
     */
    async getNamespacedCustomObjectRaw(requestParameters: GetNamespacedCustomObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling getNamespacedCustomObject.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling getNamespacedCustomObject.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling getNamespacedCustomObject.');
        }

        if (requestParameters.plural === null || requestParameters.plural === undefined) {
            throw new runtime.RequiredError('plural','Required parameter requestParameters.plural was null or undefined when calling getNamespacedCustomObject.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling getNamespacedCustomObject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}`.replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"plural"}}`, encodeURIComponent(String(requestParameters.plural))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns a namespace scoped custom object
     */
    async getNamespacedCustomObject(requestParameters: GetNamespacedCustomObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.getNamespacedCustomObjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read scale of the specified namespace scoped custom object
     */
    async getNamespacedCustomObjectScaleRaw(requestParameters: GetNamespacedCustomObjectScaleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling getNamespacedCustomObjectScale.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling getNamespacedCustomObjectScale.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling getNamespacedCustomObjectScale.');
        }

        if (requestParameters.plural === null || requestParameters.plural === undefined) {
            throw new runtime.RequiredError('plural','Required parameter requestParameters.plural was null or undefined when calling getNamespacedCustomObjectScale.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling getNamespacedCustomObjectScale.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}/scale`.replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"plural"}}`, encodeURIComponent(String(requestParameters.plural))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * read scale of the specified namespace scoped custom object
     */
    async getNamespacedCustomObjectScale(requestParameters: GetNamespacedCustomObjectScaleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.getNamespacedCustomObjectScaleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read status of the specified namespace scoped custom object
     */
    async getNamespacedCustomObjectStatusRaw(requestParameters: GetNamespacedCustomObjectStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling getNamespacedCustomObjectStatus.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling getNamespacedCustomObjectStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling getNamespacedCustomObjectStatus.');
        }

        if (requestParameters.plural === null || requestParameters.plural === undefined) {
            throw new runtime.RequiredError('plural','Required parameter requestParameters.plural was null or undefined when calling getNamespacedCustomObjectStatus.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling getNamespacedCustomObjectStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}/status`.replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"plural"}}`, encodeURIComponent(String(requestParameters.plural))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * read status of the specified namespace scoped custom object
     */
    async getNamespacedCustomObjectStatus(requestParameters: GetNamespacedCustomObjectStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.getNamespacedCustomObjectStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list or watch cluster scoped custom objects
     */
    async listClusterCustomObjectRaw(requestParameters: ListClusterCustomObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling listClusterCustomObject.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling listClusterCustomObject.');
        }

        if (requestParameters.plural === null || requestParameters.plural === undefined) {
            throw new runtime.RequiredError('plural','Required parameter requestParameters.plural was null or undefined when calling listClusterCustomObject.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/{group}/{version}/{plural}`.replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"plural"}}`, encodeURIComponent(String(requestParameters.plural))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * list or watch cluster scoped custom objects
     */
    async listClusterCustomObject(requestParameters: ListClusterCustomObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.listClusterCustomObjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list or watch namespace scoped custom objects
     */
    async listNamespacedCustomObjectRaw(requestParameters: ListNamespacedCustomObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling listNamespacedCustomObject.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling listNamespacedCustomObject.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listNamespacedCustomObject.');
        }

        if (requestParameters.plural === null || requestParameters.plural === undefined) {
            throw new runtime.RequiredError('plural','Required parameter requestParameters.plural was null or undefined when calling listNamespacedCustomObject.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/{group}/{version}/namespaces/{namespace}/{plural}`.replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"plural"}}`, encodeURIComponent(String(requestParameters.plural))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * list or watch namespace scoped custom objects
     */
    async listNamespacedCustomObject(requestParameters: ListNamespacedCustomObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.listNamespacedCustomObjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * patch the specified cluster scoped custom object
     */
    async patchClusterCustomObjectRaw(requestParameters: PatchClusterCustomObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling patchClusterCustomObject.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling patchClusterCustomObject.');
        }

        if (requestParameters.plural === null || requestParameters.plural === undefined) {
            throw new runtime.RequiredError('plural','Required parameter requestParameters.plural was null or undefined when calling patchClusterCustomObject.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchClusterCustomObject.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchClusterCustomObject.');
        }

        const queryParameters: any = {};

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/{group}/{version}/{plural}/{name}`.replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"plural"}}`, encodeURIComponent(String(requestParameters.plural))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * patch the specified cluster scoped custom object
     */
    async patchClusterCustomObject(requestParameters: PatchClusterCustomObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.patchClusterCustomObjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update scale of the specified cluster scoped custom object
     */
    async patchClusterCustomObjectScaleRaw(requestParameters: PatchClusterCustomObjectScaleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling patchClusterCustomObjectScale.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling patchClusterCustomObjectScale.');
        }

        if (requestParameters.plural === null || requestParameters.plural === undefined) {
            throw new runtime.RequiredError('plural','Required parameter requestParameters.plural was null or undefined when calling patchClusterCustomObjectScale.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchClusterCustomObjectScale.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchClusterCustomObjectScale.');
        }

        const queryParameters: any = {};

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/{group}/{version}/{plural}/{name}/scale`.replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"plural"}}`, encodeURIComponent(String(requestParameters.plural))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * partially update scale of the specified cluster scoped custom object
     */
    async patchClusterCustomObjectScale(requestParameters: PatchClusterCustomObjectScaleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.patchClusterCustomObjectScaleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update status of the specified cluster scoped custom object
     */
    async patchClusterCustomObjectStatusRaw(requestParameters: PatchClusterCustomObjectStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling patchClusterCustomObjectStatus.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling patchClusterCustomObjectStatus.');
        }

        if (requestParameters.plural === null || requestParameters.plural === undefined) {
            throw new runtime.RequiredError('plural','Required parameter requestParameters.plural was null or undefined when calling patchClusterCustomObjectStatus.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchClusterCustomObjectStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchClusterCustomObjectStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/{group}/{version}/{plural}/{name}/status`.replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"plural"}}`, encodeURIComponent(String(requestParameters.plural))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * partially update status of the specified cluster scoped custom object
     */
    async patchClusterCustomObjectStatus(requestParameters: PatchClusterCustomObjectStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.patchClusterCustomObjectStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * patch the specified namespace scoped custom object
     */
    async patchNamespacedCustomObjectRaw(requestParameters: PatchNamespacedCustomObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling patchNamespacedCustomObject.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling patchNamespacedCustomObject.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedCustomObject.');
        }

        if (requestParameters.plural === null || requestParameters.plural === undefined) {
            throw new runtime.RequiredError('plural','Required parameter requestParameters.plural was null or undefined when calling patchNamespacedCustomObject.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchNamespacedCustomObject.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchNamespacedCustomObject.');
        }

        const queryParameters: any = {};

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}`.replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"plural"}}`, encodeURIComponent(String(requestParameters.plural))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * patch the specified namespace scoped custom object
     */
    async patchNamespacedCustomObject(requestParameters: PatchNamespacedCustomObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.patchNamespacedCustomObjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update scale of the specified namespace scoped custom object
     */
    async patchNamespacedCustomObjectScaleRaw(requestParameters: PatchNamespacedCustomObjectScaleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling patchNamespacedCustomObjectScale.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling patchNamespacedCustomObjectScale.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedCustomObjectScale.');
        }

        if (requestParameters.plural === null || requestParameters.plural === undefined) {
            throw new runtime.RequiredError('plural','Required parameter requestParameters.plural was null or undefined when calling patchNamespacedCustomObjectScale.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchNamespacedCustomObjectScale.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchNamespacedCustomObjectScale.');
        }

        const queryParameters: any = {};

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}/scale`.replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"plural"}}`, encodeURIComponent(String(requestParameters.plural))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * partially update scale of the specified namespace scoped custom object
     */
    async patchNamespacedCustomObjectScale(requestParameters: PatchNamespacedCustomObjectScaleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.patchNamespacedCustomObjectScaleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update status of the specified namespace scoped custom object
     */
    async patchNamespacedCustomObjectStatusRaw(requestParameters: PatchNamespacedCustomObjectStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling patchNamespacedCustomObjectStatus.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling patchNamespacedCustomObjectStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedCustomObjectStatus.');
        }

        if (requestParameters.plural === null || requestParameters.plural === undefined) {
            throw new runtime.RequiredError('plural','Required parameter requestParameters.plural was null or undefined when calling patchNamespacedCustomObjectStatus.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchNamespacedCustomObjectStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchNamespacedCustomObjectStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}/status`.replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"plural"}}`, encodeURIComponent(String(requestParameters.plural))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * partially update status of the specified namespace scoped custom object
     */
    async patchNamespacedCustomObjectStatus(requestParameters: PatchNamespacedCustomObjectStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.patchNamespacedCustomObjectStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace the specified cluster scoped custom object
     */
    async replaceClusterCustomObjectRaw(requestParameters: ReplaceClusterCustomObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling replaceClusterCustomObject.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling replaceClusterCustomObject.');
        }

        if (requestParameters.plural === null || requestParameters.plural === undefined) {
            throw new runtime.RequiredError('plural','Required parameter requestParameters.plural was null or undefined when calling replaceClusterCustomObject.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceClusterCustomObject.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceClusterCustomObject.');
        }

        const queryParameters: any = {};

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/{group}/{version}/{plural}/{name}`.replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"plural"}}`, encodeURIComponent(String(requestParameters.plural))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * replace the specified cluster scoped custom object
     */
    async replaceClusterCustomObject(requestParameters: ReplaceClusterCustomObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.replaceClusterCustomObjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace scale of the specified cluster scoped custom object
     */
    async replaceClusterCustomObjectScaleRaw(requestParameters: ReplaceClusterCustomObjectScaleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling replaceClusterCustomObjectScale.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling replaceClusterCustomObjectScale.');
        }

        if (requestParameters.plural === null || requestParameters.plural === undefined) {
            throw new runtime.RequiredError('plural','Required parameter requestParameters.plural was null or undefined when calling replaceClusterCustomObjectScale.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceClusterCustomObjectScale.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceClusterCustomObjectScale.');
        }

        const queryParameters: any = {};

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/{group}/{version}/{plural}/{name}/scale`.replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"plural"}}`, encodeURIComponent(String(requestParameters.plural))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * replace scale of the specified cluster scoped custom object
     */
    async replaceClusterCustomObjectScale(requestParameters: ReplaceClusterCustomObjectScaleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.replaceClusterCustomObjectScaleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace status of the cluster scoped specified custom object
     */
    async replaceClusterCustomObjectStatusRaw(requestParameters: ReplaceClusterCustomObjectStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling replaceClusterCustomObjectStatus.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling replaceClusterCustomObjectStatus.');
        }

        if (requestParameters.plural === null || requestParameters.plural === undefined) {
            throw new runtime.RequiredError('plural','Required parameter requestParameters.plural was null or undefined when calling replaceClusterCustomObjectStatus.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceClusterCustomObjectStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceClusterCustomObjectStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/{group}/{version}/{plural}/{name}/status`.replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"plural"}}`, encodeURIComponent(String(requestParameters.plural))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * replace status of the cluster scoped specified custom object
     */
    async replaceClusterCustomObjectStatus(requestParameters: ReplaceClusterCustomObjectStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.replaceClusterCustomObjectStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace the specified namespace scoped custom object
     */
    async replaceNamespacedCustomObjectRaw(requestParameters: ReplaceNamespacedCustomObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling replaceNamespacedCustomObject.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling replaceNamespacedCustomObject.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedCustomObject.');
        }

        if (requestParameters.plural === null || requestParameters.plural === undefined) {
            throw new runtime.RequiredError('plural','Required parameter requestParameters.plural was null or undefined when calling replaceNamespacedCustomObject.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceNamespacedCustomObject.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceNamespacedCustomObject.');
        }

        const queryParameters: any = {};

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}`.replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"plural"}}`, encodeURIComponent(String(requestParameters.plural))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * replace the specified namespace scoped custom object
     */
    async replaceNamespacedCustomObject(requestParameters: ReplaceNamespacedCustomObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.replaceNamespacedCustomObjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace scale of the specified namespace scoped custom object
     */
    async replaceNamespacedCustomObjectScaleRaw(requestParameters: ReplaceNamespacedCustomObjectScaleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling replaceNamespacedCustomObjectScale.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling replaceNamespacedCustomObjectScale.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedCustomObjectScale.');
        }

        if (requestParameters.plural === null || requestParameters.plural === undefined) {
            throw new runtime.RequiredError('plural','Required parameter requestParameters.plural was null or undefined when calling replaceNamespacedCustomObjectScale.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceNamespacedCustomObjectScale.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceNamespacedCustomObjectScale.');
        }

        const queryParameters: any = {};

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}/scale`.replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"plural"}}`, encodeURIComponent(String(requestParameters.plural))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * replace scale of the specified namespace scoped custom object
     */
    async replaceNamespacedCustomObjectScale(requestParameters: ReplaceNamespacedCustomObjectScaleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.replaceNamespacedCustomObjectScaleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace status of the specified namespace scoped custom object
     */
    async replaceNamespacedCustomObjectStatusRaw(requestParameters: ReplaceNamespacedCustomObjectStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling replaceNamespacedCustomObjectStatus.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling replaceNamespacedCustomObjectStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedCustomObjectStatus.');
        }

        if (requestParameters.plural === null || requestParameters.plural === undefined) {
            throw new runtime.RequiredError('plural','Required parameter requestParameters.plural was null or undefined when calling replaceNamespacedCustomObjectStatus.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceNamespacedCustomObjectStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceNamespacedCustomObjectStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}/status`.replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"plural"}}`, encodeURIComponent(String(requestParameters.plural))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * replace status of the specified namespace scoped custom object
     */
    async replaceNamespacedCustomObjectStatus(requestParameters: ReplaceNamespacedCustomObjectStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.replaceNamespacedCustomObjectStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
