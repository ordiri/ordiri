/* tslint:disable */
/* eslint-disable */
/**
 * openapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachine,
  ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineDeployment,
  ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineDeploymentList,
  ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineList,
  ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineReplicaSet,
  ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineReplicaSetList,
  V1APIResourceList,
  V1DeleteOptions,
  V1Status,
} from '../models';
import {
    ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineFromJSON,
    ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineToJSON,
    ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineDeploymentFromJSON,
    ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineDeploymentToJSON,
    ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineDeploymentListFromJSON,
    ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineDeploymentListToJSON,
    ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineListFromJSON,
    ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineListToJSON,
    ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineReplicaSetFromJSON,
    ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineReplicaSetToJSON,
    ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineReplicaSetListFromJSON,
    ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineReplicaSetListToJSON,
    V1APIResourceListFromJSON,
    V1APIResourceListToJSON,
    V1DeleteOptionsFromJSON,
    V1DeleteOptionsToJSON,
    V1StatusFromJSON,
    V1StatusToJSON,
} from '../models';

export interface CreateVirtualMachineRequest {
    body: ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachine;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface CreateVirtualMachineDeploymentRequest {
    body: ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineDeployment;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface CreateVirtualMachineReplicaSetRequest {
    body: ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineReplicaSet;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface DeleteCollectionVirtualMachineRequest {
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    body?: V1DeleteOptions;
}

export interface DeleteCollectionVirtualMachineDeploymentRequest {
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    body?: V1DeleteOptions;
}

export interface DeleteCollectionVirtualMachineReplicaSetRequest {
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    body?: V1DeleteOptions;
}

export interface DeleteVirtualMachineRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: V1DeleteOptions;
}

export interface DeleteVirtualMachineDeploymentRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: V1DeleteOptions;
}

export interface DeleteVirtualMachineReplicaSetRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: V1DeleteOptions;
}

export interface ListVirtualMachineRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListVirtualMachineDeploymentRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListVirtualMachineReplicaSetRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface PatchVirtualMachineRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchVirtualMachineDeploymentRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchVirtualMachineDeploymentStatusRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchVirtualMachineReplicaSetRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchVirtualMachineReplicaSetStatusRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchVirtualMachineStatusRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface ReadVirtualMachineRequest {
    name: string;
    pretty?: string;
}

export interface ReadVirtualMachineDeploymentRequest {
    name: string;
    pretty?: string;
}

export interface ReadVirtualMachineDeploymentStatusRequest {
    name: string;
    pretty?: string;
}

export interface ReadVirtualMachineReplicaSetRequest {
    name: string;
    pretty?: string;
}

export interface ReadVirtualMachineReplicaSetStatusRequest {
    name: string;
    pretty?: string;
}

export interface ReadVirtualMachineStatusRequest {
    name: string;
    pretty?: string;
}

export interface ReplaceVirtualMachineRequest {
    name: string;
    body: ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachine;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceVirtualMachineDeploymentRequest {
    name: string;
    body: ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineDeployment;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceVirtualMachineDeploymentStatusRequest {
    name: string;
    body: ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineDeployment;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceVirtualMachineReplicaSetRequest {
    name: string;
    body: ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineReplicaSet;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceVirtualMachineReplicaSetStatusRequest {
    name: string;
    body: ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineReplicaSet;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceVirtualMachineStatusRequest {
    name: string;
    body: ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachine;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

/**
 * 
 */
export class ComputeOrdiriComV1alpha1Api extends runtime.BaseAPI {

    /**
     * create a VirtualMachine
     */
    async createVirtualMachineRaw(requestParameters: CreateVirtualMachineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachine>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createVirtualMachine.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/compute.ordiri.com/v1alpha1/virtualmachines`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineFromJSON(jsonValue));
    }

    /**
     * create a VirtualMachine
     */
    async createVirtualMachine(requestParameters: CreateVirtualMachineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachine> {
        const response = await this.createVirtualMachineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create a VirtualMachineDeployment
     */
    async createVirtualMachineDeploymentRaw(requestParameters: CreateVirtualMachineDeploymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineDeployment>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createVirtualMachineDeployment.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/compute.ordiri.com/v1alpha1/virtualmachinedeployments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineDeploymentToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineDeploymentFromJSON(jsonValue));
    }

    /**
     * create a VirtualMachineDeployment
     */
    async createVirtualMachineDeployment(requestParameters: CreateVirtualMachineDeploymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineDeployment> {
        const response = await this.createVirtualMachineDeploymentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create a VirtualMachineReplicaSet
     */
    async createVirtualMachineReplicaSetRaw(requestParameters: CreateVirtualMachineReplicaSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineReplicaSet>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createVirtualMachineReplicaSet.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/compute.ordiri.com/v1alpha1/virtualmachinereplicasets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineReplicaSetToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineReplicaSetFromJSON(jsonValue));
    }

    /**
     * create a VirtualMachineReplicaSet
     */
    async createVirtualMachineReplicaSet(requestParameters: CreateVirtualMachineReplicaSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineReplicaSet> {
        const response = await this.createVirtualMachineReplicaSetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete collection of VirtualMachine
     */
    async deleteCollectionVirtualMachineRaw(requestParameters: DeleteCollectionVirtualMachineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Status>> {
        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/compute.ordiri.com/v1alpha1/virtualmachines`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of VirtualMachine
     */
    async deleteCollectionVirtualMachine(requestParameters: DeleteCollectionVirtualMachineRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Status> {
        const response = await this.deleteCollectionVirtualMachineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete collection of VirtualMachineDeployment
     */
    async deleteCollectionVirtualMachineDeploymentRaw(requestParameters: DeleteCollectionVirtualMachineDeploymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Status>> {
        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/compute.ordiri.com/v1alpha1/virtualmachinedeployments`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of VirtualMachineDeployment
     */
    async deleteCollectionVirtualMachineDeployment(requestParameters: DeleteCollectionVirtualMachineDeploymentRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Status> {
        const response = await this.deleteCollectionVirtualMachineDeploymentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete collection of VirtualMachineReplicaSet
     */
    async deleteCollectionVirtualMachineReplicaSetRaw(requestParameters: DeleteCollectionVirtualMachineReplicaSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Status>> {
        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/compute.ordiri.com/v1alpha1/virtualmachinereplicasets`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of VirtualMachineReplicaSet
     */
    async deleteCollectionVirtualMachineReplicaSet(requestParameters: DeleteCollectionVirtualMachineReplicaSetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Status> {
        const response = await this.deleteCollectionVirtualMachineReplicaSetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a VirtualMachine
     */
    async deleteVirtualMachineRaw(requestParameters: DeleteVirtualMachineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteVirtualMachine.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/compute.ordiri.com/v1alpha1/virtualmachines/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1StatusFromJSON(jsonValue));
    }

    /**
     * delete a VirtualMachine
     */
    async deleteVirtualMachine(requestParameters: DeleteVirtualMachineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Status> {
        const response = await this.deleteVirtualMachineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a VirtualMachineDeployment
     */
    async deleteVirtualMachineDeploymentRaw(requestParameters: DeleteVirtualMachineDeploymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteVirtualMachineDeployment.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/compute.ordiri.com/v1alpha1/virtualmachinedeployments/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1StatusFromJSON(jsonValue));
    }

    /**
     * delete a VirtualMachineDeployment
     */
    async deleteVirtualMachineDeployment(requestParameters: DeleteVirtualMachineDeploymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Status> {
        const response = await this.deleteVirtualMachineDeploymentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a VirtualMachineReplicaSet
     */
    async deleteVirtualMachineReplicaSetRaw(requestParameters: DeleteVirtualMachineReplicaSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteVirtualMachineReplicaSet.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/compute.ordiri.com/v1alpha1/virtualmachinereplicasets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1StatusFromJSON(jsonValue));
    }

    /**
     * delete a VirtualMachineReplicaSet
     */
    async deleteVirtualMachineReplicaSet(requestParameters: DeleteVirtualMachineReplicaSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Status> {
        const response = await this.deleteVirtualMachineReplicaSetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get available resources
     */
    async getAPIResourcesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1APIResourceList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/compute.ordiri.com/v1alpha1/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1APIResourceListFromJSON(jsonValue));
    }

    /**
     * get available resources
     */
    async getAPIResources(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1APIResourceList> {
        const response = await this.getAPIResourcesRaw(initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind VirtualMachine
     */
    async listVirtualMachineRaw(requestParameters: ListVirtualMachineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineList>> {
        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/compute.ordiri.com/v1alpha1/virtualmachines`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind VirtualMachine
     */
    async listVirtualMachine(requestParameters: ListVirtualMachineRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineList> {
        const response = await this.listVirtualMachineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind VirtualMachineDeployment
     */
    async listVirtualMachineDeploymentRaw(requestParameters: ListVirtualMachineDeploymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineDeploymentList>> {
        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/compute.ordiri.com/v1alpha1/virtualmachinedeployments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineDeploymentListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind VirtualMachineDeployment
     */
    async listVirtualMachineDeployment(requestParameters: ListVirtualMachineDeploymentRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineDeploymentList> {
        const response = await this.listVirtualMachineDeploymentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind VirtualMachineReplicaSet
     */
    async listVirtualMachineReplicaSetRaw(requestParameters: ListVirtualMachineReplicaSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineReplicaSetList>> {
        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/compute.ordiri.com/v1alpha1/virtualmachinereplicasets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineReplicaSetListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind VirtualMachineReplicaSet
     */
    async listVirtualMachineReplicaSet(requestParameters: ListVirtualMachineReplicaSetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineReplicaSetList> {
        const response = await this.listVirtualMachineReplicaSetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update the specified VirtualMachine
     */
    async patchVirtualMachineRaw(requestParameters: PatchVirtualMachineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachine>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchVirtualMachine.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchVirtualMachine.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/compute.ordiri.com/v1alpha1/virtualmachines/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineFromJSON(jsonValue));
    }

    /**
     * partially update the specified VirtualMachine
     */
    async patchVirtualMachine(requestParameters: PatchVirtualMachineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachine> {
        const response = await this.patchVirtualMachineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update the specified VirtualMachineDeployment
     */
    async patchVirtualMachineDeploymentRaw(requestParameters: PatchVirtualMachineDeploymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineDeployment>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchVirtualMachineDeployment.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchVirtualMachineDeployment.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/compute.ordiri.com/v1alpha1/virtualmachinedeployments/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineDeploymentFromJSON(jsonValue));
    }

    /**
     * partially update the specified VirtualMachineDeployment
     */
    async patchVirtualMachineDeployment(requestParameters: PatchVirtualMachineDeploymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineDeployment> {
        const response = await this.patchVirtualMachineDeploymentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update status of the specified VirtualMachineDeployment
     */
    async patchVirtualMachineDeploymentStatusRaw(requestParameters: PatchVirtualMachineDeploymentStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineDeployment>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchVirtualMachineDeploymentStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchVirtualMachineDeploymentStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/compute.ordiri.com/v1alpha1/virtualmachinedeployments/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineDeploymentFromJSON(jsonValue));
    }

    /**
     * partially update status of the specified VirtualMachineDeployment
     */
    async patchVirtualMachineDeploymentStatus(requestParameters: PatchVirtualMachineDeploymentStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineDeployment> {
        const response = await this.patchVirtualMachineDeploymentStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update the specified VirtualMachineReplicaSet
     */
    async patchVirtualMachineReplicaSetRaw(requestParameters: PatchVirtualMachineReplicaSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineReplicaSet>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchVirtualMachineReplicaSet.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchVirtualMachineReplicaSet.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/compute.ordiri.com/v1alpha1/virtualmachinereplicasets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineReplicaSetFromJSON(jsonValue));
    }

    /**
     * partially update the specified VirtualMachineReplicaSet
     */
    async patchVirtualMachineReplicaSet(requestParameters: PatchVirtualMachineReplicaSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineReplicaSet> {
        const response = await this.patchVirtualMachineReplicaSetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update status of the specified VirtualMachineReplicaSet
     */
    async patchVirtualMachineReplicaSetStatusRaw(requestParameters: PatchVirtualMachineReplicaSetStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineReplicaSet>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchVirtualMachineReplicaSetStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchVirtualMachineReplicaSetStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/compute.ordiri.com/v1alpha1/virtualmachinereplicasets/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineReplicaSetFromJSON(jsonValue));
    }

    /**
     * partially update status of the specified VirtualMachineReplicaSet
     */
    async patchVirtualMachineReplicaSetStatus(requestParameters: PatchVirtualMachineReplicaSetStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineReplicaSet> {
        const response = await this.patchVirtualMachineReplicaSetStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update status of the specified VirtualMachine
     */
    async patchVirtualMachineStatusRaw(requestParameters: PatchVirtualMachineStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachine>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchVirtualMachineStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchVirtualMachineStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/compute.ordiri.com/v1alpha1/virtualmachines/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineFromJSON(jsonValue));
    }

    /**
     * partially update status of the specified VirtualMachine
     */
    async patchVirtualMachineStatus(requestParameters: PatchVirtualMachineStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachine> {
        const response = await this.patchVirtualMachineStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read the specified VirtualMachine
     */
    async readVirtualMachineRaw(requestParameters: ReadVirtualMachineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachine>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readVirtualMachine.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/compute.ordiri.com/v1alpha1/virtualmachines/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineFromJSON(jsonValue));
    }

    /**
     * read the specified VirtualMachine
     */
    async readVirtualMachine(requestParameters: ReadVirtualMachineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachine> {
        const response = await this.readVirtualMachineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read the specified VirtualMachineDeployment
     */
    async readVirtualMachineDeploymentRaw(requestParameters: ReadVirtualMachineDeploymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineDeployment>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readVirtualMachineDeployment.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/compute.ordiri.com/v1alpha1/virtualmachinedeployments/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineDeploymentFromJSON(jsonValue));
    }

    /**
     * read the specified VirtualMachineDeployment
     */
    async readVirtualMachineDeployment(requestParameters: ReadVirtualMachineDeploymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineDeployment> {
        const response = await this.readVirtualMachineDeploymentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read status of the specified VirtualMachineDeployment
     */
    async readVirtualMachineDeploymentStatusRaw(requestParameters: ReadVirtualMachineDeploymentStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineDeployment>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readVirtualMachineDeploymentStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/compute.ordiri.com/v1alpha1/virtualmachinedeployments/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineDeploymentFromJSON(jsonValue));
    }

    /**
     * read status of the specified VirtualMachineDeployment
     */
    async readVirtualMachineDeploymentStatus(requestParameters: ReadVirtualMachineDeploymentStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineDeployment> {
        const response = await this.readVirtualMachineDeploymentStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read the specified VirtualMachineReplicaSet
     */
    async readVirtualMachineReplicaSetRaw(requestParameters: ReadVirtualMachineReplicaSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineReplicaSet>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readVirtualMachineReplicaSet.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/compute.ordiri.com/v1alpha1/virtualmachinereplicasets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineReplicaSetFromJSON(jsonValue));
    }

    /**
     * read the specified VirtualMachineReplicaSet
     */
    async readVirtualMachineReplicaSet(requestParameters: ReadVirtualMachineReplicaSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineReplicaSet> {
        const response = await this.readVirtualMachineReplicaSetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read status of the specified VirtualMachineReplicaSet
     */
    async readVirtualMachineReplicaSetStatusRaw(requestParameters: ReadVirtualMachineReplicaSetStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineReplicaSet>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readVirtualMachineReplicaSetStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/compute.ordiri.com/v1alpha1/virtualmachinereplicasets/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineReplicaSetFromJSON(jsonValue));
    }

    /**
     * read status of the specified VirtualMachineReplicaSet
     */
    async readVirtualMachineReplicaSetStatus(requestParameters: ReadVirtualMachineReplicaSetStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineReplicaSet> {
        const response = await this.readVirtualMachineReplicaSetStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read status of the specified VirtualMachine
     */
    async readVirtualMachineStatusRaw(requestParameters: ReadVirtualMachineStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachine>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readVirtualMachineStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/compute.ordiri.com/v1alpha1/virtualmachines/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineFromJSON(jsonValue));
    }

    /**
     * read status of the specified VirtualMachine
     */
    async readVirtualMachineStatus(requestParameters: ReadVirtualMachineStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachine> {
        const response = await this.readVirtualMachineStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace the specified VirtualMachine
     */
    async replaceVirtualMachineRaw(requestParameters: ReplaceVirtualMachineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachine>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceVirtualMachine.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceVirtualMachine.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/compute.ordiri.com/v1alpha1/virtualmachines/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineFromJSON(jsonValue));
    }

    /**
     * replace the specified VirtualMachine
     */
    async replaceVirtualMachine(requestParameters: ReplaceVirtualMachineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachine> {
        const response = await this.replaceVirtualMachineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace the specified VirtualMachineDeployment
     */
    async replaceVirtualMachineDeploymentRaw(requestParameters: ReplaceVirtualMachineDeploymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineDeployment>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceVirtualMachineDeployment.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceVirtualMachineDeployment.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/compute.ordiri.com/v1alpha1/virtualmachinedeployments/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineDeploymentToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineDeploymentFromJSON(jsonValue));
    }

    /**
     * replace the specified VirtualMachineDeployment
     */
    async replaceVirtualMachineDeployment(requestParameters: ReplaceVirtualMachineDeploymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineDeployment> {
        const response = await this.replaceVirtualMachineDeploymentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace status of the specified VirtualMachineDeployment
     */
    async replaceVirtualMachineDeploymentStatusRaw(requestParameters: ReplaceVirtualMachineDeploymentStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineDeployment>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceVirtualMachineDeploymentStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceVirtualMachineDeploymentStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/compute.ordiri.com/v1alpha1/virtualmachinedeployments/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineDeploymentToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineDeploymentFromJSON(jsonValue));
    }

    /**
     * replace status of the specified VirtualMachineDeployment
     */
    async replaceVirtualMachineDeploymentStatus(requestParameters: ReplaceVirtualMachineDeploymentStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineDeployment> {
        const response = await this.replaceVirtualMachineDeploymentStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace the specified VirtualMachineReplicaSet
     */
    async replaceVirtualMachineReplicaSetRaw(requestParameters: ReplaceVirtualMachineReplicaSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineReplicaSet>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceVirtualMachineReplicaSet.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceVirtualMachineReplicaSet.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/compute.ordiri.com/v1alpha1/virtualmachinereplicasets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineReplicaSetToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineReplicaSetFromJSON(jsonValue));
    }

    /**
     * replace the specified VirtualMachineReplicaSet
     */
    async replaceVirtualMachineReplicaSet(requestParameters: ReplaceVirtualMachineReplicaSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineReplicaSet> {
        const response = await this.replaceVirtualMachineReplicaSetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace status of the specified VirtualMachineReplicaSet
     */
    async replaceVirtualMachineReplicaSetStatusRaw(requestParameters: ReplaceVirtualMachineReplicaSetStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineReplicaSet>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceVirtualMachineReplicaSetStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceVirtualMachineReplicaSetStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/compute.ordiri.com/v1alpha1/virtualmachinereplicasets/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineReplicaSetToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineReplicaSetFromJSON(jsonValue));
    }

    /**
     * replace status of the specified VirtualMachineReplicaSet
     */
    async replaceVirtualMachineReplicaSetStatus(requestParameters: ReplaceVirtualMachineReplicaSetStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineReplicaSet> {
        const response = await this.replaceVirtualMachineReplicaSetStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace status of the specified VirtualMachine
     */
    async replaceVirtualMachineStatusRaw(requestParameters: ReplaceVirtualMachineStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachine>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceVirtualMachineStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceVirtualMachineStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/compute.ordiri.com/v1alpha1/virtualmachines/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachineFromJSON(jsonValue));
    }

    /**
     * replace status of the specified VirtualMachine
     */
    async replaceVirtualMachineStatus(requestParameters: ReplaceVirtualMachineStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisComputeV1alpha1VirtualMachine> {
        const response = await this.replaceVirtualMachineStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
