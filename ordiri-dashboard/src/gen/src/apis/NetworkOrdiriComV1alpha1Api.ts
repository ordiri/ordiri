/* tslint:disable */
/* eslint-disable */
/**
 * openapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Network,
  ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1NetworkList,
  ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Route,
  ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteList,
  ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteTable,
  ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteTableList,
  ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Router,
  ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouterList,
  ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Subnet,
  ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1SubnetList,
  IoK8sApimachineryPkgApisMetaV1APIResourceList,
  IoK8sApimachineryPkgApisMetaV1DeleteOptions,
  IoK8sApimachineryPkgApisMetaV1Status,
  IoK8sApimachineryPkgApisMetaV1WatchEvent,
} from '../models';
import {
    ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1NetworkFromJSON,
    ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1NetworkToJSON,
    ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1NetworkListFromJSON,
    ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1NetworkListToJSON,
    ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteFromJSON,
    ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteToJSON,
    ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteListFromJSON,
    ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteListToJSON,
    ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteTableFromJSON,
    ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteTableToJSON,
    ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteTableListFromJSON,
    ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteTableListToJSON,
    ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouterFromJSON,
    ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouterToJSON,
    ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouterListFromJSON,
    ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouterListToJSON,
    ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1SubnetFromJSON,
    ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1SubnetToJSON,
    ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1SubnetListFromJSON,
    ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1SubnetListToJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceListToJSON,
    IoK8sApimachineryPkgApisMetaV1DeleteOptionsFromJSON,
    IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON,
    IoK8sApimachineryPkgApisMetaV1StatusFromJSON,
    IoK8sApimachineryPkgApisMetaV1StatusToJSON,
    IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON,
    IoK8sApimachineryPkgApisMetaV1WatchEventToJSON,
} from '../models';

export interface CreateNetworkOrdiriComV1alpha1NetworkRequest {
    body: ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Network;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface CreateNetworkOrdiriComV1alpha1RouteRequest {
    body: ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Route;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface CreateNetworkOrdiriComV1alpha1RouteTableRequest {
    body: ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteTable;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface CreateNetworkOrdiriComV1alpha1RouterRequest {
    body: ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Router;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface CreateNetworkOrdiriComV1alpha1SubnetRequest {
    body: ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Subnet;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface DeleteNetworkOrdiriComV1alpha1CollectionNetworkRequest {
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteNetworkOrdiriComV1alpha1CollectionRouteRequest {
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteNetworkOrdiriComV1alpha1CollectionRouteTableRequest {
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteNetworkOrdiriComV1alpha1CollectionRouterRequest {
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteNetworkOrdiriComV1alpha1CollectionSubnetRequest {
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteNetworkOrdiriComV1alpha1NetworkRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteNetworkOrdiriComV1alpha1RouteRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteNetworkOrdiriComV1alpha1RouteTableRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteNetworkOrdiriComV1alpha1RouterRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteNetworkOrdiriComV1alpha1SubnetRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface ListNetworkOrdiriComV1alpha1NetworkRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListNetworkOrdiriComV1alpha1RouteRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListNetworkOrdiriComV1alpha1RouteTableRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListNetworkOrdiriComV1alpha1RouterRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListNetworkOrdiriComV1alpha1SubnetRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface PatchNetworkOrdiriComV1alpha1NetworkRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchNetworkOrdiriComV1alpha1NetworkStatusRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchNetworkOrdiriComV1alpha1RouteRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchNetworkOrdiriComV1alpha1RouteStatusRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchNetworkOrdiriComV1alpha1RouteTableRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchNetworkOrdiriComV1alpha1RouteTableStatusRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchNetworkOrdiriComV1alpha1RouterRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchNetworkOrdiriComV1alpha1RouterStatusRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchNetworkOrdiriComV1alpha1SubnetRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchNetworkOrdiriComV1alpha1SubnetStatusRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface ReadNetworkOrdiriComV1alpha1NetworkRequest {
    name: string;
    pretty?: string;
}

export interface ReadNetworkOrdiriComV1alpha1NetworkStatusRequest {
    name: string;
    pretty?: string;
}

export interface ReadNetworkOrdiriComV1alpha1RouteRequest {
    name: string;
    pretty?: string;
}

export interface ReadNetworkOrdiriComV1alpha1RouteStatusRequest {
    name: string;
    pretty?: string;
}

export interface ReadNetworkOrdiriComV1alpha1RouteTableRequest {
    name: string;
    pretty?: string;
}

export interface ReadNetworkOrdiriComV1alpha1RouteTableStatusRequest {
    name: string;
    pretty?: string;
}

export interface ReadNetworkOrdiriComV1alpha1RouterRequest {
    name: string;
    pretty?: string;
}

export interface ReadNetworkOrdiriComV1alpha1RouterStatusRequest {
    name: string;
    pretty?: string;
}

export interface ReadNetworkOrdiriComV1alpha1SubnetRequest {
    name: string;
    pretty?: string;
}

export interface ReadNetworkOrdiriComV1alpha1SubnetStatusRequest {
    name: string;
    pretty?: string;
}

export interface ReplaceNetworkOrdiriComV1alpha1NetworkRequest {
    name: string;
    body: ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Network;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceNetworkOrdiriComV1alpha1NetworkStatusRequest {
    name: string;
    body: ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Network;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceNetworkOrdiriComV1alpha1RouteRequest {
    name: string;
    body: ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Route;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceNetworkOrdiriComV1alpha1RouteStatusRequest {
    name: string;
    body: ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Route;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceNetworkOrdiriComV1alpha1RouteTableRequest {
    name: string;
    body: ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteTable;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceNetworkOrdiriComV1alpha1RouteTableStatusRequest {
    name: string;
    body: ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteTable;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceNetworkOrdiriComV1alpha1RouterRequest {
    name: string;
    body: ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Router;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceNetworkOrdiriComV1alpha1RouterStatusRequest {
    name: string;
    body: ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Router;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceNetworkOrdiriComV1alpha1SubnetRequest {
    name: string;
    body: ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Subnet;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceNetworkOrdiriComV1alpha1SubnetStatusRequest {
    name: string;
    body: ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Subnet;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface WatchNetworkOrdiriComV1alpha1NetworkRequest {
    name: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchNetworkOrdiriComV1alpha1NetworkListRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchNetworkOrdiriComV1alpha1RouteRequest {
    name: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchNetworkOrdiriComV1alpha1RouteListRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchNetworkOrdiriComV1alpha1RouteTableRequest {
    name: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchNetworkOrdiriComV1alpha1RouteTableListRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchNetworkOrdiriComV1alpha1RouterRequest {
    name: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchNetworkOrdiriComV1alpha1RouterListRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchNetworkOrdiriComV1alpha1SubnetRequest {
    name: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchNetworkOrdiriComV1alpha1SubnetListRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

/**
 * 
 */
export class NetworkOrdiriComV1alpha1Api extends runtime.BaseAPI {

    /**
     * create a Network
     */
    async createNetworkOrdiriComV1alpha1NetworkRaw(requestParameters: CreateNetworkOrdiriComV1alpha1NetworkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Network>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createNetworkOrdiriComV1alpha1Network.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/networks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1NetworkToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1NetworkFromJSON(jsonValue));
    }

    /**
     * create a Network
     */
    async createNetworkOrdiriComV1alpha1Network(requestParameters: CreateNetworkOrdiriComV1alpha1NetworkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Network> {
        const response = await this.createNetworkOrdiriComV1alpha1NetworkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create a Route
     */
    async createNetworkOrdiriComV1alpha1RouteRaw(requestParameters: CreateNetworkOrdiriComV1alpha1RouteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Route>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createNetworkOrdiriComV1alpha1Route.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/routes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteFromJSON(jsonValue));
    }

    /**
     * create a Route
     */
    async createNetworkOrdiriComV1alpha1Route(requestParameters: CreateNetworkOrdiriComV1alpha1RouteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Route> {
        const response = await this.createNetworkOrdiriComV1alpha1RouteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create a RouteTable
     */
    async createNetworkOrdiriComV1alpha1RouteTableRaw(requestParameters: CreateNetworkOrdiriComV1alpha1RouteTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteTable>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createNetworkOrdiriComV1alpha1RouteTable.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/routetables:`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteTableToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteTableFromJSON(jsonValue));
    }

    /**
     * create a RouteTable
     */
    async createNetworkOrdiriComV1alpha1RouteTable(requestParameters: CreateNetworkOrdiriComV1alpha1RouteTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteTable> {
        const response = await this.createNetworkOrdiriComV1alpha1RouteTableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create a Router
     */
    async createNetworkOrdiriComV1alpha1RouterRaw(requestParameters: CreateNetworkOrdiriComV1alpha1RouterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Router>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createNetworkOrdiriComV1alpha1Router.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/routers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouterToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouterFromJSON(jsonValue));
    }

    /**
     * create a Router
     */
    async createNetworkOrdiriComV1alpha1Router(requestParameters: CreateNetworkOrdiriComV1alpha1RouterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Router> {
        const response = await this.createNetworkOrdiriComV1alpha1RouterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create a Subnet
     */
    async createNetworkOrdiriComV1alpha1SubnetRaw(requestParameters: CreateNetworkOrdiriComV1alpha1SubnetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Subnet>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createNetworkOrdiriComV1alpha1Subnet.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/subnets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1SubnetToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1SubnetFromJSON(jsonValue));
    }

    /**
     * create a Subnet
     */
    async createNetworkOrdiriComV1alpha1Subnet(requestParameters: CreateNetworkOrdiriComV1alpha1SubnetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Subnet> {
        const response = await this.createNetworkOrdiriComV1alpha1SubnetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete collection of Network
     */
    async deleteNetworkOrdiriComV1alpha1CollectionNetworkRaw(requestParameters: DeleteNetworkOrdiriComV1alpha1CollectionNetworkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/networks`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of Network
     */
    async deleteNetworkOrdiriComV1alpha1CollectionNetwork(requestParameters: DeleteNetworkOrdiriComV1alpha1CollectionNetworkRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteNetworkOrdiriComV1alpha1CollectionNetworkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete collection of Route
     */
    async deleteNetworkOrdiriComV1alpha1CollectionRouteRaw(requestParameters: DeleteNetworkOrdiriComV1alpha1CollectionRouteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/routes`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of Route
     */
    async deleteNetworkOrdiriComV1alpha1CollectionRoute(requestParameters: DeleteNetworkOrdiriComV1alpha1CollectionRouteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteNetworkOrdiriComV1alpha1CollectionRouteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete collection of RouteTable
     */
    async deleteNetworkOrdiriComV1alpha1CollectionRouteTableRaw(requestParameters: DeleteNetworkOrdiriComV1alpha1CollectionRouteTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/routetables:`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of RouteTable
     */
    async deleteNetworkOrdiriComV1alpha1CollectionRouteTable(requestParameters: DeleteNetworkOrdiriComV1alpha1CollectionRouteTableRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteNetworkOrdiriComV1alpha1CollectionRouteTableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete collection of Router
     */
    async deleteNetworkOrdiriComV1alpha1CollectionRouterRaw(requestParameters: DeleteNetworkOrdiriComV1alpha1CollectionRouterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/routers`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of Router
     */
    async deleteNetworkOrdiriComV1alpha1CollectionRouter(requestParameters: DeleteNetworkOrdiriComV1alpha1CollectionRouterRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteNetworkOrdiriComV1alpha1CollectionRouterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete collection of Subnet
     */
    async deleteNetworkOrdiriComV1alpha1CollectionSubnetRaw(requestParameters: DeleteNetworkOrdiriComV1alpha1CollectionSubnetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/subnets`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of Subnet
     */
    async deleteNetworkOrdiriComV1alpha1CollectionSubnet(requestParameters: DeleteNetworkOrdiriComV1alpha1CollectionSubnetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteNetworkOrdiriComV1alpha1CollectionSubnetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a Network
     */
    async deleteNetworkOrdiriComV1alpha1NetworkRaw(requestParameters: DeleteNetworkOrdiriComV1alpha1NetworkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteNetworkOrdiriComV1alpha1Network.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/networks/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a Network
     */
    async deleteNetworkOrdiriComV1alpha1Network(requestParameters: DeleteNetworkOrdiriComV1alpha1NetworkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteNetworkOrdiriComV1alpha1NetworkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a Route
     */
    async deleteNetworkOrdiriComV1alpha1RouteRaw(requestParameters: DeleteNetworkOrdiriComV1alpha1RouteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteNetworkOrdiriComV1alpha1Route.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/routes/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a Route
     */
    async deleteNetworkOrdiriComV1alpha1Route(requestParameters: DeleteNetworkOrdiriComV1alpha1RouteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteNetworkOrdiriComV1alpha1RouteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a RouteTable
     */
    async deleteNetworkOrdiriComV1alpha1RouteTableRaw(requestParameters: DeleteNetworkOrdiriComV1alpha1RouteTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteNetworkOrdiriComV1alpha1RouteTable.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/routetables:/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a RouteTable
     */
    async deleteNetworkOrdiriComV1alpha1RouteTable(requestParameters: DeleteNetworkOrdiriComV1alpha1RouteTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteNetworkOrdiriComV1alpha1RouteTableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a Router
     */
    async deleteNetworkOrdiriComV1alpha1RouterRaw(requestParameters: DeleteNetworkOrdiriComV1alpha1RouterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteNetworkOrdiriComV1alpha1Router.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/routers/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a Router
     */
    async deleteNetworkOrdiriComV1alpha1Router(requestParameters: DeleteNetworkOrdiriComV1alpha1RouterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteNetworkOrdiriComV1alpha1RouterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a Subnet
     */
    async deleteNetworkOrdiriComV1alpha1SubnetRaw(requestParameters: DeleteNetworkOrdiriComV1alpha1SubnetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteNetworkOrdiriComV1alpha1Subnet.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/subnets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a Subnet
     */
    async deleteNetworkOrdiriComV1alpha1Subnet(requestParameters: DeleteNetworkOrdiriComV1alpha1SubnetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteNetworkOrdiriComV1alpha1SubnetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get available resources
     */
    async getNetworkOrdiriComV1alpha1APIResourcesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1APIResourceList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON(jsonValue));
    }

    /**
     * get available resources
     */
    async getNetworkOrdiriComV1alpha1APIResources(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1APIResourceList> {
        const response = await this.getNetworkOrdiriComV1alpha1APIResourcesRaw(initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind Network
     */
    async listNetworkOrdiriComV1alpha1NetworkRaw(requestParameters: ListNetworkOrdiriComV1alpha1NetworkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1NetworkList>> {
        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/networks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1NetworkListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind Network
     */
    async listNetworkOrdiriComV1alpha1Network(requestParameters: ListNetworkOrdiriComV1alpha1NetworkRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1NetworkList> {
        const response = await this.listNetworkOrdiriComV1alpha1NetworkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind Route
     */
    async listNetworkOrdiriComV1alpha1RouteRaw(requestParameters: ListNetworkOrdiriComV1alpha1RouteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteList>> {
        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/routes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind Route
     */
    async listNetworkOrdiriComV1alpha1Route(requestParameters: ListNetworkOrdiriComV1alpha1RouteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteList> {
        const response = await this.listNetworkOrdiriComV1alpha1RouteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind RouteTable
     */
    async listNetworkOrdiriComV1alpha1RouteTableRaw(requestParameters: ListNetworkOrdiriComV1alpha1RouteTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteTableList>> {
        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/routetables:`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteTableListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind RouteTable
     */
    async listNetworkOrdiriComV1alpha1RouteTable(requestParameters: ListNetworkOrdiriComV1alpha1RouteTableRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteTableList> {
        const response = await this.listNetworkOrdiriComV1alpha1RouteTableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind Router
     */
    async listNetworkOrdiriComV1alpha1RouterRaw(requestParameters: ListNetworkOrdiriComV1alpha1RouterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouterList>> {
        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/routers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouterListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind Router
     */
    async listNetworkOrdiriComV1alpha1Router(requestParameters: ListNetworkOrdiriComV1alpha1RouterRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouterList> {
        const response = await this.listNetworkOrdiriComV1alpha1RouterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind Subnet
     */
    async listNetworkOrdiriComV1alpha1SubnetRaw(requestParameters: ListNetworkOrdiriComV1alpha1SubnetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1SubnetList>> {
        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/subnets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1SubnetListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind Subnet
     */
    async listNetworkOrdiriComV1alpha1Subnet(requestParameters: ListNetworkOrdiriComV1alpha1SubnetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1SubnetList> {
        const response = await this.listNetworkOrdiriComV1alpha1SubnetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update the specified Network
     */
    async patchNetworkOrdiriComV1alpha1NetworkRaw(requestParameters: PatchNetworkOrdiriComV1alpha1NetworkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Network>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchNetworkOrdiriComV1alpha1Network.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchNetworkOrdiriComV1alpha1Network.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/networks/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1NetworkFromJSON(jsonValue));
    }

    /**
     * partially update the specified Network
     */
    async patchNetworkOrdiriComV1alpha1Network(requestParameters: PatchNetworkOrdiriComV1alpha1NetworkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Network> {
        const response = await this.patchNetworkOrdiriComV1alpha1NetworkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update status of the specified Network
     */
    async patchNetworkOrdiriComV1alpha1NetworkStatusRaw(requestParameters: PatchNetworkOrdiriComV1alpha1NetworkStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Network>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchNetworkOrdiriComV1alpha1NetworkStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchNetworkOrdiriComV1alpha1NetworkStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/networks/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1NetworkFromJSON(jsonValue));
    }

    /**
     * partially update status of the specified Network
     */
    async patchNetworkOrdiriComV1alpha1NetworkStatus(requestParameters: PatchNetworkOrdiriComV1alpha1NetworkStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Network> {
        const response = await this.patchNetworkOrdiriComV1alpha1NetworkStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update the specified Route
     */
    async patchNetworkOrdiriComV1alpha1RouteRaw(requestParameters: PatchNetworkOrdiriComV1alpha1RouteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Route>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchNetworkOrdiriComV1alpha1Route.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchNetworkOrdiriComV1alpha1Route.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/routes/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteFromJSON(jsonValue));
    }

    /**
     * partially update the specified Route
     */
    async patchNetworkOrdiriComV1alpha1Route(requestParameters: PatchNetworkOrdiriComV1alpha1RouteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Route> {
        const response = await this.patchNetworkOrdiriComV1alpha1RouteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update status of the specified Route
     */
    async patchNetworkOrdiriComV1alpha1RouteStatusRaw(requestParameters: PatchNetworkOrdiriComV1alpha1RouteStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Route>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchNetworkOrdiriComV1alpha1RouteStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchNetworkOrdiriComV1alpha1RouteStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/routes/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteFromJSON(jsonValue));
    }

    /**
     * partially update status of the specified Route
     */
    async patchNetworkOrdiriComV1alpha1RouteStatus(requestParameters: PatchNetworkOrdiriComV1alpha1RouteStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Route> {
        const response = await this.patchNetworkOrdiriComV1alpha1RouteStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update the specified RouteTable
     */
    async patchNetworkOrdiriComV1alpha1RouteTableRaw(requestParameters: PatchNetworkOrdiriComV1alpha1RouteTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteTable>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchNetworkOrdiriComV1alpha1RouteTable.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchNetworkOrdiriComV1alpha1RouteTable.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/routetables:/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteTableFromJSON(jsonValue));
    }

    /**
     * partially update the specified RouteTable
     */
    async patchNetworkOrdiriComV1alpha1RouteTable(requestParameters: PatchNetworkOrdiriComV1alpha1RouteTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteTable> {
        const response = await this.patchNetworkOrdiriComV1alpha1RouteTableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update status of the specified RouteTable
     */
    async patchNetworkOrdiriComV1alpha1RouteTableStatusRaw(requestParameters: PatchNetworkOrdiriComV1alpha1RouteTableStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteTable>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchNetworkOrdiriComV1alpha1RouteTableStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchNetworkOrdiriComV1alpha1RouteTableStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/routetables:/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteTableFromJSON(jsonValue));
    }

    /**
     * partially update status of the specified RouteTable
     */
    async patchNetworkOrdiriComV1alpha1RouteTableStatus(requestParameters: PatchNetworkOrdiriComV1alpha1RouteTableStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteTable> {
        const response = await this.patchNetworkOrdiriComV1alpha1RouteTableStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update the specified Router
     */
    async patchNetworkOrdiriComV1alpha1RouterRaw(requestParameters: PatchNetworkOrdiriComV1alpha1RouterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Router>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchNetworkOrdiriComV1alpha1Router.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchNetworkOrdiriComV1alpha1Router.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/routers/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouterFromJSON(jsonValue));
    }

    /**
     * partially update the specified Router
     */
    async patchNetworkOrdiriComV1alpha1Router(requestParameters: PatchNetworkOrdiriComV1alpha1RouterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Router> {
        const response = await this.patchNetworkOrdiriComV1alpha1RouterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update status of the specified Router
     */
    async patchNetworkOrdiriComV1alpha1RouterStatusRaw(requestParameters: PatchNetworkOrdiriComV1alpha1RouterStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Router>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchNetworkOrdiriComV1alpha1RouterStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchNetworkOrdiriComV1alpha1RouterStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/routers/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouterFromJSON(jsonValue));
    }

    /**
     * partially update status of the specified Router
     */
    async patchNetworkOrdiriComV1alpha1RouterStatus(requestParameters: PatchNetworkOrdiriComV1alpha1RouterStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Router> {
        const response = await this.patchNetworkOrdiriComV1alpha1RouterStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update the specified Subnet
     */
    async patchNetworkOrdiriComV1alpha1SubnetRaw(requestParameters: PatchNetworkOrdiriComV1alpha1SubnetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Subnet>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchNetworkOrdiriComV1alpha1Subnet.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchNetworkOrdiriComV1alpha1Subnet.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/subnets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1SubnetFromJSON(jsonValue));
    }

    /**
     * partially update the specified Subnet
     */
    async patchNetworkOrdiriComV1alpha1Subnet(requestParameters: PatchNetworkOrdiriComV1alpha1SubnetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Subnet> {
        const response = await this.patchNetworkOrdiriComV1alpha1SubnetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update status of the specified Subnet
     */
    async patchNetworkOrdiriComV1alpha1SubnetStatusRaw(requestParameters: PatchNetworkOrdiriComV1alpha1SubnetStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Subnet>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchNetworkOrdiriComV1alpha1SubnetStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchNetworkOrdiriComV1alpha1SubnetStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/subnets/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1SubnetFromJSON(jsonValue));
    }

    /**
     * partially update status of the specified Subnet
     */
    async patchNetworkOrdiriComV1alpha1SubnetStatus(requestParameters: PatchNetworkOrdiriComV1alpha1SubnetStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Subnet> {
        const response = await this.patchNetworkOrdiriComV1alpha1SubnetStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read the specified Network
     */
    async readNetworkOrdiriComV1alpha1NetworkRaw(requestParameters: ReadNetworkOrdiriComV1alpha1NetworkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Network>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readNetworkOrdiriComV1alpha1Network.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/networks/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1NetworkFromJSON(jsonValue));
    }

    /**
     * read the specified Network
     */
    async readNetworkOrdiriComV1alpha1Network(requestParameters: ReadNetworkOrdiriComV1alpha1NetworkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Network> {
        const response = await this.readNetworkOrdiriComV1alpha1NetworkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read status of the specified Network
     */
    async readNetworkOrdiriComV1alpha1NetworkStatusRaw(requestParameters: ReadNetworkOrdiriComV1alpha1NetworkStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Network>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readNetworkOrdiriComV1alpha1NetworkStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/networks/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1NetworkFromJSON(jsonValue));
    }

    /**
     * read status of the specified Network
     */
    async readNetworkOrdiriComV1alpha1NetworkStatus(requestParameters: ReadNetworkOrdiriComV1alpha1NetworkStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Network> {
        const response = await this.readNetworkOrdiriComV1alpha1NetworkStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read the specified Route
     */
    async readNetworkOrdiriComV1alpha1RouteRaw(requestParameters: ReadNetworkOrdiriComV1alpha1RouteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Route>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readNetworkOrdiriComV1alpha1Route.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/routes/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteFromJSON(jsonValue));
    }

    /**
     * read the specified Route
     */
    async readNetworkOrdiriComV1alpha1Route(requestParameters: ReadNetworkOrdiriComV1alpha1RouteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Route> {
        const response = await this.readNetworkOrdiriComV1alpha1RouteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read status of the specified Route
     */
    async readNetworkOrdiriComV1alpha1RouteStatusRaw(requestParameters: ReadNetworkOrdiriComV1alpha1RouteStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Route>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readNetworkOrdiriComV1alpha1RouteStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/routes/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteFromJSON(jsonValue));
    }

    /**
     * read status of the specified Route
     */
    async readNetworkOrdiriComV1alpha1RouteStatus(requestParameters: ReadNetworkOrdiriComV1alpha1RouteStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Route> {
        const response = await this.readNetworkOrdiriComV1alpha1RouteStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read the specified RouteTable
     */
    async readNetworkOrdiriComV1alpha1RouteTableRaw(requestParameters: ReadNetworkOrdiriComV1alpha1RouteTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteTable>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readNetworkOrdiriComV1alpha1RouteTable.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/routetables:/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteTableFromJSON(jsonValue));
    }

    /**
     * read the specified RouteTable
     */
    async readNetworkOrdiriComV1alpha1RouteTable(requestParameters: ReadNetworkOrdiriComV1alpha1RouteTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteTable> {
        const response = await this.readNetworkOrdiriComV1alpha1RouteTableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read status of the specified RouteTable
     */
    async readNetworkOrdiriComV1alpha1RouteTableStatusRaw(requestParameters: ReadNetworkOrdiriComV1alpha1RouteTableStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteTable>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readNetworkOrdiriComV1alpha1RouteTableStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/routetables:/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteTableFromJSON(jsonValue));
    }

    /**
     * read status of the specified RouteTable
     */
    async readNetworkOrdiriComV1alpha1RouteTableStatus(requestParameters: ReadNetworkOrdiriComV1alpha1RouteTableStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteTable> {
        const response = await this.readNetworkOrdiriComV1alpha1RouteTableStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read the specified Router
     */
    async readNetworkOrdiriComV1alpha1RouterRaw(requestParameters: ReadNetworkOrdiriComV1alpha1RouterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Router>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readNetworkOrdiriComV1alpha1Router.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/routers/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouterFromJSON(jsonValue));
    }

    /**
     * read the specified Router
     */
    async readNetworkOrdiriComV1alpha1Router(requestParameters: ReadNetworkOrdiriComV1alpha1RouterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Router> {
        const response = await this.readNetworkOrdiriComV1alpha1RouterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read status of the specified Router
     */
    async readNetworkOrdiriComV1alpha1RouterStatusRaw(requestParameters: ReadNetworkOrdiriComV1alpha1RouterStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Router>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readNetworkOrdiriComV1alpha1RouterStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/routers/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouterFromJSON(jsonValue));
    }

    /**
     * read status of the specified Router
     */
    async readNetworkOrdiriComV1alpha1RouterStatus(requestParameters: ReadNetworkOrdiriComV1alpha1RouterStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Router> {
        const response = await this.readNetworkOrdiriComV1alpha1RouterStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read the specified Subnet
     */
    async readNetworkOrdiriComV1alpha1SubnetRaw(requestParameters: ReadNetworkOrdiriComV1alpha1SubnetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Subnet>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readNetworkOrdiriComV1alpha1Subnet.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/subnets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1SubnetFromJSON(jsonValue));
    }

    /**
     * read the specified Subnet
     */
    async readNetworkOrdiriComV1alpha1Subnet(requestParameters: ReadNetworkOrdiriComV1alpha1SubnetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Subnet> {
        const response = await this.readNetworkOrdiriComV1alpha1SubnetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read status of the specified Subnet
     */
    async readNetworkOrdiriComV1alpha1SubnetStatusRaw(requestParameters: ReadNetworkOrdiriComV1alpha1SubnetStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Subnet>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readNetworkOrdiriComV1alpha1SubnetStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/subnets/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1SubnetFromJSON(jsonValue));
    }

    /**
     * read status of the specified Subnet
     */
    async readNetworkOrdiriComV1alpha1SubnetStatus(requestParameters: ReadNetworkOrdiriComV1alpha1SubnetStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Subnet> {
        const response = await this.readNetworkOrdiriComV1alpha1SubnetStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace the specified Network
     */
    async replaceNetworkOrdiriComV1alpha1NetworkRaw(requestParameters: ReplaceNetworkOrdiriComV1alpha1NetworkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Network>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceNetworkOrdiriComV1alpha1Network.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceNetworkOrdiriComV1alpha1Network.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/networks/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1NetworkToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1NetworkFromJSON(jsonValue));
    }

    /**
     * replace the specified Network
     */
    async replaceNetworkOrdiriComV1alpha1Network(requestParameters: ReplaceNetworkOrdiriComV1alpha1NetworkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Network> {
        const response = await this.replaceNetworkOrdiriComV1alpha1NetworkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace status of the specified Network
     */
    async replaceNetworkOrdiriComV1alpha1NetworkStatusRaw(requestParameters: ReplaceNetworkOrdiriComV1alpha1NetworkStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Network>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceNetworkOrdiriComV1alpha1NetworkStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceNetworkOrdiriComV1alpha1NetworkStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/networks/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1NetworkToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1NetworkFromJSON(jsonValue));
    }

    /**
     * replace status of the specified Network
     */
    async replaceNetworkOrdiriComV1alpha1NetworkStatus(requestParameters: ReplaceNetworkOrdiriComV1alpha1NetworkStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Network> {
        const response = await this.replaceNetworkOrdiriComV1alpha1NetworkStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace the specified Route
     */
    async replaceNetworkOrdiriComV1alpha1RouteRaw(requestParameters: ReplaceNetworkOrdiriComV1alpha1RouteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Route>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceNetworkOrdiriComV1alpha1Route.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceNetworkOrdiriComV1alpha1Route.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/routes/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteFromJSON(jsonValue));
    }

    /**
     * replace the specified Route
     */
    async replaceNetworkOrdiriComV1alpha1Route(requestParameters: ReplaceNetworkOrdiriComV1alpha1RouteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Route> {
        const response = await this.replaceNetworkOrdiriComV1alpha1RouteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace status of the specified Route
     */
    async replaceNetworkOrdiriComV1alpha1RouteStatusRaw(requestParameters: ReplaceNetworkOrdiriComV1alpha1RouteStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Route>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceNetworkOrdiriComV1alpha1RouteStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceNetworkOrdiriComV1alpha1RouteStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/routes/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteFromJSON(jsonValue));
    }

    /**
     * replace status of the specified Route
     */
    async replaceNetworkOrdiriComV1alpha1RouteStatus(requestParameters: ReplaceNetworkOrdiriComV1alpha1RouteStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Route> {
        const response = await this.replaceNetworkOrdiriComV1alpha1RouteStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace the specified RouteTable
     */
    async replaceNetworkOrdiriComV1alpha1RouteTableRaw(requestParameters: ReplaceNetworkOrdiriComV1alpha1RouteTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteTable>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceNetworkOrdiriComV1alpha1RouteTable.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceNetworkOrdiriComV1alpha1RouteTable.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/routetables:/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteTableToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteTableFromJSON(jsonValue));
    }

    /**
     * replace the specified RouteTable
     */
    async replaceNetworkOrdiriComV1alpha1RouteTable(requestParameters: ReplaceNetworkOrdiriComV1alpha1RouteTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteTable> {
        const response = await this.replaceNetworkOrdiriComV1alpha1RouteTableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace status of the specified RouteTable
     */
    async replaceNetworkOrdiriComV1alpha1RouteTableStatusRaw(requestParameters: ReplaceNetworkOrdiriComV1alpha1RouteTableStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteTable>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceNetworkOrdiriComV1alpha1RouteTableStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceNetworkOrdiriComV1alpha1RouteTableStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/routetables:/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteTableToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteTableFromJSON(jsonValue));
    }

    /**
     * replace status of the specified RouteTable
     */
    async replaceNetworkOrdiriComV1alpha1RouteTableStatus(requestParameters: ReplaceNetworkOrdiriComV1alpha1RouteTableStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouteTable> {
        const response = await this.replaceNetworkOrdiriComV1alpha1RouteTableStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace the specified Router
     */
    async replaceNetworkOrdiriComV1alpha1RouterRaw(requestParameters: ReplaceNetworkOrdiriComV1alpha1RouterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Router>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceNetworkOrdiriComV1alpha1Router.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceNetworkOrdiriComV1alpha1Router.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/routers/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouterToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouterFromJSON(jsonValue));
    }

    /**
     * replace the specified Router
     */
    async replaceNetworkOrdiriComV1alpha1Router(requestParameters: ReplaceNetworkOrdiriComV1alpha1RouterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Router> {
        const response = await this.replaceNetworkOrdiriComV1alpha1RouterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace status of the specified Router
     */
    async replaceNetworkOrdiriComV1alpha1RouterStatusRaw(requestParameters: ReplaceNetworkOrdiriComV1alpha1RouterStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Router>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceNetworkOrdiriComV1alpha1RouterStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceNetworkOrdiriComV1alpha1RouterStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/routers/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouterToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1RouterFromJSON(jsonValue));
    }

    /**
     * replace status of the specified Router
     */
    async replaceNetworkOrdiriComV1alpha1RouterStatus(requestParameters: ReplaceNetworkOrdiriComV1alpha1RouterStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Router> {
        const response = await this.replaceNetworkOrdiriComV1alpha1RouterStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace the specified Subnet
     */
    async replaceNetworkOrdiriComV1alpha1SubnetRaw(requestParameters: ReplaceNetworkOrdiriComV1alpha1SubnetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Subnet>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceNetworkOrdiriComV1alpha1Subnet.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceNetworkOrdiriComV1alpha1Subnet.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/subnets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1SubnetToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1SubnetFromJSON(jsonValue));
    }

    /**
     * replace the specified Subnet
     */
    async replaceNetworkOrdiriComV1alpha1Subnet(requestParameters: ReplaceNetworkOrdiriComV1alpha1SubnetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Subnet> {
        const response = await this.replaceNetworkOrdiriComV1alpha1SubnetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace status of the specified Subnet
     */
    async replaceNetworkOrdiriComV1alpha1SubnetStatusRaw(requestParameters: ReplaceNetworkOrdiriComV1alpha1SubnetStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Subnet>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceNetworkOrdiriComV1alpha1SubnetStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceNetworkOrdiriComV1alpha1SubnetStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/subnets/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1SubnetToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1SubnetFromJSON(jsonValue));
    }

    /**
     * replace status of the specified Subnet
     */
    async replaceNetworkOrdiriComV1alpha1SubnetStatus(requestParameters: ReplaceNetworkOrdiriComV1alpha1SubnetStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComGithubOrdiriOrdiriPkgApisNetworkV1alpha1Subnet> {
        const response = await this.replaceNetworkOrdiriComV1alpha1SubnetStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch changes to an object of kind Network. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchNetworkOrdiriComV1alpha1NetworkRaw(requestParameters: WatchNetworkOrdiriComV1alpha1NetworkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchNetworkOrdiriComV1alpha1Network.');
        }

        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/watch/networks/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind Network. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchNetworkOrdiriComV1alpha1Network(requestParameters: WatchNetworkOrdiriComV1alpha1NetworkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchNetworkOrdiriComV1alpha1NetworkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch individual changes to a list of Network. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchNetworkOrdiriComV1alpha1NetworkListRaw(requestParameters: WatchNetworkOrdiriComV1alpha1NetworkListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/watch/networks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of Network. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchNetworkOrdiriComV1alpha1NetworkList(requestParameters: WatchNetworkOrdiriComV1alpha1NetworkListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchNetworkOrdiriComV1alpha1NetworkListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch changes to an object of kind Route. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchNetworkOrdiriComV1alpha1RouteRaw(requestParameters: WatchNetworkOrdiriComV1alpha1RouteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchNetworkOrdiriComV1alpha1Route.');
        }

        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/watch/routes/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind Route. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchNetworkOrdiriComV1alpha1Route(requestParameters: WatchNetworkOrdiriComV1alpha1RouteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchNetworkOrdiriComV1alpha1RouteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch individual changes to a list of Route. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchNetworkOrdiriComV1alpha1RouteListRaw(requestParameters: WatchNetworkOrdiriComV1alpha1RouteListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/watch/routes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of Route. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchNetworkOrdiriComV1alpha1RouteList(requestParameters: WatchNetworkOrdiriComV1alpha1RouteListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchNetworkOrdiriComV1alpha1RouteListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch changes to an object of kind RouteTable. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchNetworkOrdiriComV1alpha1RouteTableRaw(requestParameters: WatchNetworkOrdiriComV1alpha1RouteTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchNetworkOrdiriComV1alpha1RouteTable.');
        }

        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/watch/routetables:/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind RouteTable. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchNetworkOrdiriComV1alpha1RouteTable(requestParameters: WatchNetworkOrdiriComV1alpha1RouteTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchNetworkOrdiriComV1alpha1RouteTableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch individual changes to a list of RouteTable. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchNetworkOrdiriComV1alpha1RouteTableListRaw(requestParameters: WatchNetworkOrdiriComV1alpha1RouteTableListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/watch/routetables:`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of RouteTable. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchNetworkOrdiriComV1alpha1RouteTableList(requestParameters: WatchNetworkOrdiriComV1alpha1RouteTableListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchNetworkOrdiriComV1alpha1RouteTableListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch changes to an object of kind Router. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchNetworkOrdiriComV1alpha1RouterRaw(requestParameters: WatchNetworkOrdiriComV1alpha1RouterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchNetworkOrdiriComV1alpha1Router.');
        }

        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/watch/routers/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind Router. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchNetworkOrdiriComV1alpha1Router(requestParameters: WatchNetworkOrdiriComV1alpha1RouterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchNetworkOrdiriComV1alpha1RouterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch individual changes to a list of Router. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchNetworkOrdiriComV1alpha1RouterListRaw(requestParameters: WatchNetworkOrdiriComV1alpha1RouterListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/watch/routers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of Router. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchNetworkOrdiriComV1alpha1RouterList(requestParameters: WatchNetworkOrdiriComV1alpha1RouterListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchNetworkOrdiriComV1alpha1RouterListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch changes to an object of kind Subnet. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchNetworkOrdiriComV1alpha1SubnetRaw(requestParameters: WatchNetworkOrdiriComV1alpha1SubnetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchNetworkOrdiriComV1alpha1Subnet.');
        }

        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/watch/subnets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind Subnet. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchNetworkOrdiriComV1alpha1Subnet(requestParameters: WatchNetworkOrdiriComV1alpha1SubnetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchNetworkOrdiriComV1alpha1SubnetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch individual changes to a list of Subnet. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchNetworkOrdiriComV1alpha1SubnetListRaw(requestParameters: WatchNetworkOrdiriComV1alpha1SubnetListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/network.ordiri.com/v1alpha1/watch/subnets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of Subnet. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchNetworkOrdiriComV1alpha1SubnetList(requestParameters: WatchNetworkOrdiriComV1alpha1SubnetListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchNetworkOrdiriComV1alpha1SubnetListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
