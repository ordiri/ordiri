apiVersion: v1
kind: Namespace
metadata:
  name: blog
---
apiVersion: v1
kind: Namespace
metadata:
  name: cloudflare-dns
---
apiVersion: v1
kind: Namespace
metadata:
  name: k8-workshop
---
apiVersion: v1
kind: Namespace
metadata:
  name: overseer
---
apiVersion: v1
kind: Namespace
metadata:
  name: plex
---
apiVersion: v1
kind: Namespace
metadata:
  name: prowlarr
---
apiVersion: v1
kind: Namespace
metadata:
  name: radarr
---
apiVersion: v1
kind: Namespace
metadata:
  name: sabnzbd
---
apiVersion: v1
kind: Namespace
metadata:
  name: sonarr
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cloudflaredns-event-sa
  namespace: cloudflare-dns
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cloudflaredns-workflow-sa
  namespace: cloudflare-dns
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cloudflaredns-event-sources-workflow
  namespace: cloudflare-dns
rules:
- apiGroups:
  - argoproj.io
  resources:
  - workflows
  verbs:
  - create
  - list
  - get
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: workflow-executor
  namespace: cloudflare-dns
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cloudflaredns-event-sources-discover
rules:
- apiGroups:
  - '*'
  resources:
  - '*'
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cloudflaredns-event-sources-workflow
  namespace: cloudflare-dns
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cloudflaredns-event-sources-workflow
subjects:
- kind: ServiceAccount
  name: cloudflaredns-event-sa
  namespace: cloudflare-dns
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: workflow-executor
  namespace: cloudflare-dns
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: workflow-executor
subjects:
- kind: ServiceAccount
  name: cloudflaredns-workflow-sa
  namespace: cloudflare-dns
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cloudflare-dns-tokenreview-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: cloudflaredns-workflow-sa
  namespace: cloudflare-dns
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cloudflaredns-event-sources
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cloudflaredns-event-sources-discover
subjects:
- kind: ServiceAccount
  name: cloudflaredns-event-sa
  namespace: cloudflare-dns
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cloudflaredns-event-sources-workflow-discover
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cloudflaredns-event-sources-discover
subjects:
- kind: ServiceAccount
  name: cloudflaredns-workflow-sa
  namespace: cloudflare-dns
---
apiVersion: v1
data:
  index.html: |-
    <!DOCTYPE html>
    <html>
        <head>
            <title>Daves homelab blog</title>
        </head>
        <body>
            <h1>Hello from Dave!</h1>
            <p>Hosted inside a Kubernetes cluster running inside <a href="https://github.com/ordiri/ordiri">Ordiri</a></p>
        </body>
    </html>
kind: ConfigMap
metadata:
  name: blogposts-k4f5fc68b8
  namespace: blog
---
apiVersion: v1
data:
  Caddyfile: "{\n#    acme_ca https://acme-staging-v02.api.letsencrypt.org/directory\n}\n\n:80
    {\n  respond /live 200\n  respond /ready 200\n}\n\n:443 {\n    root * /opt/blogposts\n
    \   tls /opt/blog-tls/tls.crt /opt/blog-tls/tls.key\n\n    # Templates give static
    sites some dynamic features\n    templates\n    \n    # Compress responses according
    to Accept-Encoding headers\n    encode gzip zstd\n    \n    # Make HTML file extension
    optional\n    try_files {path}.html /opt/blogposts/{path}\n    \n    # Serve everything
    else from the file system\n    file_server\n}"
kind: ConfigMap
metadata:
  name: caddyfile-c59d6k7286
  namespace: blog
---
apiVersion: v1
data:
  Caddyfile: "\n\n:443 {\n  root * /opt/workshop\n  tls /opt/workshop-tls/tls.crt
    /opt/workshop-tls/tls.key\n\n  # Templates give static sites some dynamic features\n
    \ templates\n  \n  # Compress responses according to Accept-Encoding headers\n
    \ encode gzip zstd\n  \n  # Make HTML file extension optional\n  try_files {path}.html
    /opt/workshop/{path}\n  \n  # Serve everything else from the file system\n  file_server\n}\n\n:80
    {\n  respond /live 200\n  respond /ready 200\n}"
kind: ConfigMap
metadata:
  name: caddyfile-dbdd652h2t
  namespace: k8-workshop
---
apiVersion: v1
data:
  Caddyfile: "\n\n:443 {\n  tls /opt/overseer-tls/tls.crt /opt/overseer-tls/tls.key\n
    \ reverse_proxy http://overseer:5055 \n}\n\n:80 {\n  respond /live 200\n  respond
    /ready 200\n}"
kind: ConfigMap
metadata:
  name: caddyfile-24k48t76cb
  namespace: overseer
---
apiVersion: v1
data:
  Caddyfile: "\n\n:443 {\n  tls /opt/prowlarr-tls/tls.crt /opt/prowlarr-tls/tls.key\n
    \ reverse_proxy http://prowlarr:9696 \n}\n\n:80 {\n  respond /live 200\n  respond
    /ready 200\n}"
kind: ConfigMap
metadata:
  name: caddyfile-2fctf42729
  namespace: prowlarr
---
apiVersion: v1
data:
  Caddyfile: "\n\n:443 {\n  tls /opt/radarr-tls/tls.crt /opt/radarr-tls/tls.key\n
    \ reverse_proxy http://radarr:7878 \n}\n\n:80 {\n  respond /live 200\n  respond
    /ready 200\n}"
kind: ConfigMap
metadata:
  name: caddyfile-6859c8t6h4
  namespace: radarr
---
apiVersion: v1
data:
  Caddyfile: "\n\n:443 {\n  tls /opt/sabnzbd-tls/tls.crt /opt/sabnzbd-tls/tls.key\n
    \ reverse_proxy http://sabnzbd:8080 \n}\n\n:80 {\n  respond /live 200\n  respond
    /ready 200\n}"
kind: ConfigMap
metadata:
  name: caddyfile-926t9d45f9
  namespace: sabnzbd
---
apiVersion: v1
data:
  Caddyfile: "\n\n:443 {\n  tls /opt/sonarr-tls/tls.crt /opt/sonarr-tls/tls.key\n
    \ reverse_proxy http://sonarr:8989 \n}\n\n:80 {\n  respond /live 200\n  respond
    /ready 200\n}"
kind: ConfigMap
metadata:
  name: caddyfile-2t9kgdf84m
  namespace: sonarr
---
apiVersion: v1
data:
  password: cGFzc3dvcmQ=
kind: Secret
metadata:
  name: tls-pkcs12-password
  namespace: overseer
type: Opaque
---
apiVersion: v1
data:
  password: cGFzc3dvcmQ=
kind: Secret
metadata:
  name: plex-tls-pkcs12-password
  namespace: plex
type: Opaque
---
apiVersion: v1
data:
  password: cGFzc3dvcmQ=
kind: Secret
metadata:
  name: tls-pkcs12-password
  namespace: prowlarr
type: Opaque
---
apiVersion: v1
data:
  password: cGFzc3dvcmQ=
kind: Secret
metadata:
  name: tls-pkcs12-password
  namespace: radarr
type: Opaque
---
apiVersion: v1
data:
  password: cGFzc3dvcmQ=
kind: Secret
metadata:
  name: tls-pkcs12-password
  namespace: sonarr
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    k8s.dmann.xyz/cloudflare-domain-dmann-dev: blog
    k8s.dmann.xyz/cloudflare-domain-dmann-xyz: blog
    k8s.dmann.xyz/cloudflare-zone-dmann-dev: dmann.dev
    k8s.dmann.xyz/cloudflare-zone-dmann-xyz: dmann.xyz
  name: blog
  namespace: blog
spec:
  ipFamilyPolicy: PreferDualStack
  ports:
  - name: http
    port: 80
  - name: https
    port: 443
  selector:
    app: blog
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    k8s.dmann.xyz/cloudflare-domain-dmann-dev: kubernetes.workshops
    k8s.dmann.xyz/cloudflare-domain-dmann-xyz: kubernetes.workshops
    k8s.dmann.xyz/cloudflare-zone-dmann-dev: dmann.dev
    k8s.dmann.xyz/cloudflare-zone-dmann-xyz: dmann.xyz
  name: workshop
  namespace: k8-workshop
spec:
  ipFamilyPolicy: PreferDualStack
  ports:
  - name: http
    port: 80
  - name: https
    port: 443
  selector:
    app: workshop
---
apiVersion: v1
kind: Service
metadata:
  name: overseer
  namespace: overseer
spec:
  clusterIP: None
  ipFamilies:
  - IPv4
  ipFamilyPolicy: SingleStack
  ports:
  - port: 5055
    targetPort: webui
  selector:
    app: overseer
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    k8s.dmann.xyz/cloudflare-domain-dmann-dev: overseer
    k8s.dmann.xyz/cloudflare-domain-dmann-xyz: overseer
    k8s.dmann.xyz/cloudflare-zone-dmann-dev: dmann.dev
    k8s.dmann.xyz/cloudflare-zone-dmann-xyz: dmann.xyz
  name: overseer-ingress
  namespace: overseer
spec:
  ipFamilyPolicy: PreferDualStack
  ports:
  - name: https
    port: 443
    protocol: TCP
    targetPort: 443
  selector:
    app: reverse-proxy
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    k8s.dmann.xyz/cloudflare-domain-dmann-dev: plex
    k8s.dmann.xyz/cloudflare-domain-dmann-xyz: plex
    k8s.dmann.xyz/cloudflare-zone-dmann-dev: dmann.dev
    k8s.dmann.xyz/cloudflare-zone-dmann-xyz: dmann.xyz
  name: plex
  namespace: plex
spec:
  ipFamilyPolicy: PreferDualStack
  ports:
  - port: 443
    targetPort: webui
  selector:
    app: plex-server
---
apiVersion: v1
kind: Service
metadata:
  name: prowlarr
  namespace: prowlarr
spec:
  clusterIP: None
  ipFamilies:
  - IPv4
  ipFamilyPolicy: SingleStack
  ports:
  - port: 9696
    targetPort: webui
  selector:
    app: prowlarr
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    k8s.dmann.xyz/cloudflare-domain-dmann-dev: prowlarr
    k8s.dmann.xyz/cloudflare-domain-dmann-xyz: prowlarr
    k8s.dmann.xyz/cloudflare-zone-dmann-dev: dmann.dev
    k8s.dmann.xyz/cloudflare-zone-dmann-xyz: dmann.xyz
  name: prowlarr-ingress
  namespace: prowlarr
spec:
  ipFamilyPolicy: PreferDualStack
  ports:
  - name: https
    port: 443
    protocol: TCP
    targetPort: 443
  selector:
    app: reverse-proxy
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: radarr
  namespace: radarr
spec:
  clusterIP: None
  ipFamilies:
  - IPv4
  ipFamilyPolicy: SingleStack
  ports:
  - port: 7878
    targetPort: webui
  selector:
    app: radarr
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    k8s.dmann.xyz/cloudflare-domain-dmann-dev: radarr
    k8s.dmann.xyz/cloudflare-domain-dmann-xyz: radarr
    k8s.dmann.xyz/cloudflare-zone-dmann-dev: dmann.dev
    k8s.dmann.xyz/cloudflare-zone-dmann-xyz: dmann.xyz
  name: radarr-ingress
  namespace: radarr
spec:
  ipFamilyPolicy: PreferDualStack
  ports:
  - name: https
    port: 443
    protocol: TCP
    targetPort: 443
  selector:
    app: reverse-proxy
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: sabnzbd
  namespace: sabnzbd
spec:
  ipFamilies:
  - IPv4
  ipFamilyPolicy: SingleStack
  ports:
  - port: 8080
    targetPort: webui
  selector:
    app: sabnzbd
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    k8s.dmann.xyz/cloudflare-domain-dmann-dev: sabnzbd
    k8s.dmann.xyz/cloudflare-domain-dmann-xyz: sabnzbd
    k8s.dmann.xyz/cloudflare-zone-dmann-dev: dmann.dev
    k8s.dmann.xyz/cloudflare-zone-dmann-xyz: dmann.xyz
  name: sabnzbd-ingress
  namespace: sabnzbd
spec:
  ipFamilyPolicy: PreferDualStack
  ports:
  - name: https
    port: 443
    protocol: TCP
    targetPort: 443
  selector:
    app: reverse-proxy
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: sonarr
  namespace: sonarr
spec:
  clusterIP: None
  ipFamilies:
  - IPv4
  ipFamilyPolicy: SingleStack
  ports:
  - port: 8989
    targetPort: webui
  selector:
    app: sonarr
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    k8s.dmann.xyz/cloudflare-domain-dmann-dev: sonarr
    k8s.dmann.xyz/cloudflare-domain-dmann-xyz: sonarr
    k8s.dmann.xyz/cloudflare-zone-dmann-dev: dmann.dev
    k8s.dmann.xyz/cloudflare-zone-dmann-xyz: dmann.xyz
  name: sonarr-ingress
  namespace: sonarr
spec:
  ipFamilyPolicy: PreferDualStack
  ports:
  - name: https
    port: 443
    protocol: TCP
    targetPort: 443
  selector:
    app: reverse-proxy
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: overseer-config-data
  namespace: overseer
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100G
  volumeMode: Filesystem
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: plex-config-data
  namespace: plex
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100G
  volumeMode: Filesystem
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sabnzbd-config-data
  namespace: sabnzbd
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100G
  volumeMode: Filesystem
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sonarr-config-data
  namespace: sonarr
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100G
  volumeMode: Filesystem
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: blog
  namespace: blog
spec:
  replicas: 1
  selector:
    matchLabels:
      app: blog
  template:
    metadata:
      labels:
        app: blog
    spec:
      containers:
      - args:
        - run
        - --config
        - /opt/caddyfile/Caddyfile
        command:
        - caddy
        image: harbor.dmann.dev/docker.io/caddy
        livenessProbe:
          httpGet:
            path: /live
            port: http
          initialDelaySeconds: 5
          periodSeconds: 10
        name: blog
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        - containerPort: 443
          name: https
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /live
            port: http
          initialDelaySeconds: 5
          periodSeconds: 10
        resources: null
        volumeMounts:
        - mountPath: /opt/caddyfile
          name: caddyfile
        - mountPath: /opt/blogposts
          name: blogposts
      volumes:
      - configMap:
          name: caddyfile-c59d6k7286
        name: caddyfile
      - configMap:
          name: blogposts-k4f5fc68b8
        name: blogposts
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: workshop
  namespace: k8-workshop
spec:
  replicas: 1
  selector:
    matchLabels:
      app: workshop
  template:
    metadata:
      labels:
        app: workshop
    spec:
      containers:
      - args:
        - run
        - --config
        - /opt/caddyfile/Caddyfile
        command:
        - caddy
        image: harbor.dmann.dev/library/k8-workshop:85d2015
        livenessProbe:
          httpGet:
            path: /live
            port: http
          initialDelaySeconds: 5
          periodSeconds: 10
        name: workshop
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        - containerPort: 443
          name: https
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /live
            port: http
          initialDelaySeconds: 5
          periodSeconds: 10
        resources: null
        volumeMounts:
        - mountPath: /opt/caddyfile
          name: caddyfile
        - mountPath: /opt/workshop-tls
          name: workshop-tls
      volumes:
      - configMap:
          name: caddyfile-dbdd652h2t
        name: caddyfile
      - name: workshop-tls
        secret:
          secretName: workshop-tls
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: overseer
  namespace: overseer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: overseer
  template:
    metadata:
      labels:
        app: overseer
    spec:
      containers:
      - env:
        - name: PUID
          value: "1000"
        - name: PGID
          value: "1000"
        - name: TZ
          value: Australia/Sydney
        image: lscr.io/linuxserver/overseerr:latest
        name: overseer
        ports:
        - containerPort: 5055
          name: webui
          protocol: TCP
        resources: null
        volumeMounts:
        - mountPath: /media
          name: media-nfs
        - mountPath: /config
          name: media-nfs
          subPath: overseer
        - mountPath: /opt/overseer-tls
          name: overseer-tls
      dnsConfig:
        options:
        - name: ndots
          value: "1"
      volumes:
      - name: overseer-tls
        secret:
          defaultMode: 511
          secretName: overseer-tls
      - name: media-nfs
        nfs:
          path: /homelab/media
          server: ceph.homelab.dmann.xyz
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: reverse-proxy
  namespace: overseer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: reverse-proxy
  template:
    metadata:
      labels:
        app: reverse-proxy
    spec:
      containers:
      - args:
        - run
        - --config
        - /opt/caddyfile/Caddyfile
        command:
        - caddy
        image: harbor.dmann.dev/docker.io/caddy
        livenessProbe:
          httpGet:
            path: /live
            port: http
          initialDelaySeconds: 5
          periodSeconds: 10
        name: proxy
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        - containerPort: 443
          name: https
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /live
            port: http
          initialDelaySeconds: 5
          periodSeconds: 10
        resources: null
        volumeMounts:
        - mountPath: /opt/caddyfile
          name: caddyfile
        - mountPath: /opt/overseer-tls
          name: overseer-tls
      volumes:
      - configMap:
          name: caddyfile-24k48t76cb
        name: caddyfile
      - name: overseer-tls
        secret:
          secretName: overseer-tls
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: plex-server
  namespace: plex
spec:
  replicas: 1
  selector:
    matchLabels:
      app: plex-server
  template:
    metadata:
      labels:
        app: plex-server
    spec:
      containers:
      - env:
        - name: PUID
          value: "1000"
        - name: PGID
          value: "1000"
        - name: VERSION
          value: docker
        - name: ALLOWED_NETWORKS
          value: 10.0.0.0/8,192.168.0.0/16,172.16.0.0/12,2403:5806:97ec::/48
        image: harbor.dmann.dev/docker.io/plexinc/pms-docker
        name: plex-server
        ports:
        - containerPort: 32400
          name: webui
          protocol: TCP
        - containerPort: 3005
          protocol: TCP
        - containerPort: 8324
          protocol: TCP
        - containerPort: 32469
          protocol: TCP
        - containerPort: 32410
          protocol: UDP
        - containerPort: 32412
          protocol: UDP
        - containerPort: 32413
          protocol: UDP
        - containerPort: 32414
          protocol: UDP
        resources: null
        volumeMounts:
        - mountPath: /media
          name: media-nfs
        - mountPath: /config
          name: media-nfs
          subPath: plex
        - mountPath: /transcode
          name: transcode-storage
        - mountPath: /opt/plex-tls
          name: plex-tls
        - mountPath: /opt/plex-tls-pkcs12-password
          name: plex-tls-pkcs12-password
      dnsConfig:
        options:
        - name: ndots
          value: "1"
      volumes:
      - name: plex-tls
        secret:
          defaultMode: 511
          secretName: plex-tls
      - name: plex-tls-pkcs12-password
        secret:
          defaultMode: 511
          secretName: plex-tls-pkcs12-password
      - name: media-nfs
        nfs:
          path: /homelab/media
          server: ceph.homelab.dmann.xyz
      - emptyDir: {}
        name: transcode-storage
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: reverse-proxy
  namespace: prowlarr
spec:
  replicas: 1
  selector:
    matchLabels:
      app: reverse-proxy
  template:
    metadata:
      labels:
        app: reverse-proxy
    spec:
      containers:
      - args:
        - run
        - --config
        - /opt/caddyfile/Caddyfile
        command:
        - caddy
        image: harbor.dmann.dev/docker.io/caddy
        livenessProbe:
          httpGet:
            path: /live
            port: http
          initialDelaySeconds: 5
          periodSeconds: 10
        name: proxy
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        - containerPort: 443
          name: https
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /live
            port: http
          initialDelaySeconds: 5
          periodSeconds: 10
        resources: null
        volumeMounts:
        - mountPath: /opt/caddyfile
          name: caddyfile
        - mountPath: /opt/prowlarr-tls
          name: prowlarr-tls
      volumes:
      - configMap:
          name: caddyfile-2fctf42729
        name: caddyfile
      - name: prowlarr-tls
        secret:
          secretName: prowlarr-tls
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: radarr
  namespace: radarr
spec:
  replicas: 1
  selector:
    matchLabels:
      app: radarr
  template:
    metadata:
      labels:
        app: radarr
    spec:
      containers:
      - env:
        - name: PUID
          value: "1000"
        - name: PGID
          value: "1000"
        - name: TZ
          value: Australia/Sydney
        image: lscr.io/linuxserver/radarr:latest
        name: radarr
        ports:
        - containerPort: 7878
          name: webui
          protocol: TCP
        resources: null
        volumeMounts:
        - mountPath: /media
          name: media-nfs
        - mountPath: /config
          name: radarr-config-data
        - mountPath: /opt/radarr-tls
          name: radarr-tls
      dnsConfig:
        options:
        - name: ndots
          value: "1"
      volumes:
      - name: radarr-tls
        secret:
          defaultMode: 511
          secretName: radarr-tls
      - name: media-nfs
        nfs:
          path: /homelab/media
          server: ceph.homelab.dmann.xyz
      - name: radarr-config-data
        persistentVolumeClaim:
          claimName: radarr-config-data
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: reverse-proxy
  namespace: radarr
spec:
  replicas: 1
  selector:
    matchLabels:
      app: reverse-proxy
  template:
    metadata:
      labels:
        app: reverse-proxy
    spec:
      containers:
      - args:
        - run
        - --config
        - /opt/caddyfile/Caddyfile
        command:
        - caddy
        image: harbor.dmann.dev/docker.io/caddy
        livenessProbe:
          httpGet:
            path: /live
            port: http
          initialDelaySeconds: 5
          periodSeconds: 10
        name: proxy
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        - containerPort: 443
          name: https
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /live
            port: http
          initialDelaySeconds: 5
          periodSeconds: 10
        resources: null
        volumeMounts:
        - mountPath: /opt/caddyfile
          name: caddyfile
        - mountPath: /opt/radarr-tls
          name: radarr-tls
      volumes:
      - configMap:
          name: caddyfile-6859c8t6h4
        name: caddyfile
      - name: radarr-tls
        secret:
          secretName: radarr-tls
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: reverse-proxy
  namespace: sabnzbd
spec:
  replicas: 1
  selector:
    matchLabels:
      app: reverse-proxy
  template:
    metadata:
      labels:
        app: reverse-proxy
    spec:
      containers:
      - args:
        - run
        - --config
        - /opt/caddyfile/Caddyfile
        command:
        - caddy
        image: harbor.dmann.dev/docker.io/caddy
        livenessProbe:
          httpGet:
            path: /live
            port: http
          initialDelaySeconds: 5
          periodSeconds: 10
        name: proxy
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        - containerPort: 443
          name: https
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /live
            port: http
          initialDelaySeconds: 5
          periodSeconds: 10
        resources: null
        volumeMounts:
        - mountPath: /opt/caddyfile
          name: caddyfile
        - mountPath: /opt/sabnzbd-tls
          name: sabnzbd-tls
      volumes:
      - configMap:
          name: caddyfile-926t9d45f9
        name: caddyfile
      - name: sabnzbd-tls
        secret:
          secretName: sabnzbd-tls
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sabnzbd
  namespace: sabnzbd
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sabnzbd
  template:
    metadata:
      labels:
        app: sabnzbd
    spec:
      containers:
      - env:
        - name: PUID
          value: "1000"
        - name: PGID
          value: "1000"
        - name: TZ
          value: Australia/Sydney
        image: lscr.io/linuxserver/sabnzbd:latest
        name: sabnzbd
        ports:
        - containerPort: 8080
          name: webui
          protocol: TCP
        resources: null
        volumeMounts:
        - mountPath: /media
          name: media-nfs
        - mountPath: /config
          name: media-nfs
          subPath: sabnzbd
        - mountPath: /opt/sabnzbd-tls
          name: sabnzbd-tls
      dnsConfig:
        options:
        - name: ndots
          value: "1"
      volumes:
      - name: sabnzbd-tls
        secret:
          defaultMode: 511
          secretName: sabnzbd-tls
      - name: media-nfs
        nfs:
          path: /homelab/media
          server: ceph.homelab.dmann.xyz
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: reverse-proxy
  namespace: sonarr
spec:
  replicas: 1
  selector:
    matchLabels:
      app: reverse-proxy
  template:
    metadata:
      labels:
        app: reverse-proxy
    spec:
      containers:
      - args:
        - run
        - --config
        - /opt/caddyfile/Caddyfile
        command:
        - caddy
        image: harbor.dmann.dev/docker.io/caddy
        livenessProbe:
          httpGet:
            path: /live
            port: http
          initialDelaySeconds: 5
          periodSeconds: 10
        name: proxy
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        - containerPort: 443
          name: https
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /live
            port: http
          initialDelaySeconds: 5
          periodSeconds: 10
        resources: null
        volumeMounts:
        - mountPath: /opt/caddyfile
          name: caddyfile
        - mountPath: /opt/sonarr-tls
          name: sonarr-tls
      volumes:
      - configMap:
          name: caddyfile-2t9kgdf84m
        name: caddyfile
      - name: sonarr-tls
        secret:
          secretName: sonarr-tls
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sonarr
  namespace: sonarr
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sonarr
  template:
    metadata:
      labels:
        app: sonarr
    spec:
      containers:
      - env:
        - name: PUID
          value: "1000"
        - name: PGID
          value: "1000"
        - name: TZ
          value: Australia/Sydney
        image: lscr.io/linuxserver/sonarr:latest
        name: sonarr
        ports:
        - containerPort: 8989
          name: webui
          protocol: TCP
        resources: null
        volumeMounts:
        - mountPath: /media
          name: media-nfs
        - mountPath: /config
          name: media-nfs
          subPath: sonarr
        - mountPath: /opt/sonarr-tls
          name: sonarr-tls
      dnsConfig:
        options:
        - name: ndots
          value: "1"
      volumes:
      - name: sonarr-tls
        secret:
          defaultMode: 511
          secretName: sonarr-tls
      - name: media-nfs
        nfs:
          path: /homelab/media
          server: ceph.homelab.dmann.xyz
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: prowlarr
  namespace: prowlarr
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prowlarr
  serviceName: prowlarr
  template:
    metadata:
      labels:
        app: prowlarr
    spec:
      containers:
      - env:
        - name: PUID
          value: "1000"
        - name: PGID
          value: "1000"
        - name: TZ
          value: Australia/Sydney
        image: lscr.io/linuxserver/prowlarr:develop
        name: prowlarr
        ports:
        - containerPort: 9696
          name: webui
          protocol: TCP
        resources: null
        volumeMounts:
        - mountPath: /media
          name: media-nfs
        - mountPath: /config
          name: media-nfs
          subPath: prowlarr
        - mountPath: /opt/prowlarr-tls
          name: prowlarr-tls
      dnsConfig:
        options:
        - name: ndots
          value: "1"
      volumes:
      - name: prowlarr-tls
        secret:
          defaultMode: 511
          secretName: prowlarr-tls
      - name: media-nfs
        nfs:
          path: /homelab/media
          server: ceph.homelab.dmann.xyz
      - name: prowlarr-config-data
        persistentVolumeClaim:
          claimName: prowlarr-config-data
---
apiVersion: argoproj.io/v1alpha1
kind: EventBus
metadata:
  name: default
  namespace: cloudflare-dns
spec:
  nats:
    native: {}
---
apiVersion: argoproj.io/v1alpha1
kind: EventSource
metadata:
  name: cloudflare-dns-resources
  namespace: cloudflare-dns
spec:
  resource:
    service-resource-updated:
      eventTypes:
      - ADD
      - DELETE
      - UPDATE
      filter: null
      group: ""
      namespace: ""
      resource: services
      version: v1
  template:
    dnsConfig:
      options:
      - name: ndots
        value: "1"
    serviceAccountName: cloudflaredns-event-sa
---
apiVersion: argoproj.io/v1alpha1
kind: EventSource
metadata:
  name: cloudflare-dns-updater
  namespace: cloudflare-dns
spec:
  service:
    ports:
    - port: 12000
      targetPort: 12000
  template:
    dnsConfig:
      options:
      - name: ndots
        value: "1"
  webhook:
    annotation-updated:
      endpoint: /annotation-updated
      method: POST
      port: "12000"
---
apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: cloudflare-dns-updater
  namespace: cloudflare-dns
spec:
  dependencies:
  - eventName: annotation-updated
    eventSourceName: cloudflare-dns-updater
    name: dns-update-notify-dep
  template:
    dnsConfig:
      options:
      - name: ndots
        value: "1"
    serviceAccountName: cloudflaredns-event-sa
  triggers:
  - template:
      log:
        intervalSeconds: 4
      name: log-trigger2
  - template:
      argoWorkflow:
        operation: submit
        parameters:
        - dest: metadata.name
          operation: append
          src:
            dataKey: body.version
            dependencyName: dns-update-notify-dep
        - dest: metadata.name
          operation: append
          src:
            dataTemplate: -{{ lower (list .Input.body.action .Input.body.kind .Input.body.namespace
              .Input.body.name .Input.body.version | join "-" | sha1sum) }}
            dependencyName: dns-update-notify-dep
        - dest: spec.arguments.parameters.0.value
          src:
            dataKey: body.kind
            dependencyName: dns-update-notify-dep
        - dest: spec.arguments.parameters.1.value
          src:
            dataKey: body.namespace
            dependencyName: dns-update-notify-dep
        - dest: spec.arguments.parameters.2.value
          src:
            dataKey: body.name
            dependencyName: dns-update-notify-dep
        - dest: spec.arguments.parameters.3.value
          src:
            dataKey: body.action
            dependencyName: dns-update-notify-dep
        source:
          resource:
            apiVersion: argoproj.io/v1alpha1
            kind: Workflow
            metadata:
              name: cfdns-
            spec:
              arguments:
                parameters:
                - name: kind
                - name: namespace
                - name: name
                - name: action
                - name: defaultZone
                  value: dmann.xyz
              entrypoint: main
              serviceAccountName: cloudflaredns-workflow-sa
              workflowTemplateRef:
                name: configure-dns-records
      name: argo-workflow-trigger
---
apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: service-cloudflare-dns-resources
  namespace: cloudflare-dns
spec:
  dependencies:
  - eventName: service-resource-updated
    eventSourceName: cloudflare-dns-resources
    name: service-event-dep
  template:
    serviceAccountName: cloudflaredns-event-sa
  triggers:
  - template:
      http:
        method: POST
        payload:
        - dest: version
          src:
            dataKey: body.metadata.resourceVersion
            dependencyName: service-event-dep
        - dest: kind
          src:
            dataKey: body.kind
            dependencyName: service-event-dep
        - dest: namespace
          src:
            dataKey: body.metadata.namespace
            dependencyName: service-event-dep
        - dest: name
          src:
            dataKey: body.metadata.name
            dependencyName: service-event-dep
        - dest: action
          src:
            contextKey: type
            dependencyName: service-event-dep
        url: http://cloudflare-dns-updater-eventsource-svc:12000/annotation-updated
      name: service-routes-updated
---
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: configure-dns-records
  namespace: cloudflare-dns
spec:
  arguments:
    parameters:
    - default: Service
      name: kind
    - default: argocd
      name: namespace
    - default: argocd-server
      name: name
    - default: update
      name: action
    - default: dmann.xyz
      name: defaultZone
  dnsConfig:
    options:
    - name: ndots
      value: "1"
  entrypoint: main
  serviceAccountName: cloudflaredns-workflow-sa
  templates:
  - dag:
      tasks:
      - arguments:
          parameters:
          - name: kind
            value: '{{workflow.parameters.kind}}'
          - name: namespace
            value: '{{workflow.parameters.namespace}}'
          - name: name
            value: '{{workflow.parameters.name}}'
        name: extract-dns-annotations
        template: get-dns-config
      - arguments:
          parameters:
          - name: url
            value: '{{=jsonpath(item.value, ''$.prefix'')}}.{{=jsonpath(item.value,
              ''$.zone'')}}'
          - name: service_ip
            value: '{{=jsonpath(item.value, ''$.service_ip'')}}'
          - name: type
            value: '{{=jsonpath(item.value, ''$.type'')}}'
          - name: zone
            value: '{{=jsonpath(item.value, ''$.zone'')}}'
          - name: action
            value: '{{workflow.parameters.action}}'
        dependencies:
        - extract-dns-annotations
        name: manage-cloudflare-dns-record
        template: manage-cloudflare-dns-record
        withParam: '{{tasks.extract-dns-annotations.outputs.result}}'
    name: main
  - inputs:
      parameters:
      - name: kind
      - name: namespace
      - name: name
    name: get-dns-config
    script:
      command:
      - bash
      image: harbor.dmann.dev/docker.io/alpine/k8s:1.21.5
      source: "#!/usr/bin/env bash\nset -eou pipefail\ndefaultZone=\"{{workflow.parameters.defaultZone}}\"\ndefaultService=\"{{inputs.parameters.namespace}}/{{inputs.parameters.name}}\"\n\nrecords=\"\"\n#
        Extract all the annotations\nrecords=$(kubectl get {{inputs.parameters.kind}}
        --namespace {{inputs.parameters.namespace}} --output json {{inputs.parameters.name}}
        \\\n| jq  --arg defaultService \"$defaultService\" --arg defaultZone \"$defaultZone\"
        '. | .metadata.annotations as $annotations | $annotations\n  | to_entries\n
        \   | [\n        .[] | \n            select(\n              (.key | contains(\"k8s.dmann.xyz/cloudflare-domain\"))\n
        \           ) | {\n              key: (.key | sub(\"k8s.dmann.xyz/cloudflare-domain-\";\"\")),
        \n              value: { \n                prefix: .value,\n                zone:
        ($annotations[(.key | sub(\"k8s.dmann.xyz/cloudflare-domain-\";\"k8s.dmann.xyz/cloudflare-zone-\"))]
        // $defaultZone),\n                service: ($annotations[(.key | sub(\"k8s.dmann.xyz/cloudflare-domain-\";\"k8s.dmann.xyz/cloudflare-service-\"))]
        // $defaultService)\n              }\n            }\n      ] | from_entries')\n\n#
        Iterate all the keys of our map above in a subshell so we can easily slurp
        everything in jq\n# to dump the original map back to stdout but with an added
        `service_ip` field\nkeys=$(echo $records | jq -r '. | keys[]')\n(\n  for key
        in $keys; do\n    service=$(echo $records | jq -r --arg key \"$key\" '.[$key].service')\n
        \   service_namespace=$(echo $service | cut -d/ -f1)\n    service_name=$(echo
        $service | cut -d/ -f2)\n    service_ip4=$(kubectl get service --namespace
        \"$service_namespace\" \"$service_name\" --output json | jq -r '[.spec.clusterIPs[]
        | select(test(\":\") | not)] | first')\n    service_ip6=$(kubectl get service
        --namespace \"$service_namespace\" \"$service_name\" --output json | jq -r
        '[.spec.clusterIPs[] | select(test(\":\"))] | first')\n    if [[ -n \"${service_ip6}\"
        ]]; then\n      echo $records | jq --arg service_ip \"$service_ip6\" --arg
        key \"$key\" '{ key: $key, value: (.[$key] + { \n        service_ip: $service_ip,\n
        \       type: \"AAAA\"\n      }) }'\n    fi\n    # We don't have a publicly
        exposed ipv4 cidr so...\n    # if [[ -n \"${service_ip4}\" ]]; then\n    #
        \  echo $records | jq --arg service_ip \"$service_ip4\" --arg key \"$key\"
        '{ key: $key, value: (.[$key] + { \n    #     service_ip: $service_ip,\n    #
        \    type: \"A\"\n    #   }) }'\n    # fi\n  done\n) | jq -s\n"
  - inputs:
      parameters:
      - name: url
      - name: service_ip
      - name: type
      - name: zone
      - name: action
    name: manage-cloudflare-dns-record
    script:
      command:
      - bash
      image: harbor.dmann.dev/docker.io/alpine/k8s:1.21.5
      source: "#!/bin/bash\n# Credit to https://gist.github.com/Tras2/cba88201b17d765ec065ccbedfb16d9a\n\nset
        -eou pipefail \n\nzone=\"{{inputs.parameters.zone}}\"\nurl=\"{{inputs.parameters.url}}\"\naction=\"{{inputs.parameters.action}}\"\nservice_ip=\"{{inputs.parameters.service_ip}}\"\ncloudflare_auth_token=$(cat
        /run/secrets/cloudflare-api/token)\n\n# get the zone id for the requested
        zone\nzoneid=$(curl -s -X GET \"https://api.cloudflare.com/client/v4/zones?name=$zone&status=active\"
        \\\n  -H \"Authorization: Bearer $cloudflare_auth_token\" \\\n  -H \"Content-Type:
        application/json\" | jq -r '{\"result\"}[] | .[0] | .id // \"\"')\n\n\n# if
        here, the dns record needs updating\n# get the dns record id \n# this should
        really dump out the content and check the host ip to compare i guess\ncf_record_id=$(curl
        -s -X GET \"https://api.cloudflare.com/client/v4/zones/$zoneid/dns_records?type={{inputs.parameters.type}}&name=$url\"
        \\\n    -H \"Authorization: Bearer $cloudflare_auth_token\" \\\n    -H \"Content-Type:
        application/json\" | jq -r '{\"result\"}[] | .[0] | .id // \"\"')\n\ncf_api_url=\"https://api.cloudflare.com/client/v4/zones/$zoneid/dns_records/$cf_record_id\"\ncf_api_method=\"PUT\"\nif
        [[ -z \"${cf_record_id}\" ]]; then\n    cf_api_url=\"https://api.cloudflare.com/client/v4/zones/$zoneid/dns_records\"\n
        \   cf_api_method=\"POST\"\nfi\n\nrecordfile=$(mktemp)\n\ntee $recordfile
        <<EOF\n{\n    \"type\": \"{{inputs.parameters.type}}\",\n    \"name\": \"$url\",\n
        \   \"content\": \"$service_ip\",\n    \"ttl\": 1,\n    \"proxied\": false\n}\nEOF\n\n#
        Anything but delete should update the record\nif [[ \"${action}\" != \"delete\"
        ]]; then\n  # update the record\n  result=$(curl -s -X \"$cf_api_method\"
        \"$cf_api_url\" \\\n    -H \"Authorization: Bearer $cloudflare_auth_token\"
        \\\n    -H \"Content-Type: application/json\" \\\n    --data-binary \"@${recordfile}\")\n
        \ echo $result\n  if [[ \"$(echo \"$result\" | jq -r '.success')\" != \"true\"
        ]]; then\n    exit 2\n  fi\nelif [[ ! -z \"${cf_record_id}\" ]]; then\n    #
        Delete the record if one exists and the action is delete\n    curl -s -X \"DELETE\"
        \"$cf_api_url\" \\\n        -H \"Authorization: Bearer $cloudflare_auth_token\"
        \\\n        -H \"Content-Type: application/json\" \nfi"
      volumeMounts:
      - mountPath: /run/secrets/cloudflare-api
        name: cloudflare-api
    volumes:
    - csi:
        driver: secrets-store.csi.k8s.io
        readOnly: true
        volumeAttributes:
          secretProviderClass: vault-dns-cloudflare-token
      name: cloudflare-api
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: blog-tls
  namespace: blog
spec:
  dnsNames:
  - blog.dmann.xyz
  - blog.dmann.dev
  issuerRef:
    kind: ClusterIssuer
    name: zerossl
  secretName: blog-tls
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: workshop-tls
  namespace: k8-workshop
spec:
  dnsNames:
  - kubernetes.workshops.dmann.xyz
  - kubernetes.workshops.dmann.dev
  issuerRef:
    kind: ClusterIssuer
    name: letsencrypt
  secretName: workshop-tls
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: overseer-tls
  namespace: overseer
spec:
  dnsNames:
  - overseer.dmann.xyz
  - overseer.dmann.dev
  issuerRef:
    kind: ClusterIssuer
    name: letsencrypt
  keystores:
    pkcs12:
      create: true
      passwordSecretRef:
        key: password
        name: tls-pkcs12-password
  secretName: overseer-tls
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: plex-tls
  namespace: plex
spec:
  dnsNames:
  - plex.dmann.xyz
  - plex.dmann.dev
  issuerRef:
    kind: ClusterIssuer
    name: letsencrypt
  keystores:
    pkcs12:
      create: true
      passwordSecretRef:
        key: password
        name: plex-tls-pkcs12-password
  secretName: plex-tls
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: prowlarr-tls
  namespace: prowlarr
spec:
  dnsNames:
  - prowlarr.dmann.xyz
  - prowlarr.dmann.dev
  issuerRef:
    kind: ClusterIssuer
    name: letsencrypt
  keystores:
    pkcs12:
      create: true
      passwordSecretRef:
        key: password
        name: tls-pkcs12-password
  secretName: prowlarr-tls
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: radarr-tls
  namespace: radarr
spec:
  dnsNames:
  - radarr.dmann.xyz
  - radarr.dmann.dev
  issuerRef:
    kind: ClusterIssuer
    name: letsencrypt
  keystores:
    pkcs12:
      create: true
      passwordSecretRef:
        key: password
        name: tls-pkcs12-password
  secretName: radarr-tls
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: sabnzbd-tls
  namespace: sabnzbd
spec:
  dnsNames:
  - sabnzbd.dmann.xyz
  - sabnzbd.dmann.dev
  issuerRef:
    kind: ClusterIssuer
    name: letsencrypt
  secretName: sabnzbd-tls
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: sonarr-tls
  namespace: sonarr
spec:
  dnsNames:
  - sonarr.dmann.xyz
  - sonarr.dmann.dev
  issuerRef:
    kind: ClusterIssuer
    name: letsencrypt
  keystores:
    pkcs12:
      create: true
      passwordSecretRef:
        key: password
        name: tls-pkcs12-password
  secretName: sonarr-tls
---
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: vault-dns-cloudflare-token
  namespace: cloudflare-dns
spec:
  parameters:
    objects: |-
      - objectName: "token"
        secretPath: "secret/data/cloudflare-api"
        secretKey: "token"
    roleName: cloudflare-api
  provider: vault
