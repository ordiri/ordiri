apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization

configMapGenerator:
  - name: puma-configuration
    files:
      - puma.rb=puma.rb

resources:
- ingress.yaml
- ca-import-job.yaml

helmCharts:
- name: gitlab
  repo: https://charts.gitlab.io/
  version: 5.7.0
  releaseName: gitlab
  namespace: gitlab
  includeCRDs: true
  # valuesMerge: override
  valuesFile: values.yaml

# The default Gitlab helm charts don't support IpV6, this patches the config
# to support binding to all interfaces. 
# Literally about a days work behind these 30 lines...
patchesJson6902:
- target:
    version: v1
    kind: ConfigMap
    name: gitlab-sidekiq
  patch: |-
    - op: move
      from: /data/gitlab.yml.erb
      path: /data/00upstream_gitlab.yml.erb
      
    - op: add
      path: /data/gitlab.yml.erb
      value: |
        <% 
          rawYaml = File.new("/srv/gitlab/config/00upstream_gitlab.yml").read
          upstream = YAML.load(rawYaml)
          upstream["production"]["monitoring"] = {
            "ip_whitelist" => [
              "::0/0"
            ],
            "sidekiq_exporter" => {
              "enabled"=> true,
              "port"=> 3807,
              "address"=> "::"
            },
            "sidekiq_health_checks"=> {
              "enabled"=> true,
              "address"=> "::",
              "port"=> ""
            }
          }.to_h
        %>
        <%= YAML.dump(upstream)  %>
- target:
    version: v1
    kind: ConfigMap
    name: gitlab-webservice
  patch: |-
    - op: move
      from: /data/gitlab.yml.erb
      path: /data/00upstream_gitlab.yml.erb
    - op: add
      path: /data/gitlab.yml.erb
      value: |
        <% 
          rawYaml = File.new("/srv/gitlab/config/00upstream_gitlab.yml").read
          upstream = YAML.load(rawYaml)
          upstream["production"]["monitoring"] = {
            "ip_whitelist" => [
              "::0/0"
            ],
            "web_exporter" => {
              "enabled" => true,
              "address" => "::",
              "port" => "9229"
            }
          }.to_h
          vaultProvider = YAML.load(File.new("/vault/secrets/vault-oidc").read)
          upstream["production"]["omniauth"]["providers"] = [vaultProvider]
        %>
        <%= YAML.dump(upstream) %>


# This will make calico expose the literal node running the underlying pods
# via bgp ecmp routes so we get real external ip and direct connect to kube
# services without kube proxy, nice!
patchesStrategicMerge:
- patches/inject-omniauth-vault-oidc.yaml
- patches/node-port-session-server.yaml
- patches/puma-ipv6.yaml