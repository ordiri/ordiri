# This should patch the originating object and add some finalizer if it's action is not delete
# otherwise remove the finalizer post delete
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: configure-dns-records
spec:
  serviceAccountName: cloudflaredns-workflow-sa
  entrypoint: main
  arguments:
    parameters:
      - name: kind
        default: Service
      - name: namespace
        default: argocd
      - name: name
        default: argocd-server
      - name: action
        default: update
      - name: defaultZone
        default: dmann.xyz
  dnsConfig:
    options:
    - name: ndots
      value: "1"
  templates:
    - name: main
      dag:
        tasks:
        - name: extract-dns-annotations
          template: get-dns-config
          arguments:
            parameters: 
            - name: kind
              value: "{{workflow.parameters.kind}}"
            - name: namespace
              value: "{{workflow.parameters.namespace}}"
            - name: name
              value: "{{workflow.parameters.name}}"
        - name: manage-cloudflare-dns-record
          dependencies: [extract-dns-annotations]
          template: manage-cloudflare-dns-record
          arguments:
            parameters: 
            - name: url
              value: "{{=sprig.trimPrefix('.', sprig.join('.', [jsonpath(item.value, '$.prefix'), jsonpath(item.value, '$.zone')])) }}"
            - name: service_ip
              value: "{{=jsonpath(item.value, '$.service_ip')}}"
            - name: type
              value: "{{=jsonpath(item.value, '$.type')}}"
            - name: zone
              value: "{{=jsonpath(item.value, '$.zone')}}"
            - name: proxy
              value: "{{=jsonpath(item.value, '$.proxy')}}"
            - name: action
              value: '{{workflow.parameters.action}}'
          withParam: "{{tasks.extract-dns-annotations.outputs.result}}"
    - name: get-dns-config
      inputs:
        parameters:
          - name: kind
          - name: namespace
          - name: name
      script:
        image: docker.io/alpine/k8s:1.27.2
        command: [bash]
        source: |
          #!/usr/bin/env bash
          set -eou pipefail
          defaultZone="{{workflow.parameters.defaultZone}}"
          defaultService="{{inputs.parameters.namespace}}/{{inputs.parameters.name}}"
          defaultProxyVal=true

          records=""
          # Extract all the annotations
          records=$(kubectl get {{inputs.parameters.kind}} --namespace {{inputs.parameters.namespace}} --output json {{inputs.parameters.name}} \
          | jq  --arg defaultService "$defaultService" --arg defaultZone "$defaultZone" --arg defaultProxyVal "$defaultProxyVal" '. | .metadata.annotations as $annotations | $annotations
            | to_entries
              | [
                  .[] | 
                      select(
                        (.key | contains("k8s.dmann.xyz/cloudflare-domain"))
                      ) | {
                        key: (.key | sub("k8s.dmann.xyz/cloudflare-domain-";"")), 
                        value: { 
                          prefix: .value,
                          proxy: ($annotations[(.key | sub("k8s.dmann.xyz/cloudflare-domain-";"k8s.dmann.xyz/cloudflare-proxy-"))] // $defaultProxyVal),
                          zone: ($annotations[(.key | sub("k8s.dmann.xyz/cloudflare-domain-";"k8s.dmann.xyz/cloudflare-zone-"))] // $defaultZone),
                          service: ($annotations[(.key | sub("k8s.dmann.xyz/cloudflare-domain-";"k8s.dmann.xyz/cloudflare-service-"))] // $defaultService)
                        }
                      }
                ] | from_entries')

          # Iterate all the keys of our map above in a subshell so we can easily slurp everything in jq
          # to dump the original map back to stdout but with an added `service_ip` field
          keys=$(echo $records | jq -r '. | keys[]')
          (
            for key in $keys; do
              service=$(echo $records | jq -r --arg key "$key" '.[$key].service')
              proxy=$(echo $records | jq -r --arg key "$key" '.[$key].proxy')
              service_namespace=$(echo $service | cut -d/ -f1)
              service_name=$(echo $service | cut -d/ -f2)
              service_ip4=$(kubectl get service --namespace "$service_namespace" "$service_name" --output json | jq -r '[.spec.clusterIPs[] | select(test(":") | not)] | first')
              service_ip6=$(kubectl get service --namespace "$service_namespace" "$service_name" --output json | jq -r '[.spec.clusterIPs[] | select(test(":"))] | first')
              if [[ -n "${service_ip6}" ]]; then
                echo $records | jq --arg service_ip "$service_ip6" --arg key "$key" --arg proxy "$proxy" '{ key: $key, value: (.[$key] + { 
                  service_ip: $service_ip,
                  proxy: $proxy,
                  type: "AAAA"
                }) }'
              fi
              # We don't have a publicly exposed ipv4 cidr so...
              # if [[ -n "${service_ip4}" ]]; then
              #   echo $records | jq --arg service_ip "$service_ip4" --arg key "$key" '{ key: $key, value: (.[$key] + { 
              #     service_ip: $service_ip,
              #     type: "A"
              #   }) }'
              # fi
            done
          ) | jq -s

    - name: manage-cloudflare-dns-record
      inputs:
        parameters:
          - name: url
          - name: service_ip
          - name: proxy
          - name: type
          - name: zone
          - name: action
      volumes:
      - name: cloudflare-api
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: "vault-dns-cloudflare-token"
      script:
        image: docker.io/alpine/k8s:1.27.2
        command: [bash]
        volumeMounts:
        - name:  cloudflare-api
          mountPath: /run/secrets/cloudflare-api

        source: |
          #!/bin/bash
          # Credit to https://gist.github.com/Tras2/cba88201b17d765ec065ccbedfb16d9a

          set -eou pipefail 

          zone="{{inputs.parameters.zone}}"
          url="{{inputs.parameters.url}}"
          action="{{inputs.parameters.action}}"
          service_ip="{{inputs.parameters.service_ip}}"
          cloudflare_auth_token=$(cat /run/secrets/cloudflare-api/token)

          # get the zone id for the requested zone
          zoneid=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones?name=$zone&status=active" \
            -H "Authorization: Bearer $cloudflare_auth_token" \
            -H "Content-Type: application/json" | jq -r '{"result"}[] | .[0] | .id // ""')

          if [[ -z "${zoneid}" ]]; then
            echo "Unable to resolve the zone ID"
            exit 2
          fi
          


          # if here, the dns record needs updating
          # get the dns record id 
          # this should really dump out the content and check the host ip to compare i guess
          cf_record_id=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/$zoneid/dns_records?type={{inputs.parameters.type}}&name=$url" \
              -H "Authorization: Bearer $cloudflare_auth_token" \
              -H "Content-Type: application/json" | jq -r '{"result"}[] | .[0] | .id // ""')

          cf_api_url="https://api.cloudflare.com/client/v4/zones/$zoneid/dns_records/$cf_record_id"
          cf_api_method="PUT"
          if [[ -z "${cf_record_id}" ]]; then
              cf_api_url="https://api.cloudflare.com/client/v4/zones/$zoneid/dns_records"
              cf_api_method="POST"
          fi

          recordfile=$(mktemp)
          
          tee $recordfile <<EOF
          {
              "type": "{{inputs.parameters.type}}",
              "name": "$url",
              "content": "$service_ip",
              "ttl": 1,
              "proxied": {{inputs.parameters.proxy}}
          }
          EOF

          # Anything but delete should update the record
          if [[ "${action}" != "delete" ]]; then
            # update the record
            result=$(curl -s -X "$cf_api_method" "$cf_api_url" \
              -H "Authorization: Bearer $cloudflare_auth_token" \
              -H "Content-Type: application/json" \
              --data-binary "@${recordfile}")
            echo $result
            if [[ "$(echo "$result" | jq -r '.success')" != "true" ]]; then
              exit 2
            fi
          elif [[ ! -z "${cf_record_id}" ]]; then
              # Delete the record if one exists and the action is delete
              curl -s -X "DELETE" "$cf_api_url" \
                  -H "Authorization: Bearer $cloudflare_auth_token" \
                  -H "Content-Type: application/json" 
          fi